{
    "template":{
        "prefix":"template",
        "body":[
            "AWSTemplateFormatVersion: \"2010-09-09\"",
            "Description: ${1:desc}",
            "Parameters:",
            "  ${2:param}",
            "Mappings:",
            "  ${3:map}",
            "Resources:",
            "  ${4:rsrc}",
            "Outputs:",
            "  ${5:out}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-configurationtemplate":{
        "prefix":"aws-elasticbeanstalk-configurationtemplate",
        "body":[
            "${1:myAWSElasticBeanstalkConfigurationTemplate}:",
            "  Type: AWS::ElasticBeanstalk::ConfigurationTemplate",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    EnvironmentId : ${4:String(O)}",
            "    OptionSettings : [ ${5:aws-elasticbeanstalk-configurationtemplate.configurationoptionsetting(O)} ]",
            "    PlatformArn : ${6:String(O)}",
            "    SolutionStackName : ${7:String(O)}",
            "    SourceConfiguration: ${8:aws-elasticbeanstalk-configurationtemplate.sourceconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker":{
        "prefix":"aws-amazonmq-broker",
        "body":[
            "${1:myAWSAmazonMQBroker}:",
            "  Type: AWS::AmazonMQ::Broker",
            "  Properties:",
            "    SecurityGroups : [ ${2:String(O)} ]",
            "    EngineVersion : ${3:String(R)}",
            "    Configuration: ${4:aws-amazonmq-broker.configurationid(O)}",
            "    MaintenanceWindowStartTime: ${5:aws-amazonmq-broker.maintenancewindow(O)}",
            "    HostInstanceType : ${6:String(R)}",
            "    AutoMinorVersionUpgrade : ${7:Boolean(R)}",
            "    Users : [ ${8:aws-amazonmq-broker.user(R)} ]",
            "    Logs: ${9:aws-amazonmq-broker.loglist(O)}",
            "    SubnetIds : [ ${10:String(O)} ]",
            "    BrokerName : ${11:String(R)}",
            "    DeploymentMode : ${12:String(R)}",
            "    EngineType : ${13:String(R)}",
            "    PubliclyAccessible : ${14:Boolean(R)}",
            "    Tags : [ ${15:aws-amazonmq-broker.tagsentry(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-routetable":{
        "prefix":"aws-ec2-routetable",
        "body":[
            "${1:myAWSEC2RouteTable}:",
            "  Type: AWS::EC2::RouteTable",
            "  Properties:",
            "    Tags : [ ${2:aws-ec2-routetable.tag(O)} ]",
            "    VpcId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource":{
        "prefix":"aws-appsync-datasource",
        "body":[
            "${1:myAWSAppSyncDataSource}:",
            "  Type: AWS::AppSync::DataSource",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    ServiceRoleArn : ${4:String(O)}",
            "    HttpConfig: ${5:aws-appsync-datasource.httpconfig(O)}",
            "    RelationalDatabaseConfig: ${6:aws-appsync-datasource.relationaldatabaseconfig(O)}",
            "    LambdaConfig: ${7:aws-appsync-datasource.lambdaconfig(O)}",
            "    ApiId : ${8:String(R)}",
            "    Name : ${9:String(R)}",
            "    DynamoDBConfig: ${10:aws-appsync-datasource.dynamodbconfig(O)}",
            "    ElasticsearchConfig: ${11:aws-appsync-datasource.elasticsearchconfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-portfolioshare":{
        "prefix":"aws-servicecatalog-portfolioshare",
        "body":[
            "${1:myAWSServiceCatalogPortfolioShare}:",
            "  Type: AWS::ServiceCatalog::PortfolioShare",
            "  Properties:",
            "    AccountId : ${2:String(R)}",
            "    AcceptLanguage : ${3:String(O)}",
            "    PortfolioId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-group":{
        "prefix":"aws-greengrass-group",
        "body":[
            "${1:myAWSGreengrassGroup}:",
            "  Type: AWS::Greengrass::Group",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-group.groupversion(O)}",
            "    RoleArn : ${3:String(O)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypoolroleattachment":{
        "prefix":"aws-cognito-identitypoolroleattachment",
        "body":[
            "${1:myAWSCognitoIdentityPoolRoleAttachment}:",
            "  Type: AWS::Cognito::IdentityPoolRoleAttachment",
            "  Properties:",
            "    RoleMappings : ${2:Json(O)}",
            "    IdentityPoolId : ${3:String(R)}",
            "    Roles : ${4:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule":{
        "prefix":"aws-events-rule",
        "body":[
            "${1:myAWSEventsRule}:",
            "  Type: AWS::Events::Rule",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    EventPattern : ${3:Json(O)}",
            "    Name : ${4:String(O)}",
            "    RoleArn : ${5:String(O)}",
            "    ScheduleExpression : ${6:String(O)}",
            "    State : ${7:String(O)}",
            "    Targets : [ ${8:aws-events-rule.target(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-ipset":{
        "prefix":"aws-waf-ipset",
        "body":[
            "${1:myAWSWAFIPSet}:",
            "  Type: AWS::WAF::IPSet",
            "  Properties:",
            "    IPSetDescriptors : [ ${2:aws-waf-ipset.ipsetdescriptor(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-group":{
        "prefix":"aws-iam-group",
        "body":[
            "${1:myAWSIAMGroup}:",
            "  Type: AWS::IAM::Group",
            "  Properties:",
            "    GroupName : ${2:String(O)}",
            "    ManagedPolicyArns : [ ${3:String(O)} ]",
            "    Path : ${4:String(O)}",
            "    Policies : [ ${5:aws-iam-group.policy(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-customactiontype":{
        "prefix":"aws-codepipeline-customactiontype",
        "body":[
            "${1:myAWSCodePipelineCustomActionType}:",
            "  Type: AWS::CodePipeline::CustomActionType",
            "  Properties:",
            "    Category : ${2:String(R)}",
            "    ConfigurationProperties : [ ${3:aws-codepipeline-customactiontype.configurationproperties(O)} ]",
            "    InputArtifactDetails: ${4:aws-codepipeline-customactiontype.artifactdetails(R)}",
            "    OutputArtifactDetails: ${5:aws-codepipeline-customactiontype.artifactdetails(R)}",
            "    Provider : ${6:String(R)}",
            "    Settings: ${7:aws-codepipeline-customactiontype.settings(O)}",
            "    Version : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode":{
        "prefix":"aws-appmesh-virtualnode",
        "body":[
            "${1:myAWSAppMeshVirtualNode}:",
            "  Type: AWS::AppMesh::VirtualNode",
            "  Properties:",
            "    MeshName : ${2:String(R)}",
            "    Spec: ${3:aws-appmesh-virtualnode.virtualnodespec(R)}",
            "    VirtualNodeName : ${4:String(R)}",
            "    Tags : [ ${5:aws-appmesh-virtualnode.tagref(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualrouter":{
        "prefix":"aws-appmesh-virtualrouter",
        "body":[
            "${1:myAWSAppMeshVirtualRouter}:",
            "  Type: AWS::AppMesh::VirtualRouter",
            "  Properties:",
            "    MeshName : ${2:String(R)}",
            "    VirtualRouterName : ${3:String(R)}",
            "    Spec: ${4:aws-appmesh-virtualrouter.virtualrouterspec(R)}",
            "    Tags : [ ${5:aws-appmesh-virtualrouter.tagref(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-connectordefinition":{
        "prefix":"aws-greengrass-connectordefinition",
        "body":[
            "${1:myAWSGreengrassConnectorDefinition}:",
            "  Type: AWS::Greengrass::ConnectorDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-connectordefinition.connectordefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcpeeringconnection":{
        "prefix":"aws-ec2-vpcpeeringconnection",
        "body":[
            "${1:myAWSEC2VPCPeeringConnection}:",
            "  Type: AWS::EC2::VPCPeeringConnection",
            "  Properties:",
            "    PeerOwnerId : ${2:String(O)}",
            "    PeerRegion : ${3:String(O)}",
            "    PeerRoleArn : ${4:String(O)}",
            "    PeerVpcId : ${5:String(R)}",
            "    Tags : [ ${6:aws-ec2-vpcpeeringconnection.tag(O)} ]",
            "    VpcId : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-placementgroup":{
        "prefix":"aws-ec2-placementgroup",
        "body":[
            "${1:myAWSEC2PlacementGroup}:",
            "  Type: AWS::EC2::PlacementGroup",
            "  Properties:",
            "    Strategy : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain":{
        "prefix":"aws-elasticsearch-domain",
        "body":[
            "${1:myAWSElasticsearchDomain}:",
            "  Type: AWS::Elasticsearch::Domain",
            "  Properties:",
            "    AccessPolicies : ${2:Json(O)}",
            "    AdvancedOptions : [ ${3:String(O)} ]",
            "    DomainName : ${4:String(O)}",
            "    EBSOptions: ${5:aws-elasticsearch-domain.ebsoptions(O)}",
            "    ElasticsearchClusterConfig: ${6:aws-elasticsearch-domain.elasticsearchclusterconfig(O)}",
            "    ElasticsearchVersion : ${7:String(O)}",
            "    EncryptionAtRestOptions: ${8:aws-elasticsearch-domain.encryptionatrestoptions(O)}",
            "    NodeToNodeEncryptionOptions: ${9:aws-elasticsearch-domain.nodetonodeencryptionoptions(O)}",
            "    SnapshotOptions: ${10:aws-elasticsearch-domain.snapshotoptions(O)}",
            "    Tags : [ ${11:aws-elasticsearch-domain.tag(O)} ]",
            "    VPCOptions: ${12:aws-elasticsearch-domain.vpcoptions(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-requestvalidator":{
        "prefix":"aws-apigateway-requestvalidator",
        "body":[
            "${1:myAWSApiGatewayRequestValidator}:",
            "  Type: AWS::ApiGateway::RequestValidator",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    RestApiId : ${3:String(R)}",
            "    ValidateRequestBody : ${4:Boolean(O)}",
            "    ValidateRequestParameters : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sizeconstraintset":{
        "prefix":"aws-wafregional-sizeconstraintset",
        "body":[
            "${1:myAWSWAFRegionalSizeConstraintSet}:",
            "  Type: AWS::WAFRegional::SizeConstraintSet",
            "  Properties:",
            "    SizeConstraints : [ ${2:aws-wafregional-sizeconstraintset.sizeconstraint(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice":{
        "prefix":"aws-appmesh-virtualservice",
        "body":[
            "${1:myAWSAppMeshVirtualService}:",
            "  Type: AWS::AppMesh::VirtualService",
            "  Properties:",
            "    MeshName : ${2:String(R)}",
            "    VirtualServiceName : ${3:String(R)}",
            "    Spec: ${4:aws-appmesh-virtualservice.virtualservicespec(R)}",
            "    Tags : [ ${5:aws-appmesh-virtualservice.tagref(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbsecuritygroupingress":{
        "prefix":"aws-rds-dbsecuritygroupingress",
        "body":[
            "${1:myAWSRDSDBSecurityGroupIngress}:",
            "  Type: AWS::RDS::DBSecurityGroupIngress",
            "  Properties:",
            "    CIDRIP : ${2:String(O)}",
            "    DBSecurityGroupName : ${3:String(R)}",
            "    EC2SecurityGroupId : ${4:String(O)}",
            "    EC2SecurityGroupName : ${5:String(O)}",
            "    EC2SecurityGroupOwnerId : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-workspaces-workspace":{
        "prefix":"aws-workspaces-workspace",
        "body":[
            "${1:myAWSWorkSpacesWorkspace}:",
            "  Type: AWS::WorkSpaces::Workspace",
            "  Properties:",
            "    BundleId : ${2:String(R)}",
            "    DirectoryId : ${3:String(R)}",
            "    RootVolumeEncryptionEnabled : ${4:Boolean(O)}",
            "    Tags : [ ${5:aws-workspaces-workspace.tag(O)} ]",
            "    UserName : ${6:String(R)}",
            "    UserVolumeEncryptionEnabled : ${7:Boolean(O)}",
            "    VolumeEncryptionKey : ${8:String(O)}",
            "    WorkspaceProperties: ${9:aws-workspaces-workspace.workspaceproperties(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig":{
        "prefix":"aws-emr-instancefleetconfig",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig}:",
            "  Type: AWS::EMR::InstanceFleetConfig",
            "  Properties:",
            "    ClusterId : ${2:String(R)}",
            "    InstanceFleetType : ${3:String(R)}",
            "    InstanceTypeConfigs : [ ${4:aws-emr-instancefleetconfig.instancetypeconfig(O)} ]",
            "    LaunchSpecifications: ${5:aws-emr-instancefleetconfig.instancefleetprovisioningspecifications(O)}",
            "    Name : ${6:String(O)}",
            "    TargetOnDemandCapacity : ${7:Integer(O)}",
            "    TargetSpotCapacity : ${8:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sqlinjectionmatchset":{
        "prefix":"aws-wafregional-sqlinjectionmatchset",
        "body":[
            "${1:myAWSWAFRegionalSqlInjectionMatchSet}:",
            "  Type: AWS::WAFRegional::SqlInjectionMatchSet",
            "  Properties:",
            "    SqlInjectionMatchTuples : [ ${2:aws-wafregional-sqlinjectionmatchset.sqlinjectionmatchtuple(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-route":{
        "prefix":"aws-apigatewayv2-route",
        "body":[
            "${1:myAWSApiGatewayV2Route}:",
            "  Type: AWS::ApiGatewayV2::Route",
            "  Properties:",
            "    Target : ${2:String(O)}",
            "    RouteResponseSelectionExpression : ${3:String(O)}",
            "    AuthorizerId : ${4:String(O)}",
            "    RequestModels : ${5:Json(O)}",
            "    OperationName : ${6:String(O)}",
            "    AuthorizationScopes : [ ${7:String(O)} ]",
            "    ApiKeyRequired : ${8:Boolean(O)}",
            "    RouteKey : ${9:String(R)}",
            "    AuthorizationType : ${10:String(O)}",
            "    ModelSelectionExpression : ${11:String(O)}",
            "    ApiId : ${12:String(R)}",
            "    RequestParameters : ${13:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-loggroup":{
        "prefix":"aws-logs-loggroup",
        "body":[
            "${1:myAWSLogsLogGroup}:",
            "  Type: AWS::Logs::LogGroup",
            "  Properties:",
            "    LogGroupName : ${2:String(O)}",
            "    RetentionInDays : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-webhook":{
        "prefix":"aws-codepipeline-webhook",
        "body":[
            "${1:myAWSCodePipelineWebhook}:",
            "  Type: AWS::CodePipeline::Webhook",
            "  Properties:",
            "    AuthenticationConfiguration: ${2:aws-codepipeline-webhook.webhookauthconfiguration(R)}",
            "    Filters : [ ${3:aws-codepipeline-webhook.webhookfilterrule(R)} ]",
            "    Authentication : ${4:String(R)}",
            "    TargetPipeline : ${5:String(R)}",
            "    TargetAction : ${6:String(R)}",
            "    Name : ${7:String(O)}",
            "    TargetPipelineVersion : ${8:Integer(R)}",
            "    RegisterWithThirdParty : ${9:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ram-resourceshare":{
        "prefix":"aws-ram-resourceshare",
        "body":[
            "${1:myAWSRAMResourceShare}:",
            "  Type: AWS::RAM::ResourceShare",
            "  Properties:",
            "    Principals : [ ${2:String(O)} ]",
            "    AllowExternalPrincipals : ${3:Boolean(O)}",
            "    ResourceArns : [ ${4:String(O)} ]",
            "    Tags : [ ${5:aws-ram-resourceshare.tag(O)} ]",
            "    Name : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesis-stream":{
        "prefix":"aws-kinesis-stream",
        "body":[
            "${1:myAWSKinesisStream}:",
            "  Type: AWS::Kinesis::Stream",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    RetentionPeriodHours : ${3:Integer(O)}",
            "    ShardCount : ${4:Integer(R)}",
            "    StreamEncryption: ${5:aws-kinesis-stream.streamencryption(O)}",
            "    Tags : [ ${6:aws-kinesis-stream.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-launchconfiguration":{
        "prefix":"aws-autoscaling-launchconfiguration",
        "body":[
            "${1:myAWSAutoScalingLaunchConfiguration}:",
            "  Type: AWS::AutoScaling::LaunchConfiguration",
            "  Properties:",
            "    AssociatePublicIpAddress : ${2:Boolean(O)}",
            "    BlockDeviceMappings : [ ${3:aws-autoscaling-launchconfiguration.blockdevicemapping(O)} ]",
            "    ClassicLinkVPCId : ${4:String(O)}",
            "    ClassicLinkVPCSecurityGroups : [ ${5:String(O)} ]",
            "    EbsOptimized : ${6:Boolean(O)}",
            "    IamInstanceProfile : ${7:String(O)}",
            "    ImageId : ${8:String(R)}",
            "    InstanceId : ${9:String(O)}",
            "    InstanceMonitoring : ${10:Boolean(O)}",
            "    InstanceType : ${11:String(R)}",
            "    KernelId : ${12:String(O)}",
            "    KeyName : ${13:String(O)}",
            "    LaunchConfigurationName : ${14:String(O)}",
            "    PlacementTenancy : ${15:String(O)}",
            "    RamDiskId : ${16:String(O)}",
            "    SecurityGroups : [ ${17:String(O)} ]",
            "    SpotPrice : ${18:String(O)}",
            "    UserData : ${19:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgateway":{
        "prefix":"aws-ec2-transitgateway",
        "body":[
            "${1:myAWSEC2TransitGateway}:",
            "  Type: AWS::EC2::TransitGateway",
            "  Properties:",
            "    DefaultRouteTablePropagation : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    AutoAcceptSharedAttachments : ${4:String(O)}",
            "    DefaultRouteTableAssociation : ${5:String(O)}",
            "    VpnEcmpSupport : ${6:String(O)}",
            "    DnsSupport : ${7:String(O)}",
            "    AmazonSideAsn : ${8:Integer(O)}",
            "    Tags : [ ${9:aws-ec2-transitgateway.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sqs-queue":{
        "prefix":"aws-sqs-queue",
        "body":[
            "${1:myAWSSQSQueue}:",
            "  Type: AWS::SQS::Queue",
            "  Properties:",
            "    ContentBasedDeduplication : ${2:Boolean(O)}",
            "    DelaySeconds : ${3:Integer(O)}",
            "    FifoQueue : ${4:Boolean(O)}",
            "    KmsDataKeyReusePeriodSeconds : ${5:Integer(O)}",
            "    KmsMasterKeyId : ${6:String(O)}",
            "    MaximumMessageSize : ${7:Integer(O)}",
            "    MessageRetentionPeriod : ${8:Integer(O)}",
            "    QueueName : ${9:String(O)}",
            "    ReceiveMessageWaitTimeSeconds : ${10:Integer(O)}",
            "    RedrivePolicy : ${11:Json(O)}",
            "    Tags : [ ${12:aws-sqs-queue.tag(O)} ]",
            "    VisibilityTimeout : ${13:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-resolver":{
        "prefix":"aws-appsync-resolver",
        "body":[
            "${1:myAWSAppSyncResolver}:",
            "  Type: AWS::AppSync::Resolver",
            "  Properties:",
            "    ResponseMappingTemplateS3Location : ${2:String(O)}",
            "    TypeName : ${3:String(R)}",
            "    PipelineConfig: ${4:aws-appsync-resolver.pipelineconfig(O)}",
            "    DataSourceName : ${5:String(O)}",
            "    RequestMappingTemplate : ${6:String(O)}",
            "    ResponseMappingTemplate : ${7:String(O)}",
            "    Kind : ${8:String(O)}",
            "    RequestMappingTemplateS3Location : ${9:String(O)}",
            "    ApiId : ${10:String(R)}",
            "    FieldName : ${11:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan":{
        "prefix":"aws-autoscalingplans-scalingplan",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan",
            "  Properties:",
            "    ApplicationSource: ${2:aws-autoscalingplans-scalingplan.applicationsource(R)}",
            "    ScalingInstructions : [ ${3:aws-autoscalingplans-scalingplan.scalinginstruction(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-imagebuilder":{
        "prefix":"aws-appstream-imagebuilder",
        "body":[
            "${1:myAWSAppStreamImageBuilder}:",
            "  Type: AWS::AppStream::ImageBuilder",
            "  Properties:",
            "    ImageName : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    VpcConfig: ${4:aws-appstream-imagebuilder.vpcconfig(O)}",
            "    EnableDefaultInternetAccess : ${5:Boolean(O)}",
            "    DisplayName : ${6:String(O)}",
            "    DomainJoinInfo: ${7:aws-appstream-imagebuilder.domainjoininfo(O)}",
            "    AppstreamAgentVersion : ${8:String(O)}",
            "    InstanceType : ${9:String(R)}",
            "    Tags : [ ${10:aws-appstream-imagebuilder.tag(O)} ]",
            "    Name : ${11:String(O)}",
            "    ImageArn : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcendpointservicepermissions":{
        "prefix":"aws-ec2-vpcendpointservicepermissions",
        "body":[
            "${1:myAWSEC2VPCEndpointServicePermissions}:",
            "  Type: AWS::EC2::VPCEndpointServicePermissions",
            "  Properties:",
            "    AllowedPrincipals : [ ${2:String(O)} ]",
            "    ServiceId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-xssmatchset":{
        "prefix":"aws-wafregional-xssmatchset",
        "body":[
            "${1:myAWSWAFRegionalXssMatchSet}:",
            "  Type: AWS::WAFRegional::XssMatchSet",
            "  Properties:",
            "    XssMatchTuples : [ ${2:aws-wafregional-xssmatchset.xssmatchtuple(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordset":{
        "prefix":"aws-route53-recordset",
        "body":[
            "${1:myAWSRoute53RecordSet}:",
            "  Type: AWS::Route53::RecordSet",
            "  Properties:",
            "    AliasTarget: ${2:aws-route53-recordset.aliastarget(O)}",
            "    Comment : ${3:String(O)}",
            "    Failover : ${4:String(O)}",
            "    GeoLocation: ${5:aws-route53-recordset.geolocation(O)}",
            "    HealthCheckId : ${6:String(O)}",
            "    HostedZoneId : ${7:String(O)}",
            "    HostedZoneName : ${8:String(O)}",
            "    MultiValueAnswer : ${9:Boolean(O)}",
            "    Name : ${10:String(R)}",
            "    Region : ${11:String(O)}",
            "    ResourceRecords : [ ${12:String(O)} ]",
            "    SetIdentifier : ${13:String(O)}",
            "    TTL : ${14:String(O)}",
            "    Type : ${15:String(R)}",
            "    Weight : ${16:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sizeconstraintset":{
        "prefix":"aws-waf-sizeconstraintset",
        "body":[
            "${1:myAWSWAFSizeConstraintSet}:",
            "  Type: AWS::WAF::SizeConstraintSet",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    SizeConstraints : [ ${3:aws-waf-sizeconstraintset.sizeconstraint(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkaclentry":{
        "prefix":"aws-ec2-networkaclentry",
        "body":[
            "${1:myAWSEC2NetworkAclEntry}:",
            "  Type: AWS::EC2::NetworkAclEntry",
            "  Properties:",
            "    CidrBlock : ${2:String(R)}",
            "    Egress : ${3:Boolean(O)}",
            "    Icmp: ${4:aws-ec2-networkaclentry.icmp(O)}",
            "    Ipv6CidrBlock : ${5:String(O)}",
            "    NetworkAclId : ${6:String(R)}",
            "    PortRange: ${7:aws-ec2-networkaclentry.portrange(O)}",
            "    Protocol : ${8:Integer(R)}",
            "    RuleAction : ${9:String(R)}",
            "    RuleNumber : ${10:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-dashboard":{
        "prefix":"aws-cloudwatch-dashboard",
        "body":[
            "${1:myAWSCloudWatchDashboard}:",
            "  Type: AWS::CloudWatch::Dashboard",
            "  Properties:",
            "    DashboardName : ${2:String(O)}",
            "    DashboardBody : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-policy":{
        "prefix":"aws-iam-policy",
        "body":[
            "${1:myAWSIAMPolicy}:",
            "  Type: AWS::IAM::Policy",
            "  Properties:",
            "    Groups : [ ${2:String(O)} ]",
            "    PolicyDocument : ${3:Json(R)}",
            "    PolicyName : ${4:String(R)}",
            "    Roles : [ ${5:String(O)} ]",
            "    Users : [ ${6:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-internetgateway":{
        "prefix":"aws-ec2-internetgateway",
        "body":[
            "${1:myAWSEC2InternetGateway}:",
            "  Type: AWS::EC2::InternetGateway",
            "  Properties:",
            "    Tags : [ ${2:aws-ec2-internetgateway.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-cluster":{
        "prefix":"aws-ecs-cluster",
        "body":[
            "${1:myAWSECSCluster}:",
            "  Type: AWS::ECS::Cluster",
            "  Properties:",
            "    ClusterName : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenercertificate":{
        "prefix":"aws-elasticloadbalancingv2-listenercertificate",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerCertificate}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerCertificate",
            "  Properties:",
            "    Certificates : [ ${2:aws-elasticloadbalancingv2-listenercertificate.certificate(R)} ]",
            "    ListenerArn : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-role":{
        "prefix":"aws-iam-role",
        "body":[
            "${1:myAWSIAMRole}:",
            "  Type: AWS::IAM::Role",
            "  Properties:",
            "    AssumeRolePolicyDocument : ${2:Json(R)}",
            "    ManagedPolicyArns : [ ${3:String(O)} ]",
            "    MaxSessionDuration : ${4:Integer(O)}",
            "    Path : ${5:String(O)}",
            "    PermissionsBoundary : ${6:String(O)}",
            "    Policies : [ ${7:aws-iam-role.policy(O)} ]",
            "    RoleName : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-neptune-dbparametergroup":{
        "prefix":"aws-neptune-dbparametergroup",
        "body":[
            "${1:myAWSNeptuneDBParameterGroup}:",
            "  Type: AWS::Neptune::DBParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Parameters : ${3:Json(R)}",
            "    Family : ${4:String(R)}",
            "    Tags : [ ${5:aws-neptune-dbparametergroup.tag(O)} ]",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-stepfunctions-activity":{
        "prefix":"aws-stepfunctions-activity",
        "body":[
            "${1:myAWSStepFunctionsActivity}:",
            "  Type: AWS::StepFunctions::Activity",
            "  Properties:",
            "    Tags : [ ${2:aws-stepfunctions-activity.tagsentry(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput":{
        "prefix":"aws-kinesisanalytics-applicationoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    Output: ${3:aws-kinesisanalytics-applicationoutput.output(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate":{
        "prefix":"aws-ec2-launchtemplate",
        "body":[
            "${1:myAWSEC2LaunchTemplate}:",
            "  Type: AWS::EC2::LaunchTemplate",
            "  Properties:",
            "    LaunchTemplateName : ${2:String(O)}",
            "    LaunchTemplateData: ${3:aws-ec2-launchtemplate.launchtemplatedata(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-volume":{
        "prefix":"aws-opsworks-volume",
        "body":[
            "${1:myAWSOpsWorksVolume}:",
            "  Type: AWS::OpsWorks::Volume",
            "  Properties:",
            "    Ec2VolumeId : ${2:String(R)}",
            "    MountPoint : ${3:String(O)}",
            "    Name : ${4:String(O)}",
            "    StackId : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-tagoptionassociation":{
        "prefix":"aws-servicecatalog-tagoptionassociation",
        "body":[
            "${1:myAWSServiceCatalogTagOptionAssociation}:",
            "  Type: AWS::ServiceCatalog::TagOptionAssociation",
            "  Properties:",
            "    TagOptionId : ${2:String(R)}",
            "    ResourceId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stack":{
        "prefix":"aws-appstream-stack",
        "body":[
            "${1:myAWSAppStreamStack}:",
            "  Type: AWS::AppStream::Stack",
            "  Properties:",
            "    ApplicationSettings: ${2:aws-appstream-stack.applicationsettings(O)}",
            "    Description : ${3:String(O)}",
            "    StorageConnectors : [ ${4:aws-appstream-stack.storageconnector(O)} ]",
            "    DeleteStorageConnectors : ${5:Boolean(O)}",
            "    UserSettings : [ ${6:aws-appstream-stack.usersetting(O)} ]",
            "    AttributesToDelete : [ ${7:String(O)} ]",
            "    DisplayName : ${8:String(O)}",
            "    RedirectURL : ${9:String(O)}",
            "    Tags : [ ${10:aws-appstream-stack.tag(O)} ]",
            "    Name : ${11:String(O)}",
            "    FeedbackURL : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgatewayroutetableassociation":{
        "prefix":"aws-ec2-transitgatewayroutetableassociation",
        "body":[
            "${1:myAWSEC2TransitGatewayRouteTableAssociation}:",
            "  Type: AWS::EC2::TransitGatewayRouteTableAssociation",
            "  Properties:",
            "    TransitGatewayRouteTableId : ${2:String(R)}",
            "    TransitGatewayAttachmentId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-graphqlschema":{
        "prefix":"aws-appsync-graphqlschema",
        "body":[
            "${1:myAWSAppSyncGraphQLSchema}:",
            "  Type: AWS::AppSync::GraphQLSchema",
            "  Properties:",
            "    Definition : ${2:String(O)}",
            "    DefinitionS3Location : ${3:String(O)}",
            "    ApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-volume":{
        "prefix":"aws-ec2-volume",
        "body":[
            "${1:myAWSEC2Volume}:",
            "  Type: AWS::EC2::Volume",
            "  Properties:",
            "    AutoEnableIO : ${2:Boolean(O)}",
            "    AvailabilityZone : ${3:String(R)}",
            "    Encrypted : ${4:Boolean(O)}",
            "    Iops : ${5:Integer(O)}",
            "    KmsKeyId : ${6:String(O)}",
            "    Size : ${7:Integer(O)}",
            "    SnapshotId : ${8:String(O)}",
            "    Tags : [ ${9:aws-ec2-volume.tag(O)} ]",
            "    VolumeType : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-servicelinkedrole":{
        "prefix":"aws-iam-servicelinkedrole",
        "body":[
            "${1:myAWSIAMServiceLinkedRole}:",
            "  Type: AWS::IAM::ServiceLinkedRole",
            "  Properties:",
            "    CustomSuffix : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    AWSServiceName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-launchtemplateconstraint":{
        "prefix":"aws-servicecatalog-launchtemplateconstraint",
        "body":[
            "${1:myAWSServiceCatalogLaunchTemplateConstraint}:",
            "  Type: AWS::ServiceCatalog::LaunchTemplateConstraint",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    AcceptLanguage : ${3:String(O)}",
            "    PortfolioId : ${4:String(R)}",
            "    ProductId : ${5:String(R)}",
            "    Rules : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-connectordefinitionversion":{
        "prefix":"aws-greengrass-connectordefinitionversion",
        "body":[
            "${1:myAWSGreengrassConnectorDefinitionVersion}:",
            "  Type: AWS::Greengrass::ConnectorDefinitionVersion",
            "  Properties:",
            "    Connectors : [ ${2:aws-greengrass-connectordefinitionversion.connector(R)} ]",
            "    ConnectorDefinitionId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster":{
        "prefix":"aws-emr-cluster",
        "body":[
            "${1:myAWSEMRCluster}:",
            "  Type: AWS::EMR::Cluster",
            "  Properties:",
            "    AdditionalInfo : ${2:Json(O)}",
            "    Applications : [ ${3:aws-emr-cluster.application(O)} ]",
            "    AutoScalingRole : ${4:String(O)}",
            "    BootstrapActions : [ ${5:aws-emr-cluster.bootstrapactionconfig(O)} ]",
            "    Configurations : [ ${6:aws-emr-cluster.configuration(O)} ]",
            "    CustomAmiId : ${7:String(O)}",
            "    EbsRootVolumeSize : ${8:Integer(O)}",
            "    Instances: ${9:aws-emr-cluster.jobflowinstancesconfig(R)}",
            "    JobFlowRole : ${10:String(R)}",
            "    KerberosAttributes: ${11:aws-emr-cluster.kerberosattributes(O)}",
            "    LogUri : ${12:String(O)}",
            "    Name : ${13:String(R)}",
            "    ReleaseLabel : ${14:String(O)}",
            "    ScaleDownBehavior : ${15:String(O)}",
            "    SecurityConfiguration : ${16:String(O)}",
            "    ServiceRole : ${17:String(R)}",
            "    Steps : [ ${18:aws-emr-cluster.stepconfig(O)} ]",
            "    Tags : [ ${19:aws-emr-cluster.tag(O)} ]",
            "    VisibleToAllUsers : ${20:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet":{
        "prefix":"aws-ec2-spotfleet",
        "body":[
            "${1:myAWSEC2SpotFleet}:",
            "  Type: AWS::EC2::SpotFleet",
            "  Properties:",
            "    SpotFleetRequestConfigData: ${2:aws-ec2-spotfleet.spotfleetrequestconfigdata(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-graphqlapi":{
        "prefix":"aws-appsync-graphqlapi",
        "body":[
            "${1:myAWSAppSyncGraphQLApi}:",
            "  Type: AWS::AppSync::GraphQLApi",
            "  Properties:",
            "    OpenIDConnectConfig: ${2:aws-appsync-graphqlapi.openidconnectconfig(O)}",
            "    UserPoolConfig: ${3:aws-appsync-graphqlapi.userpoolconfig(O)}",
            "    Name : ${4:String(R)}",
            "    AuthenticationType : ${5:String(R)}",
            "    LogConfig: ${6:aws-appsync-graphqlapi.logconfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-streamingdistribution":{
        "prefix":"aws-cloudfront-streamingdistribution",
        "body":[
            "${1:myAWSCloudFrontStreamingDistribution}:",
            "  Type: AWS::CloudFront::StreamingDistribution",
            "  Properties:",
            "    StreamingDistributionConfig: ${2:aws-cloudfront-streamingdistribution.streamingdistributionconfig(R)}",
            "    Tags : [ ${3:aws-cloudfront-streamingdistribution.tag(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-alias":{
        "prefix":"aws-gamelift-alias",
        "body":[
            "${1:myAWSGameLiftAlias}:",
            "  Type: AWS::GameLift::Alias",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Name : ${3:String(R)}",
            "    RoutingStrategy: ${4:aws-gamelift-alias.routingstrategy(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-filter":{
        "prefix":"aws-guardduty-filter",
        "body":[
            "${1:myAWSGuardDutyFilter}:",
            "  Type: AWS::GuardDuty::Filter",
            "  Properties:",
            "    Action : ${2:String(R)}",
            "    Description : ${3:String(R)}",
            "    DetectorId : ${4:String(R)}",
            "    FindingCriteria: ${5:aws-guardduty-filter.findingcriteria(R)}",
            "    Rank : ${6:Integer(R)}",
            "    Name : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpnconnectionroute":{
        "prefix":"aws-ec2-vpnconnectionroute",
        "body":[
            "${1:myAWSEC2VPNConnectionRoute}:",
            "  Type: AWS::EC2::VPNConnectionRoute",
            "  Properties:",
            "    DestinationCidrBlock : ${2:String(R)}",
            "    VpnConnectionId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-directoryservice-microsoftad":{
        "prefix":"aws-directoryservice-microsoftad",
        "body":[
            "${1:myAWSDirectoryServiceMicrosoftAD}:",
            "  Type: AWS::DirectoryService::MicrosoftAD",
            "  Properties:",
            "    CreateAlias : ${2:Boolean(O)}",
            "    Edition : ${3:String(O)}",
            "    EnableSso : ${4:Boolean(O)}",
            "    Name : ${5:String(R)}",
            "    Password : ${6:String(R)}",
            "    ShortName : ${7:String(O)}",
            "    VpcSettings: ${8:aws-directoryservice-microsoftad.vpcsettings(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-rule":{
        "prefix":"aws-waf-rule",
        "body":[
            "${1:myAWSWAFRule}:",
            "  Type: AWS::WAF::Rule",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    Name : ${3:String(R)}",
            "    Predicates : [ ${4:aws-waf-rule.predicate(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sns-subscription":{
        "prefix":"aws-sns-subscription",
        "body":[
            "${1:myAWSSNSSubscription}:",
            "  Type: AWS::SNS::Subscription",
            "  Properties:",
            "    DeliveryPolicy : ${2:Json(O)}",
            "    Endpoint : ${3:String(O)}",
            "    FilterPolicy : ${4:Json(O)}",
            "    Protocol : ${5:String(R)}",
            "    RawMessageDelivery : ${6:Boolean(O)}",
            "    Region : ${7:String(O)}",
            "    TopicArn : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-efs-mounttarget":{
        "prefix":"aws-efs-mounttarget",
        "body":[
            "${1:myAWSEFSMountTarget}:",
            "  Type: AWS::EFS::MountTarget",
            "  Properties:",
            "    FileSystemId : ${2:String(R)}",
            "    IpAddress : ${3:String(O)}",
            "    SecurityGroups : [ ${4:String(R)} ]",
            "    SubnetId : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition":{
        "prefix":"aws-greengrass-functiondefinition",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition}:",
            "  Type: AWS::Greengrass::FunctionDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-functiondefinition.functiondefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-document":{
        "prefix":"aws-ssm-document",
        "body":[
            "${1:myAWSSSMDocument}:",
            "  Type: AWS::SSM::Document",
            "  Properties:",
            "    Content : ${2:Json(R)}",
            "    DocumentType : ${3:String(O)}",
            "    Tags : [ ${4:aws-ssm-document.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sns-topic":{
        "prefix":"aws-sns-topic",
        "body":[
            "${1:myAWSSNSTopic}:",
            "  Type: AWS::SNS::Topic",
            "  Properties:",
            "    DisplayName : ${2:String(O)}",
            "    KmsMasterKeyId : ${3:String(O)}",
            "    Subscription : [ ${4:aws-sns-topic.subscription(O)} ]",
            "    TopicName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkinterfacepermission":{
        "prefix":"aws-ec2-networkinterfacepermission",
        "body":[
            "${1:myAWSEC2NetworkInterfacePermission}:",
            "  Type: AWS::EC2::NetworkInterfacePermission",
            "  Properties:",
            "    AwsAccountId : ${2:String(R)}",
            "    NetworkInterfaceId : ${3:String(R)}",
            "    Permission : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-model":{
        "prefix":"aws-sagemaker-model",
        "body":[
            "${1:myAWSSageMakerModel}:",
            "  Type: AWS::SageMaker::Model",
            "  Properties:",
            "    ExecutionRoleArn : ${2:String(R)}",
            "    PrimaryContainer: ${3:aws-sagemaker-model.containerdefinition(O)}",
            "    ModelName : ${4:String(O)}",
            "    VpcConfig: ${5:aws-sagemaker-model.vpcconfig(O)}",
            "    Containers : [ ${6:aws-sagemaker-model.containerdefinition(O)} ]",
            "    Tags : [ ${7:aws-sagemaker-model.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-deliverychannel":{
        "prefix":"aws-config-deliverychannel",
        "body":[
            "${1:myAWSConfigDeliveryChannel}:",
            "  Type: AWS::Config::DeliveryChannel",
            "  Properties:",
            "    ConfigSnapshotDeliveryProperties: ${2:aws-config-deliverychannel.configsnapshotdeliveryproperties(O)}",
            "    Name : ${3:String(O)}",
            "    S3BucketName : ${4:String(R)}",
            "    S3KeyPrefix : ${5:String(O)}",
            "    SnsTopicARN : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-build":{
        "prefix":"aws-gamelift-build",
        "body":[
            "${1:myAWSGameLiftBuild}:",
            "  Type: AWS::GameLift::Build",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    StorageLocation: ${3:aws-gamelift-build.s3location(O)}",
            "    Version : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-tagoption":{
        "prefix":"aws-servicecatalog-tagoption",
        "body":[
            "${1:myAWSServiceCatalogTagOption}:",
            "  Type: AWS::ServiceCatalog::TagOption",
            "  Properties:",
            "    Active : ${2:Boolean(O)}",
            "    Value : ${3:String(R)}",
            "    Key : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-notebookinstancelifecycleconfig":{
        "prefix":"aws-sagemaker-notebookinstancelifecycleconfig",
        "body":[
            "${1:myAWSSageMakerNotebookInstanceLifecycleConfig}:",
            "  Type: AWS::SageMaker::NotebookInstanceLifecycleConfig",
            "  Properties:",
            "    OnStart : [ ${2:aws-sagemaker-notebookinstancelifecycleconfig.notebookinstancelifecyclehook(O)} ]",
            "    NotebookInstanceLifecycleConfigName : ${3:String(O)}",
            "    OnCreate : [ ${4:aws-sagemaker-notebookinstancelifecycleconfig.notebookinstancelifecyclehook(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment":{
        "prefix":"aws-apigateway-deployment",
        "body":[
            "${1:myAWSApiGatewayDeployment}:",
            "  Type: AWS::ApiGateway::Deployment",
            "  Properties:",
            "    DeploymentCanarySettings: ${2:aws-apigateway-deployment.deploymentcanarysettings(O)}",
            "    Description : ${3:String(O)}",
            "    RestApiId : ${4:String(R)}",
            "    StageDescription: ${5:aws-apigateway-deployment.stagedescription(O)}",
            "    StageName : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpoolgroup":{
        "prefix":"aws-cognito-userpoolgroup",
        "body":[
            "${1:myAWSCognitoUserPoolGroup}:",
            "  Type: AWS::Cognito::UserPoolGroup",
            "  Properties:",
            "    GroupName : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    UserPoolId : ${4:String(R)}",
            "    Precedence : ${5:Double(O)}",
            "    RoleArn : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-integration":{
        "prefix":"aws-apigatewayv2-integration",
        "body":[
            "${1:myAWSApiGatewayV2Integration}:",
            "  Type: AWS::ApiGatewayV2::Integration",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    TemplateSelectionExpression : ${3:String(O)}",
            "    ConnectionType : ${4:String(O)}",
            "    IntegrationMethod : ${5:String(O)}",
            "    PassthroughBehavior : ${6:String(O)}",
            "    RequestParameters : ${7:Json(O)}",
            "    IntegrationUri : ${8:String(O)}",
            "    CredentialsArn : ${9:String(O)}",
            "    RequestTemplates : ${10:Json(O)}",
            "    TimeoutInMillis : ${11:Integer(O)}",
            "    ContentHandlingStrategy : ${12:String(O)}",
            "    ApiId : ${13:String(R)}",
            "    IntegrationType : ${14:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kms-key":{
        "prefix":"aws-kms-key",
        "body":[
            "${1:myAWSKMSKey}:",
            "  Type: AWS::KMS::Key",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    EnableKeyRotation : ${3:Boolean(O)}",
            "    Enabled : ${4:Boolean(O)}",
            "    KeyPolicy : ${5:Json(R)}",
            "    KeyUsage : ${6:String(O)}",
            "    PendingWindowInDays : ${7:Integer(O)}",
            "    Tags : [ ${8:aws-kms-key.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-cluster":{
        "prefix":"aws-redshift-cluster",
        "body":[
            "${1:myAWSRedshiftCluster}:",
            "  Type: AWS::Redshift::Cluster",
            "  Properties:",
            "    AllowVersionUpgrade : ${2:Boolean(O)}",
            "    AutomatedSnapshotRetentionPeriod : ${3:Integer(O)}",
            "    AvailabilityZone : ${4:String(O)}",
            "    ClusterIdentifier : ${5:String(O)}",
            "    ClusterParameterGroupName : ${6:String(O)}",
            "    ClusterSecurityGroups : [ ${7:String(O)} ]",
            "    ClusterSubnetGroupName : ${8:String(O)}",
            "    ClusterType : ${9:String(R)}",
            "    ClusterVersion : ${10:String(O)}",
            "    DBName : ${11:String(R)}",
            "    ElasticIp : ${12:String(O)}",
            "    Encrypted : ${13:Boolean(O)}",
            "    HsmClientCertificateIdentifier : ${14:String(O)}",
            "    HsmConfigurationIdentifier : ${15:String(O)}",
            "    IamRoles : [ ${16:String(O)} ]",
            "    KmsKeyId : ${17:String(O)}",
            "    LoggingProperties: ${18:aws-redshift-cluster.loggingproperties(O)}",
            "    MasterUserPassword : ${19:String(R)}",
            "    MasterUsername : ${20:String(R)}",
            "    NodeType : ${21:String(R)}",
            "    NumberOfNodes : ${22:Integer(O)}",
            "    OwnerAccount : ${23:String(O)}",
            "    Port : ${24:Integer(O)}",
            "    PreferredMaintenanceWindow : ${25:String(O)}",
            "    PubliclyAccessible : ${26:Boolean(O)}",
            "    SnapshotClusterIdentifier : ${27:String(O)}",
            "    SnapshotIdentifier : ${28:String(O)}",
            "    Tags : [ ${29:aws-redshift-cluster.tag(O)} ]",
            "    VpcSecurityGroupIds : [ ${30:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-alarm":{
        "prefix":"aws-cloudwatch-alarm",
        "body":[
            "${1:myAWSCloudWatchAlarm}:",
            "  Type: AWS::CloudWatch::Alarm",
            "  Properties:",
            "    ActionsEnabled : ${2:Boolean(O)}",
            "    AlarmActions : [ ${3:String(O)} ]",
            "    AlarmDescription : ${4:String(O)}",
            "    AlarmName : ${5:String(O)}",
            "    ComparisonOperator : ${6:String(R)}",
            "    DatapointsToAlarm : ${7:Integer(O)}",
            "    Dimensions : [ ${8:aws-cloudwatch-alarm.dimension(O)} ]",
            "    EvaluateLowSampleCountPercentile : ${9:String(O)}",
            "    EvaluationPeriods : ${10:Integer(R)}",
            "    ExtendedStatistic : ${11:String(O)}",
            "    InsufficientDataActions : [ ${12:String(O)} ]",
            "    MetricName : ${13:String(O)}",
            "    Metrics : [ ${14:aws-cloudwatch-alarm.metricdataquery(O)} ]",
            "    Namespace : ${15:String(O)}",
            "    OKActions : [ ${16:String(O)} ]",
            "    Period : ${17:Integer(O)}",
            "    Statistic : ${18:String(O)}",
            "    Threshold : ${19:Double(R)}",
            "    TreatMissingData : ${20:String(O)}",
            "    Unit : ${21:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-app":{
        "prefix":"aws-opsworks-app",
        "body":[
            "${1:myAWSOpsWorksApp}:",
            "  Type: AWS::OpsWorks::App",
            "  Properties:",
            "    AppSource: ${2:aws-opsworks-app.source(O)}",
            "    Attributes : [ ${3:String(O)} ]",
            "    DataSources : [ ${4:aws-opsworks-app.datasource(O)} ]",
            "    Description : ${5:String(O)}",
            "    Domains : [ ${6:String(O)} ]",
            "    EnableSsl : ${7:Boolean(O)}",
            "    Environment : [ ${8:aws-opsworks-app.environmentvariable(O)} ]",
            "    Name : ${9:String(R)}",
            "    Shortname : ${10:String(O)}",
            "    SslConfiguration: ${11:aws-opsworks-app.sslconfiguration(O)}",
            "    StackId : ${12:String(R)}",
            "    Type : ${13:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route":{
        "prefix":"aws-appmesh-route",
        "body":[
            "${1:myAWSAppMeshRoute}:",
            "  Type: AWS::AppMesh::Route",
            "  Properties:",
            "    MeshName : ${2:String(R)}",
            "    VirtualRouterName : ${3:String(R)}",
            "    RouteName : ${4:String(R)}",
            "    Spec: ${5:aws-appmesh-route.routespec(R)}",
            "    Tags : [ ${6:aws-appmesh-route.tagref(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-eventsourcemapping":{
        "prefix":"aws-lambda-eventsourcemapping",
        "body":[
            "${1:myAWSLambdaEventSourceMapping}:",
            "  Type: AWS::Lambda::EventSourceMapping",
            "  Properties:",
            "    BatchSize : ${2:Integer(O)}",
            "    Enabled : ${3:Boolean(O)}",
            "    EventSourceArn : ${4:String(R)}",
            "    FunctionName : ${5:String(R)}",
            "    StartingPosition : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-certificatemanager-certificate":{
        "prefix":"aws-certificatemanager-certificate",
        "body":[
            "${1:myAWSCertificateManagerCertificate}:",
            "  Type: AWS::CertificateManager::Certificate",
            "  Properties:",
            "    DomainName : ${2:String(R)}",
            "    DomainValidationOptions : [ ${3:aws-certificatemanager-certificate.domainvalidationoption(O)} ]",
            "    SubjectAlternativeNames : [ ${4:String(O)} ]",
            "    Tags : [ ${5:aws-certificatemanager-certificate.tag(O)} ]",
            "    ValidationMethod : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-subscriptiondefinitionversion":{
        "prefix":"aws-greengrass-subscriptiondefinitionversion",
        "body":[
            "${1:myAWSGreengrassSubscriptionDefinitionVersion}:",
            "  Type: AWS::Greengrass::SubscriptionDefinitionVersion",
            "  Properties:",
            "    SubscriptionDefinitionId : ${2:String(R)}",
            "    Subscriptions : [ ${3:aws-greengrass-subscriptiondefinitionversion.subscription(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-coredefinitionversion":{
        "prefix":"aws-greengrass-coredefinitionversion",
        "body":[
            "${1:myAWSGreengrassCoreDefinitionVersion}:",
            "  Type: AWS::Greengrass::CoreDefinitionVersion",
            "  Properties:",
            "    Cores : [ ${2:aws-greengrass-coredefinitionversion.core(R)} ]",
            "    CoreDefinitionId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-authorizer":{
        "prefix":"aws-apigateway-authorizer",
        "body":[
            "${1:myAWSApiGatewayAuthorizer}:",
            "  Type: AWS::ApiGateway::Authorizer",
            "  Properties:",
            "    AuthType : ${2:String(O)}",
            "    AuthorizerCredentials : ${3:String(O)}",
            "    AuthorizerResultTtlInSeconds : ${4:Integer(O)}",
            "    AuthorizerUri : ${5:String(O)}",
            "    IdentitySource : ${6:String(O)}",
            "    IdentityValidationExpression : ${7:String(O)}",
            "    Name : ${8:String(O)}",
            "    ProviderARNs : [ ${9:String(O)} ]",
            "    RestApiId : ${10:String(R)}",
            "    Type : ${11:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-inspector-resourcegroup":{
        "prefix":"aws-inspector-resourcegroup",
        "body":[
            "${1:myAWSInspectorResourceGroup}:",
            "  Type: AWS::Inspector::ResourceGroup",
            "  Properties:",
            "    ResourceGroupTags : [ ${2:aws-inspector-resourcegroup.tag(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot1click-project":{
        "prefix":"aws-iot1click-project",
        "body":[
            "${1:myAWSIoT1ClickProject}:",
            "  Type: AWS::IoT1Click::Project",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    PlacementTemplate: ${3:aws-iot1click-project.placementtemplate(R)}",
            "    ProjectName : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-eip":{
        "prefix":"aws-ec2-eip",
        "body":[
            "${1:myAWSEC2EIP}:",
            "  Type: AWS::EC2::EIP",
            "  Properties:",
            "    Domain : ${2:String(O)}",
            "    InstanceId : ${3:String(O)}",
            "    PublicIpv4Pool : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset":{
        "prefix":"aws-iotanalytics-dataset",
        "body":[
            "${1:myAWSIoTAnalyticsDataset}:",
            "  Type: AWS::IoTAnalytics::Dataset",
            "  Properties:",
            "    Actions : [ ${2:aws-iotanalytics-dataset.action(R)} ]",
            "    DatasetName : ${3:String(O)}",
            "    Triggers : [ ${4:aws-iotanalytics-dataset.trigger(O)} ]",
            "    RetentionPeriod: ${5:aws-iotanalytics-dataset.retentionperiod(O)}",
            "    Tags : [ ${6:aws-iotanalytics-dataset.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-domainname":{
        "prefix":"aws-apigateway-domainname",
        "body":[
            "${1:myAWSApiGatewayDomainName}:",
            "  Type: AWS::ApiGateway::DomainName",
            "  Properties:",
            "    CertificateArn : ${2:String(O)}",
            "    DomainName : ${3:String(R)}",
            "    EndpointConfiguration: ${4:aws-apigateway-domainname.endpointconfiguration(O)}",
            "    RegionalCertificateArn : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition":{
        "prefix":"aws-batch-jobdefinition",
        "body":[
            "${1:myAWSBatchJobDefinition}:",
            "  Type: AWS::Batch::JobDefinition",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Parameters : ${3:Json(O)}",
            "    NodeProperties: ${4:aws-batch-jobdefinition.nodeproperties(O)}",
            "    Timeout: ${5:aws-batch-jobdefinition.timeout(O)}",
            "    ContainerProperties: ${6:aws-batch-jobdefinition.containerproperties(O)}",
            "    JobDefinitionName : ${7:String(O)}",
            "    RetryStrategy: ${8:aws-batch-jobdefinition.retrystrategy(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-docdb-dbsubnetgroup":{
        "prefix":"aws-docdb-dbsubnetgroup",
        "body":[
            "${1:myAWSDocDBDBSubnetGroup}:",
            "  Type: AWS::DocDB::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupName : ${2:String(O)}",
            "    DBSubnetGroupDescription : ${3:String(R)}",
            "    SubnetIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-docdb-dbsubnetgroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-portfolioprincipalassociation":{
        "prefix":"aws-servicecatalog-portfolioprincipalassociation",
        "body":[
            "${1:myAWSServiceCatalogPortfolioPrincipalAssociation}:",
            "  Type: AWS::ServiceCatalog::PortfolioPrincipalAssociation",
            "  Properties:",
            "    PrincipalARN : ${2:String(R)}",
            "    AcceptLanguage : ${3:String(O)}",
            "    PortfolioId : ${4:String(R)}",
            "    PrincipalType : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-fleet":{
        "prefix":"aws-gamelift-fleet",
        "body":[
            "${1:myAWSGameLiftFleet}:",
            "  Type: AWS::GameLift::Fleet",
            "  Properties:",
            "    BuildId : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    DesiredEC2Instances : ${4:Integer(R)}",
            "    EC2InboundPermissions : [ ${5:aws-gamelift-fleet.ippermission(O)} ]",
            "    EC2InstanceType : ${6:String(R)}",
            "    LogPaths : [ ${7:String(O)} ]",
            "    MaxSize : ${8:Integer(O)}",
            "    MinSize : ${9:Integer(O)}",
            "    Name : ${10:String(R)}",
            "    ServerLaunchParameters : ${11:String(O)}",
            "    ServerLaunchPath : ${12:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcendpointconnectionnotification":{
        "prefix":"aws-ec2-vpcendpointconnectionnotification",
        "body":[
            "${1:myAWSEC2VPCEndpointConnectionNotification}:",
            "  Type: AWS::EC2::VPCEndpointConnectionNotification",
            "  Properties:",
            "    ConnectionEvents : [ ${2:String(R)} ]",
            "    VPCEndpointId : ${3:String(O)}",
            "    ServiceId : ${4:String(O)}",
            "    ConnectionNotificationArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-securitygroupingress":{
        "prefix":"aws-ec2-securitygroupingress",
        "body":[
            "${1:myAWSEC2SecurityGroupIngress}:",
            "  Type: AWS::EC2::SecurityGroupIngress",
            "  Properties:",
            "    CidrIp : ${2:String(O)}",
            "    CidrIpv6 : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    FromPort : ${5:Integer(O)}",
            "    GroupId : ${6:String(O)}",
            "    GroupName : ${7:String(O)}",
            "    IpProtocol : ${8:String(R)}",
            "    SourcePrefixListId : ${9:String(O)}",
            "    SourceSecurityGroupId : ${10:String(O)}",
            "    SourceSecurityGroupName : ${11:String(O)}",
            "    SourceSecurityGroupOwnerId : ${12:String(O)}",
            "    ToPort : ${13:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-layerversion":{
        "prefix":"aws-lambda-layerversion",
        "body":[
            "${1:myAWSLambdaLayerVersion}:",
            "  Type: AWS::Lambda::LayerVersion",
            "  Properties:",
            "    CompatibleRuntimes : [ ${2:String(O)} ]",
            "    LicenseInfo : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    LayerName : ${5:String(O)}",
            "    Content: ${6:aws-lambda-layerversion.content(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-documentationpart":{
        "prefix":"aws-apigateway-documentationpart",
        "body":[
            "${1:myAWSApiGatewayDocumentationPart}:",
            "  Type: AWS::ApiGateway::DocumentationPart",
            "  Properties:",
            "    Location: ${2:aws-apigateway-documentationpart.location(R)}",
            "    Properties : ${3:String(R)}",
            "    RestApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbcluster":{
        "prefix":"aws-rds-dbcluster",
        "body":[
            "${1:myAWSRDSDBCluster}:",
            "  Type: AWS::RDS::DBCluster",
            "  Properties:",
            "    AvailabilityZones : [ ${2:String(O)} ]",
            "    BacktrackWindow : ${3:Long(O)}",
            "    BackupRetentionPeriod : ${4:Integer(O)}",
            "    DBClusterIdentifier : ${5:String(O)}",
            "    DBClusterParameterGroupName : ${6:String(O)}",
            "    DBSubnetGroupName : ${7:String(O)}",
            "    DatabaseName : ${8:String(O)}",
            "    DeletionProtection : ${9:Boolean(O)}",
            "    EnableCloudwatchLogsExports : [ ${10:String(O)} ]",
            "    EnableIAMDatabaseAuthentication : ${11:Boolean(O)}",
            "    Engine : ${12:String(R)}",
            "    EngineMode : ${13:String(O)}",
            "    EngineVersion : ${14:String(O)}",
            "    KmsKeyId : ${15:String(O)}",
            "    MasterUserPassword : ${16:String(O)}",
            "    MasterUsername : ${17:String(O)}",
            "    Port : ${18:Integer(O)}",
            "    PreferredBackupWindow : ${19:String(O)}",
            "    PreferredMaintenanceWindow : ${20:String(O)}",
            "    ReplicationSourceIdentifier : ${21:String(O)}",
            "    ScalingConfiguration: ${22:aws-rds-dbcluster.scalingconfiguration(O)}",
            "    SnapshotIdentifier : ${23:String(O)}",
            "    SourceRegion : ${24:String(O)}",
            "    StorageEncrypted : ${25:Boolean(O)}",
            "    Tags : [ ${26:aws-rds-dbcluster.tag(O)} ]",
            "    VpcSecurityGroupIds : [ ${27:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "alexa-ask-skill":{
        "prefix":"alexa-ask-skill",
        "body":[
            "${1:myAlexaASKSkill}:",
            "  Type: Alexa::ASK::Skill",
            "  Properties:",
            "    AuthenticationConfiguration: ${2:alexa-ask-skill.authenticationconfiguration(R)}",
            "    VendorId : ${3:String(R)}",
            "    SkillPackage: ${4:alexa-ask-skill.skillpackage(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service":{
        "prefix":"aws-ecs-service",
        "body":[
            "${1:myAWSECSService}:",
            "  Type: AWS::ECS::Service",
            "  Properties:",
            "    Cluster : ${2:String(O)}",
            "    DeploymentConfiguration: ${3:aws-ecs-service.deploymentconfiguration(O)}",
            "    DesiredCount : ${4:Integer(O)}",
            "    HealthCheckGracePeriodSeconds : ${5:Integer(O)}",
            "    LaunchType : ${6:String(O)}",
            "    LoadBalancers : [ ${7:aws-ecs-service.loadbalancer(O)} ]",
            "    NetworkConfiguration: ${8:aws-ecs-service.networkconfiguration(O)}",
            "    PlacementConstraints : [ ${9:aws-ecs-service.placementconstraint(O)} ]",
            "    PlacementStrategies : [ ${10:aws-ecs-service.placementstrategy(O)} ]",
            "    PlatformVersion : ${11:String(O)}",
            "    Role : ${12:String(O)}",
            "    SchedulingStrategy : ${13:String(O)}",
            "    ServiceName : ${14:String(O)}",
            "    ServiceRegistries : [ ${15:aws-ecs-service.serviceregistry(O)} ]",
            "    TaskDefinition : ${16:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-usertogroupaddition":{
        "prefix":"aws-iam-usertogroupaddition",
        "body":[
            "${1:myAWSIAMUserToGroupAddition}:",
            "  Type: AWS::IAM::UserToGroupAddition",
            "  Properties:",
            "    GroupName : ${2:String(R)}",
            "    Users : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbsubnetgroup":{
        "prefix":"aws-rds-dbsubnetgroup",
        "body":[
            "${1:myAWSRDSDBSubnetGroup}:",
            "  Type: AWS::RDS::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupDescription : ${2:String(R)}",
            "    DBSubnetGroupName : ${3:String(O)}",
            "    SubnetIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-rds-dbsubnetgroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworkscm-server":{
        "prefix":"aws-opsworkscm-server",
        "body":[
            "${1:myAWSOpsWorksCMServer}:",
            "  Type: AWS::OpsWorksCM::Server",
            "  Properties:",
            "    KeyPair : ${2:String(O)}",
            "    EngineVersion : ${3:String(O)}",
            "    ServiceRoleArn : ${4:String(R)}",
            "    DisableAutomatedBackup : ${5:Boolean(O)}",
            "    BackupId : ${6:String(O)}",
            "    EngineModel : ${7:String(O)}",
            "    PreferredMaintenanceWindow : ${8:String(O)}",
            "    AssociatePublicIpAddress : ${9:Boolean(O)}",
            "    InstanceProfileArn : ${10:String(R)}",
            "    PreferredBackupWindow : ${11:String(O)}",
            "    SecurityGroupIds : [ ${12:String(O)} ]",
            "    SubnetIds : [ ${13:String(O)} ]",
            "    ServerName : ${14:String(O)}",
            "    EngineAttributes : [ ${15:aws-opsworkscm-server.engineattribute(O)} ]",
            "    BackupRetentionCount : ${16:Integer(O)}",
            "    InstanceType : ${17:String(R)}",
            "    Engine : ${18:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer":{
        "prefix":"aws-elasticloadbalancing-loadbalancer",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer",
            "  Properties:",
            "    AccessLoggingPolicy: ${2:aws-elasticloadbalancing-loadbalancer.accessloggingpolicy(O)}",
            "    AppCookieStickinessPolicy : [ ${3:aws-elasticloadbalancing-loadbalancer.appcookiestickinesspolicy(O)} ]",
            "    AvailabilityZones : [ ${4:String(O)} ]",
            "    ConnectionDrainingPolicy: ${5:aws-elasticloadbalancing-loadbalancer.connectiondrainingpolicy(O)}",
            "    ConnectionSettings: ${6:aws-elasticloadbalancing-loadbalancer.connectionsettings(O)}",
            "    CrossZone : ${7:Boolean(O)}",
            "    HealthCheck: ${8:aws-elasticloadbalancing-loadbalancer.healthcheck(O)}",
            "    Instances : [ ${9:String(O)} ]",
            "    LBCookieStickinessPolicy : [ ${10:aws-elasticloadbalancing-loadbalancer.lbcookiestickinesspolicy(O)} ]",
            "    Listeners : [ ${11:aws-elasticloadbalancing-loadbalancer.listeners(R)} ]",
            "    LoadBalancerName : ${12:String(O)}",
            "    Policies : [ ${13:aws-elasticloadbalancing-loadbalancer.policies(O)} ]",
            "    Scheme : ${14:String(O)}",
            "    SecurityGroups : [ ${15:String(O)} ]",
            "    Subnets : [ ${16:String(O)} ]",
            "    Tags : [ ${17:aws-elasticloadbalancing-loadbalancer.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobqueue":{
        "prefix":"aws-batch-jobqueue",
        "body":[
            "${1:myAWSBatchJobQueue}:",
            "  Type: AWS::Batch::JobQueue",
            "  Properties:",
            "    ComputeEnvironmentOrder : [ ${2:aws-batch-jobqueue.computeenvironmentorder(R)} ]",
            "    Priority : ${3:Integer(R)}",
            "    State : ${4:String(O)}",
            "    JobQueueName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-thing":{
        "prefix":"aws-iot-thing",
        "body":[
            "${1:myAWSIoTThing}:",
            "  Type: AWS::IoT::Thing",
            "  Properties:",
            "    AttributePayload: ${2:aws-iot-thing.attributepayload(O)}",
            "    ThingName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer":{
        "prefix":"aws-opsworks-layer",
        "body":[
            "${1:myAWSOpsWorksLayer}:",
            "  Type: AWS::OpsWorks::Layer",
            "  Properties:",
            "    Attributes : [ ${2:String(O)} ]",
            "    AutoAssignElasticIps : ${3:Boolean(R)}",
            "    AutoAssignPublicIps : ${4:Boolean(R)}",
            "    CustomInstanceProfileArn : ${5:String(O)}",
            "    CustomJson : ${6:Json(O)}",
            "    CustomRecipes: ${7:aws-opsworks-layer.recipes(O)}",
            "    CustomSecurityGroupIds : [ ${8:String(O)} ]",
            "    EnableAutoHealing : ${9:Boolean(R)}",
            "    InstallUpdatesOnBoot : ${10:Boolean(O)}",
            "    LifecycleEventConfiguration: ${11:aws-opsworks-layer.lifecycleeventconfiguration(O)}",
            "    LoadBasedAutoScaling: ${12:aws-opsworks-layer.loadbasedautoscaling(O)}",
            "    Name : ${13:String(R)}",
            "    Packages : [ ${14:String(O)} ]",
            "    Shortname : ${15:String(R)}",
            "    StackId : ${16:String(R)}",
            "    Tags : [ ${17:aws-opsworks-layer.tag(O)} ]",
            "    Type : ${18:String(R)}",
            "    UseEbsOptimizedInstances : ${19:Boolean(O)}",
            "    VolumeConfigurations : [ ${20:aws-opsworks-layer.volumeconfiguration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-certificate":{
        "prefix":"aws-dms-certificate",
        "body":[
            "${1:myAWSDMSCertificate}:",
            "  Type: AWS::DMS::Certificate",
            "  Properties:",
            "    CertificateIdentifier : ${2:String(O)}",
            "    CertificatePem : ${3:String(O)}",
            "    CertificateWallet : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-apikey":{
        "prefix":"aws-apigateway-apikey",
        "body":[
            "${1:myAWSApiGatewayApiKey}:",
            "  Type: AWS::ApiGateway::ApiKey",
            "  Properties:",
            "    CustomerId : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    Enabled : ${4:Boolean(O)}",
            "    GenerateDistinctId : ${5:Boolean(O)}",
            "    Name : ${6:String(O)}",
            "    StageKeys : [ ${7:aws-apigateway-apikey.stagekey(O)} ]",
            "    Value : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table":{
        "prefix":"aws-glue-table",
        "body":[
            "${1:myAWSGlueTable}:",
            "  Type: AWS::Glue::Table",
            "  Properties:",
            "    TableInput: ${2:aws-glue-table.tableinput(R)}",
            "    DatabaseName : ${3:String(R)}",
            "    CatalogId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-subnetroutetableassociation":{
        "prefix":"aws-ec2-subnetroutetableassociation",
        "body":[
            "${1:myAWSEC2SubnetRouteTableAssociation}:",
            "  Type: AWS::EC2::SubnetRouteTableAssociation",
            "  Properties:",
            "    RouteTableId : ${2:String(R)}",
            "    SubnetId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-securitygroup":{
        "prefix":"aws-elasticache-securitygroup",
        "body":[
            "${1:myAWSElastiCacheSecurityGroup}:",
            "  Type: AWS::ElastiCache::SecurityGroup",
            "  Properties:",
            "    Description : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-instanceprofile":{
        "prefix":"aws-iam-instanceprofile",
        "body":[
            "${1:myAWSIAMInstanceProfile}:",
            "  Type: AWS::IAM::InstanceProfile",
            "  Properties:",
            "    InstanceProfileName : ${2:String(O)}",
            "    Path : ${3:String(O)}",
            "    Roles : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-policy":{
        "prefix":"aws-iot-policy",
        "body":[
            "${1:myAWSIoTPolicy}:",
            "  Type: AWS::IoT::Policy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    PolicyName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-stage":{
        "prefix":"aws-apigatewayv2-stage",
        "body":[
            "${1:myAWSApiGatewayV2Stage}:",
            "  Type: AWS::ApiGatewayV2::Stage",
            "  Properties:",
            "    ClientCertificateId : ${2:String(O)}",
            "    DeploymentId : ${3:String(R)}",
            "    Description : ${4:String(O)}",
            "    AccessLogSettings: ${5:aws-apigatewayv2-stage.accesslogsettings(O)}",
            "    RouteSettings : ${6:Json(O)}",
            "    StageName : ${7:String(R)}",
            "    StageVariables : ${8:Json(O)}",
            "    ApiId : ${9:String(R)}",
            "    DefaultRouteSettings: ${10:aws-apigatewayv2-stage.routesettings(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-computeenvironment":{
        "prefix":"aws-batch-computeenvironment",
        "body":[
            "${1:myAWSBatchComputeEnvironment}:",
            "  Type: AWS::Batch::ComputeEnvironment",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    ServiceRole : ${3:String(R)}",
            "    ComputeEnvironmentName : ${4:String(O)}",
            "    ComputeResources: ${5:aws-batch-computeenvironment.computeresources(O)}",
            "    State : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup":{
        "prefix":"aws-codedeploy-deploymentgroup",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup",
            "  Properties:",
            "    AlarmConfiguration: ${2:aws-codedeploy-deploymentgroup.alarmconfiguration(O)}",
            "    ApplicationName : ${3:String(R)}",
            "    AutoRollbackConfiguration: ${4:aws-codedeploy-deploymentgroup.autorollbackconfiguration(O)}",
            "    AutoScalingGroups : [ ${5:String(O)} ]",
            "    Deployment: ${6:aws-codedeploy-deploymentgroup.deployment(O)}",
            "    DeploymentConfigName : ${7:String(O)}",
            "    DeploymentGroupName : ${8:String(O)}",
            "    DeploymentStyle: ${9:aws-codedeploy-deploymentgroup.deploymentstyle(O)}",
            "    Ec2TagFilters : [ ${10:aws-codedeploy-deploymentgroup.ec2tagfilter(O)} ]",
            "    Ec2TagSet: ${11:aws-codedeploy-deploymentgroup.ec2tagset(O)}",
            "    LoadBalancerInfo: ${12:aws-codedeploy-deploymentgroup.loadbalancerinfo(O)}",
            "    OnPremisesInstanceTagFilters : [ ${13:aws-codedeploy-deploymentgroup.tagfilter(O)} ]",
            "    OnPremisesTagSet: ${14:aws-codedeploy-deploymentgroup.onpremisestagset(O)}",
            "    ServiceRoleArn : ${15:String(R)}",
            "    TriggerConfigurations : [ ${16:aws-codedeploy-deploymentgroup.triggerconfig(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-model":{
        "prefix":"aws-apigateway-model",
        "body":[
            "${1:myAWSApiGatewayModel}:",
            "  Type: AWS::ApiGateway::Model",
            "  Properties:",
            "    ContentType : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    Name : ${4:String(O)}",
            "    RestApiId : ${5:String(R)}",
            "    Schema : ${6:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-route":{
        "prefix":"aws-ec2-route",
        "body":[
            "${1:myAWSEC2Route}:",
            "  Type: AWS::EC2::Route",
            "  Properties:",
            "    DestinationCidrBlock : ${2:String(O)}",
            "    DestinationIpv6CidrBlock : ${3:String(O)}",
            "    EgressOnlyInternetGatewayId : ${4:String(O)}",
            "    GatewayId : ${5:String(O)}",
            "    InstanceId : ${6:String(O)}",
            "    NatGatewayId : ${7:String(O)}",
            "    NetworkInterfaceId : ${8:String(O)}",
            "    RouteTableId : ${9:String(R)}",
            "    VpcPeeringConnectionId : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-directoryconfig":{
        "prefix":"aws-appstream-directoryconfig",
        "body":[
            "${1:myAWSAppStreamDirectoryConfig}:",
            "  Type: AWS::AppStream::DirectoryConfig",
            "  Properties:",
            "    OrganizationalUnitDistinguishedNames : [ ${2:String(R)} ]",
            "    ServiceAccountCredentials: ${3:aws-appstream-directoryconfig.serviceaccountcredentials(R)}",
            "    DirectoryName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-threatintelset":{
        "prefix":"aws-guardduty-threatintelset",
        "body":[
            "${1:myAWSGuardDutyThreatIntelSet}:",
            "  Type: AWS::GuardDuty::ThreatIntelSet",
            "  Properties:",
            "    Format : ${2:String(R)}",
            "    Activate : ${3:Boolean(R)}",
            "    DetectorId : ${4:String(R)}",
            "    Name : ${5:String(O)}",
            "    Location : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-metricfilter":{
        "prefix":"aws-logs-metricfilter",
        "body":[
            "${1:myAWSLogsMetricFilter}:",
            "  Type: AWS::Logs::MetricFilter",
            "  Properties:",
            "    FilterPattern : ${2:String(R)}",
            "    LogGroupName : ${3:String(R)}",
            "    MetricTransformations : [ ${4:aws-logs-metricfilter.metrictransformation(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-resource":{
        "prefix":"aws-apigateway-resource",
        "body":[
            "${1:myAWSApiGatewayResource}:",
            "  Type: AWS::ApiGateway::Resource",
            "  Properties:",
            "    ParentId : ${2:String(R)}",
            "    PathPart : ${3:String(R)}",
            "    RestApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot1click-device":{
        "prefix":"aws-iot1click-device",
        "body":[
            "${1:myAWSIoT1ClickDevice}:",
            "  Type: AWS::IoT1Click::Device",
            "  Properties:",
            "    DeviceId : ${2:String(R)}",
            "    Enabled : ${3:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-connection":{
        "prefix":"aws-glue-connection",
        "body":[
            "${1:myAWSGlueConnection}:",
            "  Type: AWS::Glue::Connection",
            "  Properties:",
            "    ConnectionInput: ${2:aws-glue-connection.connectioninput(R)}",
            "    CatalogId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptfilter":{
        "prefix":"aws-ses-receiptfilter",
        "body":[
            "${1:myAWSSESReceiptFilter}:",
            "  Type: AWS::SES::ReceiptFilter",
            "  Properties:",
            "    Filter: ${2:aws-ses-receiptfilter.filter(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-flowlog":{
        "prefix":"aws-ec2-flowlog",
        "body":[
            "${1:myAWSEC2FlowLog}:",
            "  Type: AWS::EC2::FlowLog",
            "  Properties:",
            "    DeliverLogsPermissionArn : ${2:String(O)}",
            "    LogDestination : ${3:String(O)}",
            "    LogDestinationType : ${4:String(O)}",
            "    LogGroupName : ${5:String(O)}",
            "    ResourceId : ${6:String(R)}",
            "    ResourceType : ${7:String(R)}",
            "    TrafficType : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-rotationschedule":{
        "prefix":"aws-secretsmanager-rotationschedule",
        "body":[
            "${1:myAWSSecretsManagerRotationSchedule}:",
            "  Type: AWS::SecretsManager::RotationSchedule",
            "  Properties:",
            "    SecretId : ${2:String(R)}",
            "    RotationLambdaARN : ${3:String(O)}",
            "    RotationRules: ${4:aws-secretsmanager-rotationschedule.rotationrules(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypool":{
        "prefix":"aws-cognito-identitypool",
        "body":[
            "${1:myAWSCognitoIdentityPool}:",
            "  Type: AWS::Cognito::IdentityPool",
            "  Properties:",
            "    PushSync: ${2:aws-cognito-identitypool.pushsync(O)}",
            "    CognitoIdentityProviders : [ ${3:aws-cognito-identitypool.cognitoidentityprovider(O)} ]",
            "    CognitoEvents : ${4:Json(O)}",
            "    DeveloperProviderName : ${5:String(O)}",
            "    CognitoStreams: ${6:aws-cognito-identitypool.cognitostreams(O)}",
            "    IdentityPoolName : ${7:String(O)}",
            "    AllowUnauthenticatedIdentities : ${8:Boolean(R)}",
            "    SupportedLoginProviders : ${9:Json(O)}",
            "    SamlProviderARNs : [ ${10:String(O)} ]",
            "    OpenIdConnectProviderARNs : [ ${11:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-loadbalancer":{
        "prefix":"aws-elasticloadbalancingv2-loadbalancer",
        "body":[
            "${1:myAWSElasticLoadBalancingV2LoadBalancer}:",
            "  Type: AWS::ElasticLoadBalancingV2::LoadBalancer",
            "  Properties:",
            "    IpAddressType : ${2:String(O)}",
            "    LoadBalancerAttributes : [ ${3:aws-elasticloadbalancingv2-loadbalancer.loadbalancerattribute(O)} ]",
            "    Name : ${4:String(O)}",
            "    Scheme : ${5:String(O)}",
            "    SecurityGroups : [ ${6:String(O)} ]",
            "    SubnetMappings : [ ${7:aws-elasticloadbalancingv2-loadbalancer.subnetmapping(O)} ]",
            "    Subnets : [ ${8:String(O)} ]",
            "    Tags : [ ${9:aws-elasticloadbalancingv2-loadbalancer.tag(O)} ]",
            "    Type : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-accesskey":{
        "prefix":"aws-iam-accesskey",
        "body":[
            "${1:myAWSIAMAccessKey}:",
            "  Type: AWS::IAM::AccessKey",
            "  Properties:",
            "    Serial : ${2:Integer(O)}",
            "    Status : ${3:String(O)}",
            "    UserName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-application":{
        "prefix":"aws-elasticbeanstalk-application",
        "body":[
            "${1:myAWSElasticBeanstalkApplication}:",
            "  Type: AWS::ElasticBeanstalk::Application",
            "  Properties:",
            "    ApplicationName : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    ResourceLifecycleConfig: ${4:aws-elasticbeanstalk-application.applicationresourcelifecycleconfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule":{
        "prefix":"aws-ses-receiptrule",
        "body":[
            "${1:myAWSSESReceiptRule}:",
            "  Type: AWS::SES::ReceiptRule",
            "  Properties:",
            "    After : ${2:String(O)}",
            "    Rule: ${3:aws-ses-receiptrule.rule(R)}",
            "    RuleSetName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-configurationassociation":{
        "prefix":"aws-amazonmq-configurationassociation",
        "body":[
            "${1:myAWSAmazonMQConfigurationAssociation}:",
            "  Type: AWS::AmazonMQ::ConfigurationAssociation",
            "  Properties:",
            "    Broker : ${2:String(R)}",
            "    Configuration: ${3:aws-amazonmq-configurationassociation.configurationid(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-replicationsubnetgroup":{
        "prefix":"aws-dms-replicationsubnetgroup",
        "body":[
            "${1:myAWSDMSReplicationSubnetGroup}:",
            "  Type: AWS::DMS::ReplicationSubnetGroup",
            "  Properties:",
            "    ReplicationSubnetGroupDescription : ${2:String(R)}",
            "    ReplicationSubnetGroupIdentifier : ${3:String(O)}",
            "    SubnetIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-dms-replicationsubnetgroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationseteventdestination":{
        "prefix":"aws-ses-configurationseteventdestination",
        "body":[
            "${1:myAWSSESConfigurationSetEventDestination}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination",
            "  Properties:",
            "    ConfigurationSetName : ${2:String(R)}",
            "    EventDestination: ${3:aws-ses-configurationseteventdestination.eventdestination(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-subnetgroup":{
        "prefix":"aws-elasticache-subnetgroup",
        "body":[
            "${1:myAWSElastiCacheSubnetGroup}:",
            "  Type: AWS::ElastiCache::SubnetGroup",
            "  Properties:",
            "    CacheSubnetGroupName : ${2:String(O)}",
            "    Description : ${3:String(R)}",
            "    SubnetIds : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project":{
        "prefix":"aws-codebuild-project",
        "body":[
            "${1:myAWSCodeBuildProject}:",
            "  Type: AWS::CodeBuild::Project",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    VpcConfig: ${3:aws-codebuild-project.vpcconfig(O)}",
            "    SecondarySources : [ ${4:aws-codebuild-project.source(O)} ]",
            "    EncryptionKey : ${5:String(O)}",
            "    Triggers: ${6:aws-codebuild-project.projecttriggers(O)}",
            "    SecondaryArtifacts : [ ${7:aws-codebuild-project.artifacts(O)} ]",
            "    Source: ${8:aws-codebuild-project.source(R)}",
            "    Name : ${9:String(O)}",
            "    Artifacts: ${10:aws-codebuild-project.artifacts(R)}",
            "    BadgeEnabled : ${11:Boolean(O)}",
            "    LogsConfig: ${12:aws-codebuild-project.logsconfig(O)}",
            "    ServiceRole : ${13:String(R)}",
            "    QueuedTimeoutInMinutes : ${14:Integer(O)}",
            "    Environment: ${15:aws-codebuild-project.environment(R)}",
            "    Tags : [ ${16:aws-codebuild-project.tag(O)} ]",
            "    TimeoutInMinutes : ${17:Integer(O)}",
            "    Cache: ${18:aws-codebuild-project.projectcache(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgatewayroutetablepropagation":{
        "prefix":"aws-ec2-transitgatewayroutetablepropagation",
        "body":[
            "${1:myAWSEC2TransitGatewayRouteTablePropagation}:",
            "  Type: AWS::EC2::TransitGatewayRouteTablePropagation",
            "  Properties:",
            "    TransitGatewayRouteTableId : ${2:String(R)}",
            "    TransitGatewayAttachmentId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget":{
        "prefix":"aws-budgets-budget",
        "body":[
            "${1:myAWSBudgetsBudget}:",
            "  Type: AWS::Budgets::Budget",
            "  Properties:",
            "    NotificationsWithSubscribers : [ ${2:aws-budgets-budget.notificationwithsubscribers(O)} ]",
            "    Budget: ${3:aws-budgets-budget.budgetdata(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sns-topicpolicy":{
        "prefix":"aws-sns-topicpolicy",
        "body":[
            "${1:myAWSSNSTopicPolicy}:",
            "  Type: AWS::SNS::TopicPolicy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    Topics : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-alias":{
        "prefix":"aws-lambda-alias",
        "body":[
            "${1:myAWSLambdaAlias}:",
            "  Type: AWS::Lambda::Alias",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    FunctionName : ${3:String(R)}",
            "    FunctionVersion : ${4:String(R)}",
            "    Name : ${5:String(R)}",
            "    RoutingConfig: ${6:aws-lambda-alias.aliasroutingconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-bytematchset":{
        "prefix":"aws-wafregional-bytematchset",
        "body":[
            "${1:myAWSWAFRegionalByteMatchSet}:",
            "  Type: AWS::WAFRegional::ByteMatchSet",
            "  Properties:",
            "    ByteMatchTuples : [ ${2:aws-wafregional-bytematchset.bytematchtuple(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener":{
        "prefix":"aws-elasticloadbalancingv2-listener",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener",
            "  Properties:",
            "    Certificates : [ ${2:aws-elasticloadbalancingv2-listener.certificate(O)} ]",
            "    DefaultActions : [ ${3:aws-elasticloadbalancingv2-listener.action(R)} ]",
            "    LoadBalancerArn : ${4:String(R)}",
            "    Port : ${5:Integer(R)}",
            "    Protocol : ${6:String(R)}",
            "    SslPolicy : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-securitygroupegress":{
        "prefix":"aws-ec2-securitygroupegress",
        "body":[
            "${1:myAWSEC2SecurityGroupEgress}:",
            "  Type: AWS::EC2::SecurityGroupEgress",
            "  Properties:",
            "    CidrIp : ${2:String(O)}",
            "    CidrIpv6 : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    DestinationPrefixListId : ${5:String(O)}",
            "    DestinationSecurityGroupId : ${6:String(O)}",
            "    FromPort : ${7:Integer(O)}",
            "    GroupId : ${8:String(R)}",
            "    IpProtocol : ${9:String(R)}",
            "    ToPort : ${10:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkinterface":{
        "prefix":"aws-ec2-networkinterface",
        "body":[
            "${1:myAWSEC2NetworkInterface}:",
            "  Type: AWS::EC2::NetworkInterface",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    GroupSet : [ ${3:String(O)} ]",
            "    InterfaceType : ${4:String(O)}",
            "    Ipv6AddressCount : ${5:Integer(O)}",
            "    Ipv6Addresses: ${6:aws-ec2-networkinterface.instanceipv6address(O)}",
            "    PrivateIpAddress : ${7:String(O)}",
            "    PrivateIpAddresses : [ ${8:aws-ec2-networkinterface.privateipaddressspecification(O)} ]",
            "    SecondaryPrivateIpAddressCount : ${9:Integer(O)}",
            "    SourceDestCheck : ${10:Boolean(O)}",
            "    SubnetId : ${11:String(R)}",
            "    Tags : [ ${12:aws-ec2-networkinterface.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-deployment":{
        "prefix":"aws-apigatewayv2-deployment",
        "body":[
            "${1:myAWSApiGatewayV2Deployment}:",
            "  Type: AWS::ApiGatewayV2::Deployment",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    StageName : ${3:String(O)}",
            "    ApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dax-subnetgroup":{
        "prefix":"aws-dax-subnetgroup",
        "body":[
            "${1:myAWSDAXSubnetGroup}:",
            "  Type: AWS::DAX::SubnetGroup",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    SubnetGroupName : ${3:String(O)}",
            "    SubnetIds : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-fsx-filesystem":{
        "prefix":"aws-fsx-filesystem",
        "body":[
            "${1:myAWSFSxFileSystem}:",
            "  Type: AWS::FSx::FileSystem",
            "  Properties:",
            "    KmsKeyId : ${2:String(O)}",
            "    StorageCapacity : ${3:Integer(O)}",
            "    FileSystemType : ${4:String(O)}",
            "    LustreConfiguration: ${5:aws-fsx-filesystem.lustreconfiguration(O)}",
            "    BackupId : ${6:String(O)}",
            "    SubnetIds : [ ${7:String(O)} ]",
            "    SecurityGroupIds : [ ${8:String(O)} ]",
            "    Tags : [ ${9:aws-fsx-filesystem.tagentry(O)} ]",
            "    WindowsConfiguration: ${10:aws-fsx-filesystem.windowsconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-layerversionpermission":{
        "prefix":"aws-lambda-layerversionpermission",
        "body":[
            "${1:myAWSLambdaLayerVersionPermission}:",
            "  Type: AWS::Lambda::LayerVersionPermission",
            "  Properties:",
            "    Action : ${2:String(R)}",
            "    LayerVersionArn : ${3:String(R)}",
            "    OrganizationId : ${4:String(O)}",
            "    Principal : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-endpointconfig":{
        "prefix":"aws-sagemaker-endpointconfig",
        "body":[
            "${1:myAWSSageMakerEndpointConfig}:",
            "  Type: AWS::SageMaker::EndpointConfig",
            "  Properties:",
            "    ProductionVariants : [ ${2:aws-sagemaker-endpointconfig.productionvariant(R)} ]",
            "    KmsKeyId : ${3:String(O)}",
            "    EndpointConfigName : ${4:String(O)}",
            "    Tags : [ ${5:aws-sagemaker-endpointconfig.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack":{
        "prefix":"aws-opsworks-stack",
        "body":[
            "${1:myAWSOpsWorksStack}:",
            "  Type: AWS::OpsWorks::Stack",
            "  Properties:",
            "    AgentVersion : ${2:String(O)}",
            "    Attributes : [ ${3:String(O)} ]",
            "    ChefConfiguration: ${4:aws-opsworks-stack.chefconfiguration(O)}",
            "    CloneAppIds : [ ${5:String(O)} ]",
            "    ClonePermissions : ${6:Boolean(O)}",
            "    ConfigurationManager: ${7:aws-opsworks-stack.stackconfigurationmanager(O)}",
            "    CustomCookbooksSource: ${8:aws-opsworks-stack.source(O)}",
            "    CustomJson : ${9:Json(O)}",
            "    DefaultAvailabilityZone : ${10:String(O)}",
            "    DefaultInstanceProfileArn : ${11:String(R)}",
            "    DefaultOs : ${12:String(O)}",
            "    DefaultRootDeviceType : ${13:String(O)}",
            "    DefaultSshKeyName : ${14:String(O)}",
            "    DefaultSubnetId : ${15:String(O)}",
            "    EcsClusterArn : ${16:String(O)}",
            "    ElasticIps : [ ${17:aws-opsworks-stack.elasticip(O)} ]",
            "    HostnameTheme : ${18:String(O)}",
            "    Name : ${19:String(R)}",
            "    RdsDbInstances : [ ${20:aws-opsworks-stack.rdsdbinstance(O)} ]",
            "    ServiceRoleArn : ${21:String(R)}",
            "    SourceStackId : ${22:String(O)}",
            "    Tags : [ ${23:aws-opsworks-stack.tag(O)} ]",
            "    UseCustomCookbooks : ${24:Boolean(O)}",
            "    UseOpsworksSecurityGroups : ${25:Boolean(O)}",
            "    VpcId : ${26:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline":{
        "prefix":"aws-datapipeline-pipeline",
        "body":[
            "${1:myAWSDataPipelinePipeline}:",
            "  Type: AWS::DataPipeline::Pipeline",
            "  Properties:",
            "    Activate : ${2:Boolean(O)}",
            "    Description : ${3:String(O)}",
            "    Name : ${4:String(R)}",
            "    ParameterObjects : [ ${5:aws-datapipeline-pipeline.parameterobject(R)} ]",
            "    ParameterValues : [ ${6:aws-datapipeline-pipeline.parametervalue(O)} ]",
            "    PipelineObjects : [ ${7:aws-datapipeline-pipeline.pipelineobject(O)} ]",
            "    PipelineTags : [ ${8:aws-datapipeline-pipeline.pipelinetag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-devicedefinition":{
        "prefix":"aws-greengrass-devicedefinition",
        "body":[
            "${1:myAWSGreengrassDeviceDefinition}:",
            "  Type: AWS::Greengrass::DeviceDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-devicedefinition.devicedefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-stepfunctions-statemachine":{
        "prefix":"aws-stepfunctions-statemachine",
        "body":[
            "${1:myAWSStepFunctionsStateMachine}:",
            "  Type: AWS::StepFunctions::StateMachine",
            "  Properties:",
            "    DefinitionString : ${2:String(R)}",
            "    StateMachineName : ${3:String(O)}",
            "    RoleArn : ${4:String(R)}",
            "    Tags : [ ${5:aws-stepfunctions-statemachine.tagsentry(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentconfig":{
        "prefix":"aws-codedeploy-deploymentconfig",
        "body":[
            "${1:myAWSCodeDeployDeploymentConfig}:",
            "  Type: AWS::CodeDeploy::DeploymentConfig",
            "  Properties:",
            "    DeploymentConfigName : ${2:String(O)}",
            "    MinimumHealthyHosts: ${3:aws-codedeploy-deploymentconfig.minimumhealthyhosts(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-eventsubscription":{
        "prefix":"aws-dms-eventsubscription",
        "body":[
            "${1:myAWSDMSEventSubscription}:",
            "  Type: AWS::DMS::EventSubscription",
            "  Properties:",
            "    SourceType : ${2:String(O)}",
            "    EventCategories : [ ${3:String(O)} ]",
            "    Enabled : ${4:Boolean(O)}",
            "    SubscriptionName : ${5:String(O)}",
            "    SnsTopicArn : ${6:String(R)}",
            "    SourceIds : [ ${7:String(O)} ]",
            "    Tags : [ ${8:aws-dms-eventsubscription.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgatewayattachment":{
        "prefix":"aws-ec2-transitgatewayattachment",
        "body":[
            "${1:myAWSEC2TransitGatewayAttachment}:",
            "  Type: AWS::EC2::TransitGatewayAttachment",
            "  Properties:",
            "    TransitGatewayId : ${2:String(R)}",
            "    VpcId : ${3:String(R)}",
            "    SubnetIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-ec2-transitgatewayattachment.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53resolver-resolverrule":{
        "prefix":"aws-route53resolver-resolverrule",
        "body":[
            "${1:myAWSRoute53ResolverResolverRule}:",
            "  Type: AWS::Route53Resolver::ResolverRule",
            "  Properties:",
            "    ResolverEndpointId : ${2:String(O)}",
            "    DomainName : ${3:String(R)}",
            "    RuleType : ${4:String(R)}",
            "    TargetIps : [ ${5:aws-route53resolver-resolverrule.targetaddress(O)} ]",
            "    Tags : [ ${6:aws-route53resolver-resolverrule.tag(O)} ]",
            "    Name : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dax-parametergroup":{
        "prefix":"aws-dax-parametergroup",
        "body":[
            "${1:myAWSDAXParameterGroup}:",
            "  Type: AWS::DAX::ParameterGroup",
            "  Properties:",
            "    ParameterNameValues : ${2:Json(O)}",
            "    Description : ${3:String(O)}",
            "    ParameterGroupName : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-subnetnetworkaclassociation":{
        "prefix":"aws-ec2-subnetnetworkaclassociation",
        "body":[
            "${1:myAWSEC2SubnetNetworkAclAssociation}:",
            "  Type: AWS::EC2::SubnetNetworkAclAssociation",
            "  Properties:",
            "    NetworkAclId : ${2:String(R)}",
            "    SubnetId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configurationaggregator":{
        "prefix":"aws-config-configurationaggregator",
        "body":[
            "${1:myAWSConfigConfigurationAggregator}:",
            "  Type: AWS::Config::ConfigurationAggregator",
            "  Properties:",
            "    AccountAggregationSources : [ ${2:aws-config-configurationaggregator.accountaggregationsource(O)} ]",
            "    ConfigurationAggregatorName : ${3:String(R)}",
            "    OrganizationAggregationSource: ${4:aws-config-configurationaggregator.organizationaggregationsource(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-account":{
        "prefix":"aws-apigateway-account",
        "body":[
            "${1:myAWSApiGatewayAccount}:",
            "  Type: AWS::ApiGateway::Account",
            "  Properties:",
            "    CloudWatchRoleArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-template":{
        "prefix":"aws-ses-template",
        "body":[
            "${1:myAWSSESTemplate}:",
            "  Type: AWS::SES::Template",
            "  Properties:",
            "    Template: ${2:aws-ses-template.template(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution":{
        "prefix":"aws-cloudfront-distribution",
        "body":[
            "${1:myAWSCloudFrontDistribution}:",
            "  Type: AWS::CloudFront::Distribution",
            "  Properties:",
            "    DistributionConfig: ${2:aws-cloudfront-distribution.distributionconfig(R)}",
            "    Tags : [ ${3:aws-cloudfront-distribution.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-clusterparametergroup":{
        "prefix":"aws-redshift-clusterparametergroup",
        "body":[
            "${1:myAWSRedshiftClusterParameterGroup}:",
            "  Type: AWS::Redshift::ClusterParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    ParameterGroupFamily : ${3:String(R)}",
            "    Parameters : [ ${4:aws-redshift-clusterparametergroup.parameter(O)} ]",
            "    Tags : [ ${5:aws-redshift-clusterparametergroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-loggerdefinition":{
        "prefix":"aws-greengrass-loggerdefinition",
        "body":[
            "${1:myAWSGreengrassLoggerDefinition}:",
            "  Type: AWS::Greengrass::LoggerDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-loggerdefinition.loggerdefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudtrail-trail":{
        "prefix":"aws-cloudtrail-trail",
        "body":[
            "${1:myAWSCloudTrailTrail}:",
            "  Type: AWS::CloudTrail::Trail",
            "  Properties:",
            "    CloudWatchLogsLogGroupArn : ${2:String(O)}",
            "    CloudWatchLogsRoleArn : ${3:String(O)}",
            "    EnableLogFileValidation : ${4:Boolean(O)}",
            "    EventSelectors : [ ${5:aws-cloudtrail-trail.eventselector(O)} ]",
            "    IncludeGlobalServiceEvents : ${6:Boolean(O)}",
            "    IsLogging : ${7:Boolean(R)}",
            "    IsMultiRegionTrail : ${8:Boolean(O)}",
            "    KMSKeyId : ${9:String(O)}",
            "    S3BucketName : ${10:String(R)}",
            "    S3KeyPrefix : ${11:String(O)}",
            "    SnsTopicName : ${12:String(O)}",
            "    Tags : [ ${13:aws-cloudtrail-trail.tag(O)} ]",
            "    TrailName : ${14:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-cloudformationprovisionedproduct":{
        "prefix":"aws-servicecatalog-cloudformationprovisionedproduct",
        "body":[
            "${1:myAWSServiceCatalogCloudFormationProvisionedProduct}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProvisionedProduct",
            "  Properties:",
            "    PathId : ${2:String(O)}",
            "    ProvisioningParameters : [ ${3:aws-servicecatalog-cloudformationprovisionedproduct.provisioningparameter(O)} ]",
            "    ProductName : ${4:String(O)}",
            "    ProvisioningArtifactName : ${5:String(O)}",
            "    NotificationArns : [ ${6:String(O)} ]",
            "    AcceptLanguage : ${7:String(O)}",
            "    ProductId : ${8:String(O)}",
            "    Tags : [ ${9:aws-servicecatalog-cloudformationprovisionedproduct.tag(O)} ]",
            "    ProvisionedProductName : ${10:String(O)}",
            "    ProvisioningArtifactId : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-launchroleconstraint":{
        "prefix":"aws-servicecatalog-launchroleconstraint",
        "body":[
            "${1:myAWSServiceCatalogLaunchRoleConstraint}:",
            "  Type: AWS::ServiceCatalog::LaunchRoleConstraint",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    AcceptLanguage : ${3:String(O)}",
            "    PortfolioId : ${4:String(R)}",
            "    ProductId : ${5:String(R)}",
            "    RoleArn : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig":{
        "prefix":"aws-emr-instancegroupconfig",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig}:",
            "  Type: AWS::EMR::InstanceGroupConfig",
            "  Properties:",
            "    AutoScalingPolicy: ${2:aws-emr-instancegroupconfig.autoscalingpolicy(O)}",
            "    BidPrice : ${3:String(O)}",
            "    Configurations : [ ${4:aws-emr-instancegroupconfig.configuration(O)} ]",
            "    EbsConfiguration: ${5:aws-emr-instancegroupconfig.ebsconfiguration(O)}",
            "    InstanceCount : ${6:Integer(R)}",
            "    InstanceRole : ${7:String(R)}",
            "    InstanceType : ${8:String(R)}",
            "    JobFlowId : ${9:String(R)}",
            "    Market : ${10:String(O)}",
            "    Name : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-neptune-dbclusterparametergroup":{
        "prefix":"aws-neptune-dbclusterparametergroup",
        "body":[
            "${1:myAWSNeptuneDBClusterParameterGroup}:",
            "  Type: AWS::Neptune::DBClusterParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Parameters : ${3:Json(R)}",
            "    Family : ${4:String(R)}",
            "    Tags : [ ${5:aws-neptune-dbclusterparametergroup.tag(O)} ]",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-subnetcidrblock":{
        "prefix":"aws-ec2-subnetcidrblock",
        "body":[
            "${1:myAWSEC2SubnetCidrBlock}:",
            "  Type: AWS::EC2::SubnetCidrBlock",
            "  Properties:",
            "    Ipv6CidrBlock : ${2:String(R)}",
            "    SubnetId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-lifecyclehook":{
        "prefix":"aws-autoscaling-lifecyclehook",
        "body":[
            "${1:myAWSAutoScalingLifecycleHook}:",
            "  Type: AWS::AutoScaling::LifecycleHook",
            "  Properties:",
            "    AutoScalingGroupName : ${2:String(R)}",
            "    DefaultResult : ${3:String(O)}",
            "    HeartbeatTimeout : ${4:Integer(O)}",
            "    LifecycleHookName : ${5:String(O)}",
            "    LifecycleTransition : ${6:String(R)}",
            "    NotificationMetadata : ${7:String(O)}",
            "    NotificationTargetARN : ${8:String(O)}",
            "    RoleARN : ${9:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule",
            "  Properties:",
            "    Actions : [ ${2:aws-elasticloadbalancingv2-listenerrule.action(R)} ]",
            "    Conditions : [ ${3:aws-elasticloadbalancingv2-listenerrule.rulecondition(R)} ]",
            "    ListenerArn : ${4:String(R)}",
            "    Priority : ${5:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline":{
        "prefix":"aws-codepipeline-pipeline",
        "body":[
            "${1:myAWSCodePipelinePipeline}:",
            "  Type: AWS::CodePipeline::Pipeline",
            "  Properties:",
            "    ArtifactStore: ${2:aws-codepipeline-pipeline.artifactstore(O)}",
            "    ArtifactStores : [ ${3:aws-codepipeline-pipeline.artifactstoremap(O)} ]",
            "    DisableInboundStageTransitions : [ ${4:aws-codepipeline-pipeline.stagetransition(O)} ]",
            "    Name : ${5:String(O)}",
            "    RestartExecutionOnUpdate : ${6:Boolean(O)}",
            "    RoleArn : ${7:String(R)}",
            "    Stages : [ ${8:aws-codepipeline-pipeline.stagedeclaration(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-clustersecuritygroupingress":{
        "prefix":"aws-redshift-clustersecuritygroupingress",
        "body":[
            "${1:myAWSRedshiftClusterSecurityGroupIngress}:",
            "  Type: AWS::Redshift::ClusterSecurityGroupIngress",
            "  Properties:",
            "    CIDRIP : ${2:String(O)}",
            "    ClusterSecurityGroupName : ${3:String(R)}",
            "    EC2SecurityGroupName : ${4:String(O)}",
            "    EC2SecurityGroupOwnerId : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-securitygroupingress":{
        "prefix":"aws-elasticache-securitygroupingress",
        "body":[
            "${1:myAWSElastiCacheSecurityGroupIngress}:",
            "  Type: AWS::ElastiCache::SecurityGroupIngress",
            "  Properties:",
            "    CacheSecurityGroupName : ${2:String(R)}",
            "    EC2SecurityGroupName : ${3:String(R)}",
            "    EC2SecurityGroupOwnerId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-natgateway":{
        "prefix":"aws-ec2-natgateway",
        "body":[
            "${1:myAWSEC2NatGateway}:",
            "  Type: AWS::EC2::NatGateway",
            "  Properties:",
            "    AllocationId : ${2:String(R)}",
            "    SubnetId : ${3:String(R)}",
            "    Tags : [ ${4:aws-ec2-natgateway.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-optiongroup":{
        "prefix":"aws-rds-optiongroup",
        "body":[
            "${1:myAWSRDSOptionGroup}:",
            "  Type: AWS::RDS::OptionGroup",
            "  Properties:",
            "    EngineName : ${2:String(R)}",
            "    MajorEngineVersion : ${3:String(R)}",
            "    OptionConfigurations : [ ${4:aws-rds-optiongroup.optionconfiguration(R)} ]",
            "    OptionGroupDescription : ${5:String(R)}",
            "    Tags : [ ${6:aws-rds-optiongroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule":{
        "prefix":"aws-iot-topicrule",
        "body":[
            "${1:myAWSIoTTopicRule}:",
            "  Type: AWS::IoT::TopicRule",
            "  Properties:",
            "    RuleName : ${2:String(O)}",
            "    TopicRulePayload: ${3:aws-iot-topicrule.topicrulepayload(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-elasticloadbalancerattachment":{
        "prefix":"aws-opsworks-elasticloadbalancerattachment",
        "body":[
            "${1:myAWSOpsWorksElasticLoadBalancerAttachment}:",
            "  Type: AWS::OpsWorks::ElasticLoadBalancerAttachment",
            "  Properties:",
            "    ElasticLoadBalancerName : ${2:String(R)}",
            "    LayerId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-replicationgroup":{
        "prefix":"aws-elasticache-replicationgroup",
        "body":[
            "${1:myAWSElastiCacheReplicationGroup}:",
            "  Type: AWS::ElastiCache::ReplicationGroup",
            "  Properties:",
            "    AtRestEncryptionEnabled : ${2:Boolean(O)}",
            "    AuthToken : ${3:String(O)}",
            "    AutoMinorVersionUpgrade : ${4:Boolean(O)}",
            "    AutomaticFailoverEnabled : ${5:Boolean(O)}",
            "    CacheNodeType : ${6:String(O)}",
            "    CacheParameterGroupName : ${7:String(O)}",
            "    CacheSecurityGroupNames : [ ${8:String(O)} ]",
            "    CacheSubnetGroupName : ${9:String(O)}",
            "    Engine : ${10:String(O)}",
            "    EngineVersion : ${11:String(O)}",
            "    NodeGroupConfiguration : [ ${12:aws-elasticache-replicationgroup.nodegroupconfiguration(O)} ]",
            "    NotificationTopicArn : ${13:String(O)}",
            "    NumCacheClusters : ${14:Integer(O)}",
            "    NumNodeGroups : ${15:Integer(O)}",
            "    Port : ${16:Integer(O)}",
            "    PreferredCacheClusterAZs : [ ${17:String(O)} ]",
            "    PreferredMaintenanceWindow : ${18:String(O)}",
            "    PrimaryClusterId : ${19:String(O)}",
            "    ReplicasPerNodeGroup : ${20:Integer(O)}",
            "    ReplicationGroupDescription : ${21:String(R)}",
            "    ReplicationGroupId : ${22:String(O)}",
            "    SecurityGroupIds : [ ${23:String(O)} ]",
            "    SnapshotArns : [ ${24:String(O)} ]",
            "    SnapshotName : ${25:String(O)}",
            "    SnapshotRetentionLimit : ${26:Integer(O)}",
            "    SnapshotWindow : ${27:String(O)}",
            "    SnapshottingClusterId : ${28:String(O)}",
            "    Tags : [ ${29:aws-elasticache-replicationgroup.tag(O)} ]",
            "    TransitEncryptionEnabled : ${30:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-docdb-dbinstance":{
        "prefix":"aws-docdb-dbinstance",
        "body":[
            "${1:myAWSDocDBDBInstance}:",
            "  Type: AWS::DocDB::DBInstance",
            "  Properties:",
            "    DBInstanceClass : ${2:String(R)}",
            "    DBClusterIdentifier : ${3:String(R)}",
            "    AvailabilityZone : ${4:String(O)}",
            "    PreferredMaintenanceWindow : ${5:String(O)}",
            "    AutoMinorVersionUpgrade : ${6:Boolean(O)}",
            "    DBInstanceIdentifier : ${7:String(O)}",
            "    Tags : [ ${8:aws-docdb-dbinstance.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpooluser":{
        "prefix":"aws-cognito-userpooluser",
        "body":[
            "${1:myAWSCognitoUserPoolUser}:",
            "  Type: AWS::Cognito::UserPoolUser",
            "  Properties:",
            "    ValidationData : [ ${2:aws-cognito-userpooluser.attributetype(O)} ]",
            "    UserPoolId : ${3:String(R)}",
            "    Username : ${4:String(O)}",
            "    MessageAction : ${5:String(O)}",
            "    DesiredDeliveryMediums : [ ${6:String(O)} ]",
            "    ForceAliasCreation : ${7:Boolean(O)}",
            "    UserAttributes : [ ${8:aws-cognito-userpooluser.attributetype(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-webaclassociation":{
        "prefix":"aws-wafregional-webaclassociation",
        "body":[
            "${1:myAWSWAFRegionalWebACLAssociation}:",
            "  Type: AWS::WAFRegional::WebACLAssociation",
            "  Properties:",
            "    ResourceArn : ${2:String(R)}",
            "    WebACLId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-cloudformationproduct":{
        "prefix":"aws-servicecatalog-cloudformationproduct",
        "body":[
            "${1:myAWSServiceCatalogCloudFormationProduct}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProduct",
            "  Properties:",
            "    Owner : ${2:String(R)}",
            "    SupportDescription : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    Distributor : ${5:String(O)}",
            "    SupportEmail : ${6:String(O)}",
            "    AcceptLanguage : ${7:String(O)}",
            "    SupportUrl : ${8:String(O)}",
            "    Tags : [ ${9:aws-servicecatalog-cloudformationproduct.tag(O)} ]",
            "    Name : ${10:String(R)}",
            "    ProvisioningArtifactParameters : [ ${11:aws-servicecatalog-cloudformationproduct.provisioningartifactproperties(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-functionconfiguration":{
        "prefix":"aws-appsync-functionconfiguration",
        "body":[
            "${1:myAWSAppSyncFunctionConfiguration}:",
            "  Type: AWS::AppSync::FunctionConfiguration",
            "  Properties:",
            "    ResponseMappingTemplateS3Location : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    DataSourceName : ${4:String(O)}",
            "    RequestMappingTemplate : ${5:String(O)}",
            "    ResponseMappingTemplate : ${6:String(O)}",
            "    FunctionVersion : ${7:String(O)}",
            "    RequestMappingTemplateS3Location : ${8:String(O)}",
            "    ApiId : ${9:String(R)}",
            "    Name : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-model":{
        "prefix":"aws-apigatewayv2-model",
        "body":[
            "${1:myAWSApiGatewayV2Model}:",
            "  Type: AWS::ApiGatewayV2::Model",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    ContentType : ${3:String(O)}",
            "    Schema : ${4:Json(R)}",
            "    ApiId : ${5:String(R)}",
            "    Name : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplication":{
        "prefix":"aws-robomaker-simulationapplication",
        "body":[
            "${1:myAWSRoboMakerSimulationApplication}:",
            "  Type: AWS::RoboMaker::SimulationApplication",
            "  Properties:",
            "    RenderingEngine: ${2:aws-robomaker-simulationapplication.renderingengine(R)}",
            "    SimulationSoftwareSuite: ${3:aws-robomaker-simulationapplication.simulationsoftwaresuite(R)}",
            "    CurrentRevisionId : ${4:String(O)}",
            "    RobotSoftwareSuite: ${5:aws-robomaker-simulationapplication.robotsoftwaresuite(R)}",
            "    Sources : [ ${6:aws-robomaker-simulationapplication.sourceconfig(R)} ]",
            "    Tags : ${7:Json(O)}",
            "    Name : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-channel":{
        "prefix":"aws-iotanalytics-channel",
        "body":[
            "${1:myAWSIoTAnalyticsChannel}:",
            "  Type: AWS::IoTAnalytics::Channel",
            "  Properties:",
            "    ChannelName : ${2:String(O)}",
            "    RetentionPeriod: ${3:aws-iotanalytics-channel.retentionperiod(O)}",
            "    Tags : [ ${4:aws-iotanalytics-channel.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudformation-waitcondition":{
        "prefix":"aws-cloudformation-waitcondition",
        "body":[
            "${1:myAWSCloudFormationWaitCondition}:",
            "  Type: AWS::CloudFormation::WaitCondition",
            "  Properties:",
            "    Count : ${2:Integer(O)}",
            "    Handle : ${3:String(O)}",
            "    Timeout : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-securitygroup":{
        "prefix":"aws-ec2-securitygroup",
        "body":[
            "${1:myAWSEC2SecurityGroup}:",
            "  Type: AWS::EC2::SecurityGroup",
            "  Properties:",
            "    GroupDescription : ${2:String(R)}",
            "    GroupName : ${3:String(O)}",
            "    SecurityGroupEgress : [ ${4:aws-ec2-securitygroup.egress(O)} ]",
            "    SecurityGroupIngress : [ ${5:aws-ec2-securitygroup.ingress(O)} ]",
            "    Tags : [ ${6:aws-ec2-securitygroup.tag(O)} ]",
            "    VpcId : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloud9-environmentec2":{
        "prefix":"aws-cloud9-environmentec2",
        "body":[
            "${1:myAWSCloud9EnvironmentEC2}:",
            "  Type: AWS::Cloud9::EnvironmentEC2",
            "  Properties:",
            "    Repositories : [ ${2:aws-cloud9-environmentec2.repository(O)} ]",
            "    OwnerArn : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    AutomaticStopTimeMinutes : ${5:Integer(O)}",
            "    SubnetId : ${6:String(O)}",
            "    InstanceType : ${7:String(R)}",
            "    Name : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-webacl":{
        "prefix":"aws-wafregional-webacl",
        "body":[
            "${1:myAWSWAFRegionalWebACL}:",
            "  Type: AWS::WAFRegional::WebACL",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    DefaultAction: ${3:aws-wafregional-webacl.action(R)}",
            "    Rules : [ ${4:aws-wafregional-webacl.rule(O)} ]",
            "    Name : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-rule":{
        "prefix":"aws-wafregional-rule",
        "body":[
            "${1:myAWSWAFRegionalRule}:",
            "  Type: AWS::WAFRegional::Rule",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    Predicates : [ ${3:aws-wafregional-rule.predicate(O)} ]",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-cloudfrontoriginaccessidentity":{
        "prefix":"aws-cloudfront-cloudfrontoriginaccessidentity",
        "body":[
            "${1:myAWSCloudFrontCloudFrontOriginAccessIdentity}:",
            "  Type: AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "  Properties:",
            "    CloudFrontOriginAccessIdentityConfig: ${2:aws-cloudfront-cloudfrontoriginaccessidentity.cloudfrontoriginaccessidentityconfig(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-endpoint":{
        "prefix":"aws-sagemaker-endpoint",
        "body":[
            "${1:myAWSSageMakerEndpoint}:",
            "  Type: AWS::SageMaker::Endpoint",
            "  Properties:",
            "    EndpointName : ${2:String(O)}",
            "    EndpointConfigName : ${3:String(R)}",
            "    Tags : [ ${4:aws-sagemaker-endpoint.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-apikey":{
        "prefix":"aws-appsync-apikey",
        "body":[
            "${1:myAWSAppSyncApiKey}:",
            "  Type: AWS::AppSync::ApiKey",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Expires : ${3:Double(O)}",
            "    ApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-hostedzone":{
        "prefix":"aws-route53-hostedzone",
        "body":[
            "${1:myAWSRoute53HostedZone}:",
            "  Type: AWS::Route53::HostedZone",
            "  Properties:",
            "    HostedZoneConfig: ${2:aws-route53-hostedzone.hostedzoneconfig(O)}",
            "    HostedZoneTags : [ ${3:aws-route53-hostedzone.hostedzonetag(O)} ]",
            "    Name : ${4:String(R)}",
            "    QueryLoggingConfig: ${5:aws-route53-hostedzone.queryloggingconfig(O)}",
            "    VPCs : [ ${6:aws-route53-hostedzone.vpc(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-restapi":{
        "prefix":"aws-apigateway-restapi",
        "body":[
            "${1:myAWSApiGatewayRestApi}:",
            "  Type: AWS::ApiGateway::RestApi",
            "  Properties:",
            "    ApiKeySourceType : ${2:String(O)}",
            "    BinaryMediaTypes : [ ${3:String(O)} ]",
            "    Body : ${4:Json(O)}",
            "    BodyS3Location: ${5:aws-apigateway-restapi.s3location(O)}",
            "    CloneFrom : ${6:String(O)}",
            "    Description : ${7:String(O)}",
            "    EndpointConfiguration: ${8:aws-apigateway-restapi.endpointconfiguration(O)}",
            "    FailOnWarnings : ${9:Boolean(O)}",
            "    MinimumCompressionSize : ${10:Integer(O)}",
            "    Name : ${11:String(O)}",
            "    Parameters : [ ${12:String(O)} ]",
            "    Policy : ${13:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-subnet":{
        "prefix":"aws-ec2-subnet",
        "body":[
            "${1:myAWSEC2Subnet}:",
            "  Type: AWS::EC2::Subnet",
            "  Properties:",
            "    AssignIpv6AddressOnCreation : ${2:Boolean(O)}",
            "    AvailabilityZone : ${3:String(O)}",
            "    CidrBlock : ${4:String(R)}",
            "    Ipv6CidrBlock : ${5:String(O)}",
            "    MapPublicIpOnLaunch : ${6:Boolean(O)}",
            "    Tags : [ ${7:aws-ec2-subnet.tag(O)} ]",
            "    VpcId : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-application":{
        "prefix":"aws-codedeploy-application",
        "body":[
            "${1:myAWSCodeDeployApplication}:",
            "  Type: AWS::CodeDeploy::Application",
            "  Properties:",
            "    ApplicationName : ${2:String(O)}",
            "    ComputePlatform : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-portfolioproductassociation":{
        "prefix":"aws-servicecatalog-portfolioproductassociation",
        "body":[
            "${1:myAWSServiceCatalogPortfolioProductAssociation}:",
            "  Type: AWS::ServiceCatalog::PortfolioProductAssociation",
            "  Properties:",
            "    SourcePortfolioId : ${2:String(O)}",
            "    AcceptLanguage : ${3:String(O)}",
            "    PortfolioId : ${4:String(R)}",
            "    ProductId : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpc":{
        "prefix":"aws-ec2-vpc",
        "body":[
            "${1:myAWSEC2VPC}:",
            "  Type: AWS::EC2::VPC",
            "  Properties:",
            "    CidrBlock : ${2:String(R)}",
            "    EnableDnsHostnames : ${3:Boolean(O)}",
            "    EnableDnsSupport : ${4:Boolean(O)}",
            "    InstanceTenancy : ${5:String(O)}",
            "    Tags : [ ${6:aws-ec2-vpc.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-instance":{
        "prefix":"aws-servicediscovery-instance",
        "body":[
            "${1:myAWSServiceDiscoveryInstance}:",
            "  Type: AWS::ServiceDiscovery::Instance",
            "  Properties:",
            "    InstanceAttributes : ${2:Map(R)}",
            "    InstanceId : ${3:String(O)}",
            "    ServiceId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance":{
        "prefix":"aws-ec2-instance",
        "body":[
            "${1:myAWSEC2Instance}:",
            "  Type: AWS::EC2::Instance",
            "  Properties:",
            "    AdditionalInfo : ${2:String(O)}",
            "    Affinity : ${3:String(O)}",
            "    AvailabilityZone : ${4:String(O)}",
            "    BlockDeviceMappings : [ ${5:aws-ec2-instance.blockdevicemapping(O)} ]",
            "    CreditSpecification: ${6:aws-ec2-instance.creditspecification(O)}",
            "    DisableApiTermination : ${7:Boolean(O)}",
            "    EbsOptimized : ${8:Boolean(O)}",
            "    ElasticGpuSpecifications : [ ${9:aws-ec2-instance.elasticgpuspecification(O)} ]",
            "    ElasticInferenceAccelerators : [ ${10:aws-ec2-instance.elasticinferenceaccelerator(O)} ]",
            "    HostId : ${11:String(O)}",
            "    IamInstanceProfile : ${12:String(O)}",
            "    ImageId : ${13:String(O)}",
            "    InstanceInitiatedShutdownBehavior : ${14:String(O)}",
            "    InstanceType : ${15:String(O)}",
            "    Ipv6AddressCount : ${16:Integer(O)}",
            "    Ipv6Addresses : [ ${17:aws-ec2-instance.instanceipv6address(O)} ]",
            "    KernelId : ${18:String(O)}",
            "    KeyName : ${19:String(O)}",
            "    LaunchTemplate: ${20:aws-ec2-instance.launchtemplatespecification(O)}",
            "    LicenseSpecifications : [ ${21:aws-ec2-instance.licensespecification(O)} ]",
            "    Monitoring : ${22:Boolean(O)}",
            "    NetworkInterfaces : [ ${23:aws-ec2-instance.networkinterface(O)} ]",
            "    PlacementGroupName : ${24:String(O)}",
            "    PrivateIpAddress : ${25:String(O)}",
            "    RamdiskId : ${26:String(O)}",
            "    SecurityGroupIds : [ ${27:String(O)} ]",
            "    SecurityGroups : [ ${28:String(O)} ]",
            "    SourceDestCheck : ${29:Boolean(O)}",
            "    SsmAssociations : [ ${30:aws-ec2-instance.ssmassociation(O)} ]",
            "    SubnetId : ${31:String(O)}",
            "    Tags : [ ${32:aws-ec2-instance.tag(O)} ]",
            "    Tenancy : ${33:String(O)}",
            "    UserData : ${34:String(O)}",
            "    Volumes : [ ${35:aws-ec2-instance.volume(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    Output: ${3:aws-kinesisanalyticsv2-applicationoutput.output(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-eventbuspolicy":{
        "prefix":"aws-events-eventbuspolicy",
        "body":[
            "${1:myAWSEventsEventBusPolicy}:",
            "  Type: AWS::Events::EventBusPolicy",
            "  Properties:",
            "    Condition: ${2:aws-events-eventbuspolicy.condition(O)}",
            "    Action : ${3:String(R)}",
            "    StatementId : ${4:String(R)}",
            "    Principal : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-eks-cluster":{
        "prefix":"aws-eks-cluster",
        "body":[
            "${1:myAWSEKSCluster}:",
            "  Type: AWS::EKS::Cluster",
            "  Properties:",
            "    Version : ${2:String(O)}",
            "    RoleArn : ${3:String(R)}",
            "    ResourcesVpcConfig: ${4:aws-eks-cluster.resourcesvpcconfig(R)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudformation-stack":{
        "prefix":"aws-cloudformation-stack",
        "body":[
            "${1:myAWSCloudFormationStack}:",
            "  Type: AWS::CloudFormation::Stack",
            "  Properties:",
            "    NotificationARNs : [ ${2:String(O)} ]",
            "    Parameters : [ ${3:String(O)} ]",
            "    Tags : [ ${4:aws-cloudformation-stack.tag(O)} ]",
            "    TemplateURL : ${5:String(R)}",
            "    TimeoutInMinutes : ${6:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-aggregationauthorization":{
        "prefix":"aws-config-aggregationauthorization",
        "body":[
            "${1:myAWSConfigAggregationAuthorization}:",
            "  Type: AWS::Config::AggregationAuthorization",
            "  Properties:",
            "    AuthorizedAccountId : ${2:String(R)}",
            "    AuthorizedAwsRegion : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-parametergroup":{
        "prefix":"aws-elasticache-parametergroup",
        "body":[
            "${1:myAWSElastiCacheParameterGroup}:",
            "  Type: AWS::ElastiCache::ParameterGroup",
            "  Properties:",
            "    CacheParameterGroupFamily : ${2:String(R)}",
            "    Description : ${3:String(R)}",
            "    Properties : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-bytematchset":{
        "prefix":"aws-waf-bytematchset",
        "body":[
            "${1:myAWSWAFByteMatchSet}:",
            "  Type: AWS::WAF::ByteMatchSet",
            "  Properties:",
            "    ByteMatchTuples : [ ${2:aws-waf-bytematchset.bytematchtuple(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sqs-queuepolicy":{
        "prefix":"aws-sqs-queuepolicy",
        "body":[
            "${1:myAWSSQSQueuePolicy}:",
            "  Type: AWS::SQS::QueuePolicy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    Queues : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-docdb-dbcluster":{
        "prefix":"aws-docdb-dbcluster",
        "body":[
            "${1:myAWSDocDBDBCluster}:",
            "  Type: AWS::DocDB::DBCluster",
            "  Properties:",
            "    StorageEncrypted : ${2:Boolean(O)}",
            "    EngineVersion : ${3:String(O)}",
            "    KmsKeyId : ${4:String(O)}",
            "    AvailabilityZones : [ ${5:String(O)} ]",
            "    SnapshotIdentifier : ${6:String(O)}",
            "    Port : ${7:Integer(O)}",
            "    DBClusterIdentifier : ${8:String(O)}",
            "    PreferredMaintenanceWindow : ${9:String(O)}",
            "    DBSubnetGroupName : ${10:String(O)}",
            "    PreferredBackupWindow : ${11:String(O)}",
            "    MasterUserPassword : ${12:String(O)}",
            "    VpcSecurityGroupIds : [ ${13:String(O)} ]",
            "    MasterUsername : ${14:String(O)}",
            "    DBClusterParameterGroupName : ${15:String(O)}",
            "    BackupRetentionPeriod : ${16:Integer(O)}",
            "    Tags : [ ${17:aws-docdb-dbcluster.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sqlinjectionmatchset":{
        "prefix":"aws-waf-sqlinjectionmatchset",
        "body":[
            "${1:myAWSWAFSqlInjectionMatchSet}:",
            "  Type: AWS::WAF::SqlInjectionMatchSet",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    SqlInjectionMatchTuples : [ ${3:aws-waf-sqlinjectionmatchset.sqlinjectionmatchtuple(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy":{
        "prefix":"aws-applicationautoscaling-scalingpolicy",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy",
            "  Properties:",
            "    PolicyName : ${2:String(R)}",
            "    PolicyType : ${3:String(R)}",
            "    ResourceId : ${4:String(O)}",
            "    ScalableDimension : ${5:String(O)}",
            "    ScalingTargetId : ${6:String(O)}",
            "    ServiceNamespace : ${7:String(O)}",
            "    StepScalingPolicyConfiguration: ${8:aws-applicationautoscaling-scalingpolicy.stepscalingpolicyconfiguration(O)}",
            "    TargetTrackingScalingPolicyConfiguration: ${9:aws-applicationautoscaling-scalingpolicy.targettrackingscalingpolicyconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-efs-filesystem":{
        "prefix":"aws-efs-filesystem",
        "body":[
            "${1:myAWSEFSFileSystem}:",
            "  Type: AWS::EFS::FileSystem",
            "  Properties:",
            "    Encrypted : ${2:Boolean(O)}",
            "    FileSystemTags : [ ${3:aws-efs-filesystem.elasticfilesystemtag(O)} ]",
            "    KmsKeyId : ${4:String(O)}",
            "    PerformanceMode : ${5:String(O)}",
            "    ProvisionedThroughputInMibps : ${6:Double(O)}",
            "    ThroughputMode : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dax-cluster":{
        "prefix":"aws-dax-cluster",
        "body":[
            "${1:myAWSDAXCluster}:",
            "  Type: AWS::DAX::Cluster",
            "  Properties:",
            "    SSESpecification: ${2:aws-dax-cluster.ssespecification(O)}",
            "    Description : ${3:String(O)}",
            "    ReplicationFactor : ${4:Integer(R)}",
            "    ParameterGroupName : ${5:String(O)}",
            "    AvailabilityZones : [ ${6:String(O)} ]",
            "    IAMRoleARN : ${7:String(R)}",
            "    SubnetGroupName : ${8:String(O)}",
            "    PreferredMaintenanceWindow : ${9:String(O)}",
            "    NotificationTopicARN : ${10:String(O)}",
            "    SecurityGroupIds : [ ${11:String(O)} ]",
            "    NodeType : ${12:String(R)}",
            "    ClusterName : ${13:String(O)}",
            "    Tags : ${14:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codecommit-repository":{
        "prefix":"aws-codecommit-repository",
        "body":[
            "${1:myAWSCodeCommitRepository}:",
            "  Type: AWS::CodeCommit::Repository",
            "  Properties:",
            "    RepositoryName : ${2:String(R)}",
            "    Triggers : [ ${3:aws-codecommit-repository.repositorytrigger(O)} ]",
            "    RepositoryDescription : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline":{
        "prefix":"aws-ssm-patchbaseline",
        "body":[
            "${1:myAWSSSMPatchBaseline}:",
            "  Type: AWS::SSM::PatchBaseline",
            "  Properties:",
            "    OperatingSystem : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    ApprovalRules: ${4:aws-ssm-patchbaseline.rulegroup(O)}",
            "    Sources : [ ${5:aws-ssm-patchbaseline.patchsource(O)} ]",
            "    Name : ${6:String(R)}",
            "    RejectedPatches : [ ${7:String(O)} ]",
            "    ApprovedPatches : [ ${8:String(O)} ]",
            "    RejectedPatchesAction : ${9:String(O)}",
            "    PatchGroups : [ ${10:String(O)} ]",
            "    ApprovedPatchesComplianceLevel : ${11:String(O)}",
            "    ApprovedPatchesEnableNonSecurity : ${12:Boolean(O)}",
            "    GlobalFilters: ${13:aws-ssm-patchbaseline.patchfiltergroup(O)}",
            "    Tags : [ ${14:aws-ssm-patchbaseline.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-secret":{
        "prefix":"aws-secretsmanager-secret",
        "body":[
            "${1:myAWSSecretsManagerSecret}:",
            "  Type: AWS::SecretsManager::Secret",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    KmsKeyId : ${3:String(O)}",
            "    SecretString : ${4:String(O)}",
            "    GenerateSecretString: ${5:aws-secretsmanager-secret.generatesecretstring(O)}",
            "    Tags : [ ${6:aws-secretsmanager-secret.tag(O)} ]",
            "    Name : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-portfolio":{
        "prefix":"aws-servicecatalog-portfolio",
        "body":[
            "${1:myAWSServiceCatalogPortfolio}:",
            "  Type: AWS::ServiceCatalog::Portfolio",
            "  Properties:",
            "    ProviderName : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    DisplayName : ${4:String(R)}",
            "    AcceptLanguage : ${5:String(O)}",
            "    Tags : [ ${6:aws-servicecatalog-portfolio.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-coredefinition":{
        "prefix":"aws-greengrass-coredefinition",
        "body":[
            "${1:myAWSGreengrassCoreDefinition}:",
            "  Type: AWS::Greengrass::CoreDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-coredefinition.coredefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationcloudwatchloggingoption":{
        "prefix":"aws-kinesisanalyticsv2-applicationcloudwatchloggingoption",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationCloudWatchLoggingOption}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    CloudWatchLoggingOption: ${3:aws-kinesisanalyticsv2-applicationcloudwatchloggingoption.cloudwatchloggingoption(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-member":{
        "prefix":"aws-guardduty-member",
        "body":[
            "${1:myAWSGuardDutyMember}:",
            "  Type: AWS::GuardDuty::Member",
            "  Properties:",
            "    Status : ${2:String(O)}",
            "    MemberId : ${3:String(R)}",
            "    Email : ${4:String(R)}",
            "    Message : ${5:String(O)}",
            "    DisableEmailNotification : ${6:Boolean(O)}",
            "    DetectorId : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbparametergroup":{
        "prefix":"aws-rds-dbparametergroup",
        "body":[
            "${1:myAWSRDSDBParameterGroup}:",
            "  Type: AWS::RDS::DBParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Family : ${3:String(R)}",
            "    Parameters : [ ${4:String(O)} ]",
            "    Tags : [ ${5:aws-rds-dbparametergroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stackfleetassociation":{
        "prefix":"aws-appstream-stackfleetassociation",
        "body":[
            "${1:myAWSAppStreamStackFleetAssociation}:",
            "  Type: AWS::AppStream::StackFleetAssociation",
            "  Properties:",
            "    FleetName : ${2:String(R)}",
            "    StackName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-service":{
        "prefix":"aws-servicediscovery-service",
        "body":[
            "${1:myAWSServiceDiscoveryService}:",
            "  Type: AWS::ServiceDiscovery::Service",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    HealthCheckCustomConfig: ${3:aws-servicediscovery-service.healthcheckcustomconfig(O)}",
            "    DnsConfig: ${4:aws-servicediscovery-service.dnsconfig(O)}",
            "    NamespaceId : ${5:String(O)}",
            "    HealthCheckConfig: ${6:aws-servicediscovery-service.healthcheckconfig(O)}",
            "    Name : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-acceptedportfolioshare":{
        "prefix":"aws-servicecatalog-acceptedportfolioshare",
        "body":[
            "${1:myAWSServiceCatalogAcceptedPortfolioShare}:",
            "  Type: AWS::ServiceCatalog::AcceptedPortfolioShare",
            "  Properties:",
            "    AcceptLanguage : ${2:String(O)}",
            "    PortfolioId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-logstream":{
        "prefix":"aws-logs-logstream",
        "body":[
            "${1:myAWSLogsLogStream}:",
            "  Type: AWS::Logs::LogStream",
            "  Properties:",
            "    LogGroupName : ${2:String(R)}",
            "    LogStreamName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-resourcepolicy":{
        "prefix":"aws-secretsmanager-resourcepolicy",
        "body":[
            "${1:myAWSSecretsManagerResourcePolicy}:",
            "  Type: AWS::SecretsManager::ResourcePolicy",
            "  Properties:",
            "    SecretId : ${2:String(R)}",
            "    ResourcePolicy : ${3:Json(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplicationversion":{
        "prefix":"aws-robomaker-simulationapplicationversion",
        "body":[
            "${1:myAWSRoboMakerSimulationApplicationVersion}:",
            "  Type: AWS::RoboMaker::SimulationApplicationVersion",
            "  Properties:",
            "    CurrentRevisionId : ${2:String(O)}",
            "    Application : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-robotapplicationversion":{
        "prefix":"aws-robomaker-robotapplicationversion",
        "body":[
            "${1:myAWSRoboMakerRobotApplicationVersion}:",
            "  Type: AWS::RoboMaker::RobotApplicationVersion",
            "  Properties:",
            "    CurrentRevisionId : ${2:String(O)}",
            "    Application : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy":{
        "prefix":"aws-autoscaling-scalingpolicy",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy}:",
            "  Type: AWS::AutoScaling::ScalingPolicy",
            "  Properties:",
            "    AdjustmentType : ${2:String(O)}",
            "    AutoScalingGroupName : ${3:String(R)}",
            "    Cooldown : ${4:String(O)}",
            "    EstimatedInstanceWarmup : ${5:Integer(O)}",
            "    MetricAggregationType : ${6:String(O)}",
            "    MinAdjustmentMagnitude : ${7:Integer(O)}",
            "    PolicyType : ${8:String(O)}",
            "    ScalingAdjustment : ${9:Integer(O)}",
            "    StepAdjustments : [ ${10:aws-autoscaling-scalingpolicy.stepadjustment(O)} ]",
            "    TargetTrackingConfiguration: ${11:aws-autoscaling-scalingpolicy.targettrackingconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-step":{
        "prefix":"aws-emr-step",
        "body":[
            "${1:myAWSEMRStep}:",
            "  Type: AWS::EMR::Step",
            "  Properties:",
            "    ActionOnFailure : ${2:String(R)}",
            "    HadoopJarStep: ${3:aws-emr-step.hadoopjarstepconfig(R)}",
            "    JobFlowId : ${4:String(R)}",
            "    Name : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configurationrecorder":{
        "prefix":"aws-config-configurationrecorder",
        "body":[
            "${1:myAWSConfigConfigurationRecorder}:",
            "  Type: AWS::Config::ConfigurationRecorder",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    RecordingGroup: ${3:aws-config-configurationrecorder.recordinggroup(O)}",
            "    RoleARN : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-eventsubscription":{
        "prefix":"aws-rds-eventsubscription",
        "body":[
            "${1:myAWSRDSEventSubscription}:",
            "  Type: AWS::RDS::EventSubscription",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}",
            "    EventCategories : [ ${3:String(O)} ]",
            "    SnsTopicArn : ${4:String(R)}",
            "    SourceIds : [ ${5:String(O)} ]",
            "    SourceType : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-environment":{
        "prefix":"aws-elasticbeanstalk-environment",
        "body":[
            "${1:myAWSElasticBeanstalkEnvironment}:",
            "  Type: AWS::ElasticBeanstalk::Environment",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    CNAMEPrefix : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    EnvironmentName : ${5:String(O)}",
            "    OptionSettings : [ ${6:aws-elasticbeanstalk-environment.optionsetting(O)} ]",
            "    PlatformArn : ${7:String(O)}",
            "    SolutionStackName : ${8:String(O)}",
            "    Tags : [ ${9:aws-elasticbeanstalk-environment.tag(O)} ]",
            "    TemplateName : ${10:String(O)}",
            "    Tier: ${11:aws-elasticbeanstalk-environment.tier(O)}",
            "    VersionLabel : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline":{
        "prefix":"aws-iotanalytics-pipeline",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline}:",
            "  Type: AWS::IoTAnalytics::Pipeline",
            "  Properties:",
            "    PipelineName : ${2:String(O)}",
            "    Tags : [ ${3:aws-iotanalytics-pipeline.tag(O)} ]",
            "    PipelineActivities : [ ${4:aws-iotanalytics-pipeline.activity(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot1click-placement":{
        "prefix":"aws-iot1click-placement",
        "body":[
            "${1:myAWSIoT1ClickPlacement}:",
            "  Type: AWS::IoT1Click::Placement",
            "  Properties:",
            "    PlacementName : ${2:String(O)}",
            "    ProjectName : ${3:String(R)}",
            "    AssociatedDevices : ${4:Json(O)}",
            "    Attributes : ${5:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function":{
        "prefix":"aws-lambda-function",
        "body":[
            "${1:myAWSLambdaFunction}:",
            "  Type: AWS::Lambda::Function",
            "  Properties:",
            "    Code: ${2:aws-lambda-function.code(R)}",
            "    DeadLetterConfig: ${3:aws-lambda-function.deadletterconfig(O)}",
            "    Description : ${4:String(O)}",
            "    Environment: ${5:aws-lambda-function.environment(O)}",
            "    FunctionName : ${6:String(O)}",
            "    Handler : ${7:String(R)}",
            "    KmsKeyArn : ${8:String(O)}",
            "    Layers : [ ${9:String(O)} ]",
            "    MemorySize : ${10:Integer(O)}",
            "    ReservedConcurrentExecutions : ${11:Integer(O)}",
            "    Role : ${12:String(R)}",
            "    Runtime : ${13:String(R)}",
            "    Tags : [ ${14:aws-lambda-function.tag(O)} ]",
            "    Timeout : ${15:Integer(O)}",
            "    TracingConfig: ${16:aws-lambda-function.tracingconfig(O)}",
            "    VpcConfig: ${17:aws-lambda-function.vpcconfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgatewayroute":{
        "prefix":"aws-ec2-transitgatewayroute",
        "body":[
            "${1:myAWSEC2TransitGatewayRoute}:",
            "  Type: AWS::EC2::TransitGatewayRoute",
            "  Properties:",
            "    TransitGatewayRouteTableId : ${2:String(R)}",
            "    DestinationCidrBlock : ${3:String(O)}",
            "    Blackhole : ${4:Boolean(O)}",
            "    TransitGatewayAttachmentId : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-dhcpoptions":{
        "prefix":"aws-ec2-dhcpoptions",
        "body":[
            "${1:myAWSEC2DHCPOptions}:",
            "  Type: AWS::EC2::DHCPOptions",
            "  Properties:",
            "    DomainName : ${2:String(O)}",
            "    DomainNameServers : [ ${3:String(O)} ]",
            "    NetbiosNameServers : [ ${4:String(O)} ]",
            "    NetbiosNodeType : ${5:Integer(O)}",
            "    NtpServers : [ ${6:String(O)} ]",
            "    Tags : [ ${7:aws-ec2-dhcpoptions.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-usageplan":{
        "prefix":"aws-apigateway-usageplan",
        "body":[
            "${1:myAWSApiGatewayUsagePlan}:",
            "  Type: AWS::ApiGateway::UsagePlan",
            "  Properties:",
            "    ApiStages : [ ${2:aws-apigateway-usageplan.apistage(O)} ]",
            "    Description : ${3:String(O)}",
            "    Quota: ${4:aws-apigateway-usageplan.quotasettings(O)}",
            "    Throttle: ${5:aws-apigateway-usageplan.throttlesettings(O)}",
            "    UsagePlanName : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-user":{
        "prefix":"aws-iam-user",
        "body":[
            "${1:myAWSIAMUser}:",
            "  Type: AWS::IAM::User",
            "  Properties:",
            "    Groups : [ ${2:String(O)} ]",
            "    LoginProfile: ${3:aws-iam-user.loginprofile(O)}",
            "    ManagedPolicyArns : [ ${4:String(O)} ]",
            "    Path : ${5:String(O)}",
            "    PermissionsBoundary : ${6:String(O)}",
            "    Policies : [ ${7:aws-iam-user.policy(O)} ]",
            "    UserName : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkacl":{
        "prefix":"aws-ec2-networkacl",
        "body":[
            "${1:myAWSEC2NetworkAcl}:",
            "  Type: AWS::EC2::NetworkAcl",
            "  Properties:",
            "    Tags : [ ${2:aws-ec2-networkacl.tag(O)} ]",
            "    VpcId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-instance":{
        "prefix":"aws-opsworks-instance",
        "body":[
            "${1:myAWSOpsWorksInstance}:",
            "  Type: AWS::OpsWorks::Instance",
            "  Properties:",
            "    AgentVersion : ${2:String(O)}",
            "    AmiId : ${3:String(O)}",
            "    Architecture : ${4:String(O)}",
            "    AutoScalingType : ${5:String(O)}",
            "    AvailabilityZone : ${6:String(O)}",
            "    BlockDeviceMappings : [ ${7:aws-opsworks-instance.blockdevicemapping(O)} ]",
            "    EbsOptimized : ${8:Boolean(O)}",
            "    ElasticIps : [ ${9:String(O)} ]",
            "    Hostname : ${10:String(O)}",
            "    InstallUpdatesOnBoot : ${11:Boolean(O)}",
            "    InstanceType : ${12:String(R)}",
            "    LayerIds : [ ${13:String(R)} ]",
            "    Os : ${14:String(O)}",
            "    RootDeviceType : ${15:String(O)}",
            "    SshKeyName : ${16:String(O)}",
            "    StackId : ${17:String(R)}",
            "    SubnetId : ${18:String(O)}",
            "    Tenancy : ${19:String(O)}",
            "    TimeBasedAutoScaling: ${20:aws-opsworks-instance.timebasedautoscaling(O)}",
            "    VirtualizationType : ${21:String(O)}",
            "    Volumes : [ ${22:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configrule":{
        "prefix":"aws-config-configrule",
        "body":[
            "${1:myAWSConfigConfigRule}:",
            "  Type: AWS::Config::ConfigRule",
            "  Properties:",
            "    ConfigRuleName : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    InputParameters : ${4:Json(O)}",
            "    MaximumExecutionFrequency : ${5:String(O)}",
            "    Scope: ${6:aws-config-configrule.scope(O)}",
            "    Source: ${7:aws-config-configrule.source(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationset":{
        "prefix":"aws-ses-configurationset",
        "body":[
            "${1:myAWSSESConfigurationSet}:",
            "  Type: AWS::SES::ConfigurationSet",
            "  Properties:",
            "    Name : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition":{
        "prefix":"aws-glue-partition",
        "body":[
            "${1:myAWSGluePartition}:",
            "  Type: AWS::Glue::Partition",
            "  Properties:",
            "    TableName : ${2:String(R)}",
            "    DatabaseName : ${3:String(R)}",
            "    CatalogId : ${4:String(R)}",
            "    PartitionInput: ${5:aws-glue-partition.partitioninput(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpngatewayroutepropagation":{
        "prefix":"aws-ec2-vpngatewayroutepropagation",
        "body":[
            "${1:myAWSEC2VPNGatewayRoutePropagation}:",
            "  Type: AWS::EC2::VPNGatewayRoutePropagation",
            "  Properties:",
            "    RouteTableIds : [ ${2:String(R)} ]",
            "    VpnGatewayId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-webacl":{
        "prefix":"aws-waf-webacl",
        "body":[
            "${1:myAWSWAFWebACL}:",
            "  Type: AWS::WAF::WebACL",
            "  Properties:",
            "    DefaultAction: ${2:aws-waf-webacl.wafaction(R)}",
            "    MetricName : ${3:String(R)}",
            "    Name : ${4:String(R)}",
            "    Rules : [ ${5:aws-waf-webacl.activatedrule(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-datastore":{
        "prefix":"aws-iotanalytics-datastore",
        "body":[
            "${1:myAWSIoTAnalyticsDatastore}:",
            "  Type: AWS::IoTAnalytics::Datastore",
            "  Properties:",
            "    DatastoreName : ${2:String(O)}",
            "    RetentionPeriod: ${3:aws-iotanalytics-datastore.retentionperiod(O)}",
            "    Tags : [ ${4:aws-iotanalytics-datastore.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-job":{
        "prefix":"aws-glue-job",
        "body":[
            "${1:myAWSGlueJob}:",
            "  Type: AWS::Glue::Job",
            "  Properties:",
            "    Role : ${2:String(R)}",
            "    DefaultArguments : ${3:Json(O)}",
            "    Connections: ${4:aws-glue-job.connectionslist(O)}",
            "    MaxRetries : ${5:Double(O)}",
            "    Description : ${6:String(O)}",
            "    LogUri : ${7:String(O)}",
            "    Command: ${8:aws-glue-job.jobcommand(R)}",
            "    AllocatedCapacity : ${9:Double(O)}",
            "    ExecutionProperty: ${10:aws-glue-job.executionproperty(O)}",
            "    Name : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-neptune-dbcluster":{
        "prefix":"aws-neptune-dbcluster",
        "body":[
            "${1:myAWSNeptuneDBCluster}:",
            "  Type: AWS::Neptune::DBCluster",
            "  Properties:",
            "    StorageEncrypted : ${2:Boolean(O)}",
            "    KmsKeyId : ${3:String(O)}",
            "    AvailabilityZones : [ ${4:String(O)} ]",
            "    SnapshotIdentifier : ${5:String(O)}",
            "    Port : ${6:Integer(O)}",
            "    DBClusterIdentifier : ${7:String(O)}",
            "    PreferredMaintenanceWindow : ${8:String(O)}",
            "    IamAuthEnabled : ${9:Boolean(O)}",
            "    DBSubnetGroupName : ${10:String(O)}",
            "    PreferredBackupWindow : ${11:String(O)}",
            "    VpcSecurityGroupIds : [ ${12:String(O)} ]",
            "    DBClusterParameterGroupName : ${13:String(O)}",
            "    BackupRetentionPeriod : ${14:Integer(O)}",
            "    Tags : [ ${15:aws-neptune-dbcluster.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-authorizer":{
        "prefix":"aws-apigatewayv2-authorizer",
        "body":[
            "${1:myAWSApiGatewayV2Authorizer}:",
            "  Type: AWS::ApiGatewayV2::Authorizer",
            "  Properties:",
            "    IdentityValidationExpression : ${2:String(O)}",
            "    AuthorizerUri : ${3:String(R)}",
            "    AuthorizerCredentialsArn : ${4:String(O)}",
            "    AuthorizerType : ${5:String(R)}",
            "    AuthorizerResultTtlInSeconds : ${6:Integer(O)}",
            "    IdentitySource : [ ${7:String(R)} ]",
            "    ApiId : ${8:String(R)}",
            "    Name : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket":{
        "prefix":"aws-s3-bucket",
        "body":[
            "${1:myAWSS3Bucket}:",
            "  Type: AWS::S3::Bucket",
            "  Properties:",
            "    AccelerateConfiguration: ${2:aws-s3-bucket.accelerateconfiguration(O)}",
            "    AccessControl : ${3:String(O)}",
            "    AnalyticsConfigurations : [ ${4:aws-s3-bucket.analyticsconfiguration(O)} ]",
            "    BucketEncryption: ${5:aws-s3-bucket.bucketencryption(O)}",
            "    BucketName : ${6:String(O)}",
            "    CorsConfiguration: ${7:aws-s3-bucket.corsconfiguration(O)}",
            "    InventoryConfigurations : [ ${8:aws-s3-bucket.inventoryconfiguration(O)} ]",
            "    LifecycleConfiguration: ${9:aws-s3-bucket.lifecycleconfiguration(O)}",
            "    LoggingConfiguration: ${10:aws-s3-bucket.loggingconfiguration(O)}",
            "    MetricsConfigurations : [ ${11:aws-s3-bucket.metricsconfiguration(O)} ]",
            "    NotificationConfiguration: ${12:aws-s3-bucket.notificationconfiguration(O)}",
            "    PublicAccessBlockConfiguration: ${13:aws-s3-bucket.publicaccessblockconfiguration(O)}",
            "    ReplicationConfiguration: ${14:aws-s3-bucket.replicationconfiguration(O)}",
            "    Tags : [ ${15:aws-s3-bucket.tag(O)} ]",
            "    VersioningConfiguration: ${16:aws-s3-bucket.versioningconfiguration(O)}",
            "    WebsiteConfiguration: ${17:aws-s3-bucket.websiteconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudformation-waitconditionhandle":{
        "prefix":"aws-cloudformation-waitconditionhandle",
        "body":[
            "${1:myAWSCloudFormationWaitConditionHandle}:",
            "  Type: AWS::CloudFormation::WaitConditionHandle",
            "  Properties:"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-version":{
        "prefix":"aws-lambda-version",
        "body":[
            "${1:myAWSLambdaVersion}:",
            "  Type: AWS::Lambda::Version",
            "  Properties:",
            "    CodeSha256 : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    FunctionName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-notebookinstance":{
        "prefix":"aws-sagemaker-notebookinstance",
        "body":[
            "${1:myAWSSageMakerNotebookInstance}:",
            "  Type: AWS::SageMaker::NotebookInstance",
            "  Properties:",
            "    RootAccess : ${2:String(O)}",
            "    KmsKeyId : ${3:String(O)}",
            "    VolumeSizeInGB : ${4:Integer(O)}",
            "    DirectInternetAccess : ${5:String(O)}",
            "    SubnetId : ${6:String(O)}",
            "    NotebookInstanceName : ${7:String(O)}",
            "    InstanceType : ${8:String(R)}",
            "    LifecycleConfigName : ${9:String(O)}",
            "    SecurityGroupIds : [ ${10:String(O)} ]",
            "    RoleArn : ${11:String(R)}",
            "    Tags : [ ${12:aws-sagemaker-notebookinstance.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-basepathmapping":{
        "prefix":"aws-apigateway-basepathmapping",
        "body":[
            "${1:myAWSApiGatewayBasePathMapping}:",
            "  Type: AWS::ApiGateway::BasePathMapping",
            "  Properties:",
            "    BasePath : ${2:String(O)}",
            "    DomainName : ${3:String(R)}",
            "    RestApiId : ${4:String(O)}",
            "    Stage : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool":{
        "prefix":"aws-cognito-userpool",
        "body":[
            "${1:myAWSCognitoUserPool}:",
            "  Type: AWS::Cognito::UserPool",
            "  Properties:",
            "    UserPoolTags : ${2:Json(O)}",
            "    Policies: ${3:aws-cognito-userpool.policies(O)}",
            "    MfaConfiguration : ${4:String(O)}",
            "    Schema : [ ${5:aws-cognito-userpool.schemaattribute(O)} ]",
            "    AdminCreateUserConfig: ${6:aws-cognito-userpool.admincreateuserconfig(O)}",
            "    SmsAuthenticationMessage : ${7:String(O)}",
            "    UserPoolName : ${8:String(O)}",
            "    SmsVerificationMessage : ${9:String(O)}",
            "    EmailConfiguration: ${10:aws-cognito-userpool.emailconfiguration(O)}",
            "    SmsConfiguration: ${11:aws-cognito-userpool.smsconfiguration(O)}",
            "    AliasAttributes : [ ${12:String(O)} ]",
            "    EmailVerificationSubject : ${13:String(O)}",
            "    LambdaConfig: ${14:aws-cognito-userpool.lambdaconfig(O)}",
            "    UsernameAttributes : [ ${15:String(O)} ]",
            "    AutoVerifiedAttributes : [ ${16:String(O)} ]",
            "    DeviceConfiguration: ${17:aws-cognito-userpool.deviceconfiguration(O)}",
            "    EmailVerificationMessage : ${18:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindow":{
        "prefix":"aws-ssm-maintenancewindow",
        "body":[
            "${1:myAWSSSMMaintenanceWindow}:",
            "  Type: AWS::SSM::MaintenanceWindow",
            "  Properties:",
            "    StartDate : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    AllowUnassociatedTargets : ${4:Boolean(R)}",
            "    Cutoff : ${5:Integer(R)}",
            "    Schedule : ${6:String(R)}",
            "    Duration : ${7:Integer(R)}",
            "    EndDate : ${8:String(O)}",
            "    Tags : [ ${9:aws-ssm-maintenancewindow.tag(O)} ]",
            "    Name : ${10:String(R)}",
            "    ScheduleTimezone : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudformation-macro":{
        "prefix":"aws-cloudformation-macro",
        "body":[
            "${1:myAWSCloudFormationMacro}:",
            "  Type: AWS::CloudFormation::Macro",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    FunctionName : ${3:String(R)}",
            "    LogGroupName : ${4:String(O)}",
            "    LogRoleARN : ${5:String(O)}",
            "    Name : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-egressonlyinternetgateway":{
        "prefix":"aws-ec2-egressonlyinternetgateway",
        "body":[
            "${1:myAWSEC2EgressOnlyInternetGateway}:",
            "  Type: AWS::EC2::EgressOnlyInternetGateway",
            "  Properties:",
            "    VpcId : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordsetgroup":{
        "prefix":"aws-route53-recordsetgroup",
        "body":[
            "${1:myAWSRoute53RecordSetGroup}:",
            "  Type: AWS::Route53::RecordSetGroup",
            "  Properties:",
            "    Comment : ${2:String(O)}",
            "    HostedZoneId : ${3:String(O)}",
            "    HostedZoneName : ${4:String(O)}",
            "    RecordSets : [ ${5:aws-route53-recordsetgroup.recordset(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream":{
        "prefix":"aws-kinesisfirehose-deliverystream",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream",
            "  Properties:",
            "    DeliveryStreamName : ${2:String(O)}",
            "    DeliveryStreamType : ${3:String(O)}",
            "    ElasticsearchDestinationConfiguration: ${4:aws-kinesisfirehose-deliverystream.elasticsearchdestinationconfiguration(O)}",
            "    ExtendedS3DestinationConfiguration: ${5:aws-kinesisfirehose-deliverystream.extendeds3destinationconfiguration(O)}",
            "    KinesisStreamSourceConfiguration: ${6:aws-kinesisfirehose-deliverystream.kinesisstreamsourceconfiguration(O)}",
            "    RedshiftDestinationConfiguration: ${7:aws-kinesisfirehose-deliverystream.redshiftdestinationconfiguration(O)}",
            "    S3DestinationConfiguration: ${8:aws-kinesisfirehose-deliverystream.s3destinationconfiguration(O)}",
            "    SplunkDestinationConfiguration: ${9:aws-kinesisfirehose-deliverystream.splunkdestinationconfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dlm-lifecyclepolicy":{
        "prefix":"aws-dlm-lifecyclepolicy",
        "body":[
            "${1:myAWSDLMLifecyclePolicy}:",
            "  Type: AWS::DLM::LifecyclePolicy",
            "  Properties:",
            "    ExecutionRoleArn : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    State : ${4:String(O)}",
            "    PolicyDetails: ${5:aws-dlm-lifecyclepolicy.policydetails(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-api":{
        "prefix":"aws-apigatewayv2-api",
        "body":[
            "${1:myAWSApiGatewayV2Api}:",
            "  Type: AWS::ApiGatewayV2::Api",
            "  Properties:",
            "    RouteSelectionExpression : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    Version : ${4:String(O)}",
            "    ProtocolType : ${5:String(R)}",
            "    DisableSchemaValidation : ${6:Boolean(O)}",
            "    Name : ${7:String(R)}",
            "    ApiKeySelectionExpression : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbinstance":{
        "prefix":"aws-rds-dbinstance",
        "body":[
            "${1:myAWSRDSDBInstance}:",
            "  Type: AWS::RDS::DBInstance",
            "  Properties:",
            "    AllocatedStorage : ${2:String(O)}",
            "    AllowMajorVersionUpgrade : ${3:Boolean(O)}",
            "    AutoMinorVersionUpgrade : ${4:Boolean(O)}",
            "    AvailabilityZone : ${5:String(O)}",
            "    BackupRetentionPeriod : ${6:String(O)}",
            "    CharacterSetName : ${7:String(O)}",
            "    CopyTagsToSnapshot : ${8:Boolean(O)}",
            "    DBClusterIdentifier : ${9:String(O)}",
            "    DBInstanceClass : ${10:String(R)}",
            "    DBInstanceIdentifier : ${11:String(O)}",
            "    DBName : ${12:String(O)}",
            "    DBParameterGroupName : ${13:String(O)}",
            "    DBSecurityGroups : [ ${14:String(O)} ]",
            "    DBSnapshotIdentifier : ${15:String(O)}",
            "    DBSubnetGroupName : ${16:String(O)}",
            "    DeleteAutomatedBackups : ${17:Boolean(O)}",
            "    DeletionProtection : ${18:Boolean(O)}",
            "    Domain : ${19:String(O)}",
            "    DomainIAMRoleName : ${20:String(O)}",
            "    EnableCloudwatchLogsExports : [ ${21:String(O)} ]",
            "    EnableIAMDatabaseAuthentication : ${22:Boolean(O)}",
            "    EnablePerformanceInsights : ${23:Boolean(O)}",
            "    Engine : ${24:String(O)}",
            "    EngineVersion : ${25:String(O)}",
            "    Iops : ${26:Integer(O)}",
            "    KmsKeyId : ${27:String(O)}",
            "    LicenseModel : ${28:String(O)}",
            "    MasterUserPassword : ${29:String(O)}",
            "    MasterUsername : ${30:String(O)}",
            "    MonitoringInterval : ${31:Integer(O)}",
            "    MonitoringRoleArn : ${32:String(O)}",
            "    MultiAZ : ${33:Boolean(O)}",
            "    OptionGroupName : ${34:String(O)}",
            "    PerformanceInsightsKMSKeyId : ${35:String(O)}",
            "    PerformanceInsightsRetentionPeriod : ${36:Integer(O)}",
            "    Port : ${37:String(O)}",
            "    PreferredBackupWindow : ${38:String(O)}",
            "    PreferredMaintenanceWindow : ${39:String(O)}",
            "    ProcessorFeatures : [ ${40:aws-rds-dbinstance.processorfeature(O)} ]",
            "    PromotionTier : ${41:Integer(O)}",
            "    PubliclyAccessible : ${42:Boolean(O)}",
            "    SourceDBInstanceIdentifier : ${43:String(O)}",
            "    SourceRegion : ${44:String(O)}",
            "    StorageEncrypted : ${45:Boolean(O)}",
            "    StorageType : ${46:String(O)}",
            "    Tags : [ ${47:aws-rds-dbinstance.tag(O)} ]",
            "    Timezone : ${48:String(O)}",
            "    UseDefaultProcessorFeatures : ${49:Boolean(O)}",
            "    VPCSecurityGroups : [ ${50:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-managedpolicy":{
        "prefix":"aws-iam-managedpolicy",
        "body":[
            "${1:myAWSIAMManagedPolicy}:",
            "  Type: AWS::IAM::ManagedPolicy",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Groups : [ ${3:String(O)} ]",
            "    ManagedPolicyName : ${4:String(O)}",
            "    Path : ${5:String(O)}",
            "    PolicyDocument : ${6:Json(R)}",
            "    Roles : [ ${7:String(O)} ]",
            "    Users : [ ${8:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkinterfaceattachment":{
        "prefix":"aws-ec2-networkinterfaceattachment",
        "body":[
            "${1:myAWSEC2NetworkInterfaceAttachment}:",
            "  Type: AWS::EC2::NetworkInterfaceAttachment",
            "  Properties:",
            "    DeleteOnTermination : ${2:Boolean(O)}",
            "    DeviceIndex : ${3:String(R)}",
            "    InstanceId : ${4:String(R)}",
            "    NetworkInterfaceId : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-ipset":{
        "prefix":"aws-wafregional-ipset",
        "body":[
            "${1:myAWSWAFRegionalIPSet}:",
            "  Type: AWS::WAFRegional::IPSet",
            "  Properties:",
            "    IPSetDescriptors : [ ${2:aws-wafregional-ipset.ipsetdescriptor(O)} ]",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-devicedefinitionversion":{
        "prefix":"aws-greengrass-devicedefinitionversion",
        "body":[
            "${1:myAWSGreengrassDeviceDefinitionVersion}:",
            "  Type: AWS::Greengrass::DeviceDefinitionVersion",
            "  Properties:",
            "    DeviceDefinitionId : ${2:String(R)}",
            "    Devices : [ ${3:aws-greengrass-devicedefinitionversion.device(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-robotapplication":{
        "prefix":"aws-robomaker-robotapplication",
        "body":[
            "${1:myAWSRoboMakerRobotApplication}:",
            "  Type: AWS::RoboMaker::RobotApplication",
            "  Properties:",
            "    CurrentRevisionId : ${2:String(O)}",
            "    RobotSoftwareSuite: ${3:aws-robomaker-robotapplication.robotsoftwaresuite(R)}",
            "    Sources : [ ${4:aws-robomaker-robotapplication.sourceconfig(R)} ]",
            "    Tags : ${5:Json(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-policyprincipalattachment":{
        "prefix":"aws-iot-policyprincipalattachment",
        "body":[
            "${1:myAWSIoTPolicyPrincipalAttachment}:",
            "  Type: AWS::IoT::PolicyPrincipalAttachment",
            "  Properties:",
            "    PolicyName : ${2:String(R)}",
            "    Principal : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalabletarget":{
        "prefix":"aws-applicationautoscaling-scalabletarget",
        "body":[
            "${1:myAWSApplicationAutoScalingScalableTarget}:",
            "  Type: AWS::ApplicationAutoScaling::ScalableTarget",
            "  Properties:",
            "    MaxCapacity : ${2:Integer(R)}",
            "    MinCapacity : ${3:Integer(R)}",
            "    ResourceId : ${4:String(R)}",
            "    RoleARN : ${5:String(R)}",
            "    ScalableDimension : ${6:String(R)}",
            "    ScheduledActions : [ ${7:aws-applicationautoscaling-scalabletarget.scheduledaction(O)} ]",
            "    ServiceNamespace : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-customergateway":{
        "prefix":"aws-ec2-customergateway",
        "body":[
            "${1:myAWSEC2CustomerGateway}:",
            "  Type: AWS::EC2::CustomerGateway",
            "  Properties:",
            "    BgpAsn : ${2:Integer(R)}",
            "    IpAddress : ${3:String(R)}",
            "    Tags : [ ${4:aws-ec2-customergateway.tag(O)} ]",
            "    Type : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-httpnamespace":{
        "prefix":"aws-servicediscovery-httpnamespace",
        "body":[
            "${1:myAWSServiceDiscoveryHttpNamespace}:",
            "  Type: AWS::ServiceDiscovery::HttpNamespace",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-stage":{
        "prefix":"aws-apigateway-stage",
        "body":[
            "${1:myAWSApiGatewayStage}:",
            "  Type: AWS::ApiGateway::Stage",
            "  Properties:",
            "    AccessLogSetting: ${2:aws-apigateway-stage.accesslogsetting(O)}",
            "    CacheClusterEnabled : ${3:Boolean(O)}",
            "    CacheClusterSize : ${4:String(O)}",
            "    CanarySetting: ${5:aws-apigateway-stage.canarysetting(O)}",
            "    ClientCertificateId : ${6:String(O)}",
            "    DeploymentId : ${7:String(O)}",
            "    Description : ${8:String(O)}",
            "    DocumentationVersion : ${9:String(O)}",
            "    MethodSettings : [ ${10:aws-apigateway-stage.methodsetting(O)} ]",
            "    RestApiId : ${11:String(R)}",
            "    StageName : ${12:String(O)}",
            "    Tags : [ ${13:aws-apigateway-stage.tag(O)} ]",
            "    TracingEnabled : ${14:Boolean(O)}",
            "    Variables : [ ${15:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sdb-domain":{
        "prefix":"aws-sdb-domain",
        "body":[
            "${1:myAWSSDBDomain}:",
            "  Type: AWS::SDB::Domain",
            "  Properties:",
            "    Description : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53resolver-resolverruleassociation":{
        "prefix":"aws-route53resolver-resolverruleassociation",
        "body":[
            "${1:myAWSRoute53ResolverResolverRuleAssociation}:",
            "  Type: AWS::Route53Resolver::ResolverRuleAssociation",
            "  Properties:",
            "    VPCId : ${2:String(R)}",
            "    ResolverRuleId : ${3:String(R)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpoolclient":{
        "prefix":"aws-cognito-userpoolclient",
        "body":[
            "${1:myAWSCognitoUserPoolClient}:",
            "  Type: AWS::Cognito::UserPoolClient",
            "  Properties:",
            "    GenerateSecret : ${2:Boolean(O)}",
            "    ClientName : ${3:String(O)}",
            "    UserPoolId : ${4:String(R)}",
            "    ExplicitAuthFlows : [ ${5:String(O)} ]",
            "    RefreshTokenValidity : ${6:Double(O)}",
            "    ReadAttributes : [ ${7:String(O)} ]",
            "    WriteAttributes : [ ${8:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-subscriptiondefinition":{
        "prefix":"aws-greengrass-subscriptiondefinition",
        "body":[
            "${1:myAWSGreengrassSubscriptionDefinition}:",
            "  Type: AWS::Greengrass::SubscriptionDefinition",
            "  Properties:",
            "    InitialVersion: ${2:aws-greengrass-subscriptiondefinition.subscriptiondefinitionversion(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-vpclink":{
        "prefix":"aws-apigateway-vpclink",
        "body":[
            "${1:myAWSApiGatewayVpcLink}:",
            "  Type: AWS::ApiGateway::VpcLink",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    TargetArns : [ ${3:String(R)} ]",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecr-repository":{
        "prefix":"aws-ecr-repository",
        "body":[
            "${1:myAWSECRRepository}:",
            "  Type: AWS::ECR::Repository",
            "  Properties:",
            "    LifecyclePolicy: ${2:aws-ecr-repository.lifecyclepolicy(O)}",
            "    RepositoryName : ${3:String(O)}",
            "    RepositoryPolicyText : ${4:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-trunkinterfaceassociation":{
        "prefix":"aws-ec2-trunkinterfaceassociation",
        "body":[
            "${1:myAWSEC2TrunkInterfaceAssociation}:",
            "  Type: AWS::EC2::TrunkInterfaceAssociation",
            "  Properties:",
            "    BranchInterfaceId : ${2:String(R)}",
            "    GREKey : ${3:Integer(O)}",
            "    TrunkInterfaceId : ${4:String(R)}",
            "    VLANId : ${5:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-gatewayresponse":{
        "prefix":"aws-apigateway-gatewayresponse",
        "body":[
            "${1:myAWSApiGatewayGatewayResponse}:",
            "  Type: AWS::ApiGateway::GatewayResponse",
            "  Properties:",
            "    ResponseParameters : [ ${2:String(O)} ]",
            "    ResponseTemplates : [ ${3:String(O)} ]",
            "    ResponseType : ${4:String(R)}",
            "    RestApiId : ${5:String(R)}",
            "    StatusCode : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-database":{
        "prefix":"aws-glue-database",
        "body":[
            "${1:myAWSGlueDatabase}:",
            "  Type: AWS::Glue::Database",
            "  Properties:",
            "    DatabaseInput: ${2:aws-glue-database.databaseinput(R)}",
            "    CatalogId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    ReferenceDataSource: ${3:aws-kinesisanalyticsv2-applicationreferencedatasource.referencedatasource(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-routeresponse":{
        "prefix":"aws-apigatewayv2-routeresponse",
        "body":[
            "${1:myAWSApiGatewayV2RouteResponse}:",
            "  Type: AWS::ApiGatewayV2::RouteResponse",
            "  Properties:",
            "    RouteResponseKey : ${2:String(R)}",
            "    ResponseParameters : ${3:Json(O)}",
            "    RouteId : ${4:String(R)}",
            "    ModelSelectionExpression : ${5:String(O)}",
            "    ApiId : ${6:String(R)}",
            "    ResponseModels : ${7:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-clientcertificate":{
        "prefix":"aws-apigateway-clientcertificate",
        "body":[
            "${1:myAWSApiGatewayClientCertificate}:",
            "  Type: AWS::ApiGateway::ClientCertificate",
            "  Properties:",
            "    Description : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-method":{
        "prefix":"aws-apigateway-method",
        "body":[
            "${1:myAWSApiGatewayMethod}:",
            "  Type: AWS::ApiGateway::Method",
            "  Properties:",
            "    ApiKeyRequired : ${2:Boolean(O)}",
            "    AuthorizationScopes : [ ${3:String(O)} ]",
            "    AuthorizationType : ${4:String(O)}",
            "    AuthorizerId : ${5:String(O)}",
            "    HttpMethod : ${6:String(R)}",
            "    Integration: ${7:aws-apigateway-method.integration(O)}",
            "    MethodResponses : [ ${8:aws-apigateway-method.methodresponse(O)} ]",
            "    OperationName : ${9:String(O)}",
            "    RequestModels : [ ${10:String(O)} ]",
            "    RequestParameters : [ ${11:Boolean(O)} ]",
            "    RequestValidatorId : ${12:String(O)}",
            "    ResourceId : ${13:String(R)}",
            "    RestApiId : ${14:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint":{
        "prefix":"aws-dms-endpoint",
        "body":[
            "${1:myAWSDMSEndpoint}:",
            "  Type: AWS::DMS::Endpoint",
            "  Properties:",
            "    KmsKeyId : ${2:String(O)}",
            "    Port : ${3:Integer(O)}",
            "    DatabaseName : ${4:String(O)}",
            "    ElasticsearchSettings: ${5:aws-dms-endpoint.elasticsearchsettings(O)}",
            "    S3Settings: ${6:aws-dms-endpoint.s3settings(O)}",
            "    EngineName : ${7:String(R)}",
            "    DynamoDbSettings: ${8:aws-dms-endpoint.dynamodbsettings(O)}",
            "    KinesisSettings: ${9:aws-dms-endpoint.kinesissettings(O)}",
            "    Username : ${10:String(O)}",
            "    SslMode : ${11:String(O)}",
            "    ServerName : ${12:String(O)}",
            "    ExtraConnectionAttributes : ${13:String(O)}",
            "    EndpointType : ${14:String(R)}",
            "    Tags : [ ${15:aws-dms-endpoint.tag(O)} ]",
            "    EndpointIdentifier : ${16:String(O)}",
            "    Password : ${17:String(O)}",
            "    CertificateArn : ${18:String(O)}",
            "    MongoDbSettings: ${19:aws-dms-endpoint.mongodbsettings(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-launchnotificationconstraint":{
        "prefix":"aws-servicecatalog-launchnotificationconstraint",
        "body":[
            "${1:myAWSServiceCatalogLaunchNotificationConstraint}:",
            "  Type: AWS::ServiceCatalog::LaunchNotificationConstraint",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    NotificationArns : [ ${3:String(R)} ]",
            "    AcceptLanguage : ${4:String(O)}",
            "    PortfolioId : ${5:String(R)}",
            "    ProductId : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptruleset":{
        "prefix":"aws-ses-receiptruleset",
        "body":[
            "${1:myAWSSESReceiptRuleSet}:",
            "  Type: AWS::SES::ReceiptRuleSet",
            "  Properties:",
            "    RuleSetName : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stackuserassociation":{
        "prefix":"aws-appstream-stackuserassociation",
        "body":[
            "${1:myAWSAppStreamStackUserAssociation}:",
            "  Type: AWS::AppStream::StackUserAssociation",
            "  Properties:",
            "    SendEmailNotification : ${2:Boolean(O)}",
            "    UserName : ${3:String(R)}",
            "    StackName : ${4:String(R)}",
            "    AuthenticationType : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion":{
        "prefix":"aws-greengrass-resourcedefinitionversion",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion",
            "  Properties:",
            "    Resources : [ ${2:aws-greengrass-resourcedefinitionversion.resourceinstance(R)} ]",
            "    ResourceDefinitionId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-directoryservice-simplead":{
        "prefix":"aws-directoryservice-simplead",
        "body":[
            "${1:myAWSDirectoryServiceSimpleAD}:",
            "  Type: AWS::DirectoryService::SimpleAD",
            "  Properties:",
            "    CreateAlias : ${2:Boolean(O)}",
            "    Description : ${3:String(O)}",
            "    EnableSso : ${4:Boolean(O)}",
            "    Name : ${5:String(R)}",
            "    Password : ${6:String(R)}",
            "    ShortName : ${7:String(O)}",
            "    Size : ${8:String(R)}",
            "    VpcSettings: ${9:aws-directoryservice-simplead.vpcsettings(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-loggerdefinitionversion":{
        "prefix":"aws-greengrass-loggerdefinitionversion",
        "body":[
            "${1:myAWSGreengrassLoggerDefinitionVersion}:",
            "  Type: AWS::Greengrass::LoggerDefinitionVersion",
            "  Properties:",
            "    LoggerDefinitionId : ${2:String(R)}",
            "    Loggers : [ ${3:aws-greengrass-loggerdefinitionversion.logger(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-volumeattachment":{
        "prefix":"aws-ec2-volumeattachment",
        "body":[
            "${1:myAWSEC2VolumeAttachment}:",
            "  Type: AWS::EC2::VolumeAttachment",
            "  Properties:",
            "    Device : ${2:String(R)}",
            "    InstanceId : ${3:String(R)}",
            "    VolumeId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-secrettargetattachment":{
        "prefix":"aws-secretsmanager-secrettargetattachment",
        "body":[
            "${1:myAWSSecretsManagerSecretTargetAttachment}:",
            "  Type: AWS::SecretsManager::SecretTargetAttachment",
            "  Properties:",
            "    SecretId : ${2:String(R)}",
            "    TargetType : ${3:String(R)}",
            "    TargetId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-host":{
        "prefix":"aws-ec2-host",
        "body":[
            "${1:myAWSEC2Host}:",
            "  Type: AWS::EC2::Host",
            "  Properties:",
            "    AutoPlacement : ${2:String(O)}",
            "    AvailabilityZone : ${3:String(R)}",
            "    InstanceType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbsecuritygroup":{
        "prefix":"aws-rds-dbsecuritygroup",
        "body":[
            "${1:myAWSRDSDBSecurityGroup}:",
            "  Type: AWS::RDS::DBSecurityGroup",
            "  Properties:",
            "    DBSecurityGroupIngress : [ ${2:aws-rds-dbsecuritygroup.ingress(R)} ]",
            "    EC2VpcId : ${3:String(O)}",
            "    GroupDescription : ${4:String(R)}",
            "    Tags : [ ${5:aws-rds-dbsecuritygroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-integrationresponse":{
        "prefix":"aws-apigatewayv2-integrationresponse",
        "body":[
            "${1:myAWSApiGatewayV2IntegrationResponse}:",
            "  Type: AWS::ApiGatewayV2::IntegrationResponse",
            "  Properties:",
            "    ResponseTemplates : ${2:Json(O)}",
            "    TemplateSelectionExpression : ${3:String(O)}",
            "    ResponseParameters : ${4:Json(O)}",
            "    ContentHandlingStrategy : ${5:String(O)}",
            "    IntegrationId : ${6:String(R)}",
            "    IntegrationResponseKey : ${7:String(R)}",
            "    ApiId : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kms-alias":{
        "prefix":"aws-kms-alias",
        "body":[
            "${1:myAWSKMSAlias}:",
            "  Type: AWS::KMS::Alias",
            "  Properties:",
            "    AliasName : ${2:String(R)}",
            "    TargetKeyId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition":{
        "prefix":"aws-ecs-taskdefinition",
        "body":[
            "${1:myAWSECSTaskDefinition}:",
            "  Type: AWS::ECS::TaskDefinition",
            "  Properties:",
            "    ContainerDefinitions : [ ${2:aws-ecs-taskdefinition.containerdefinition(O)} ]",
            "    Cpu : ${3:String(O)}",
            "    ExecutionRoleArn : ${4:String(O)}",
            "    Family : ${5:String(O)}",
            "    Memory : ${6:String(O)}",
            "    NetworkMode : ${7:String(O)}",
            "    PlacementConstraints : [ ${8:aws-ecs-taskdefinition.taskdefinitionplacementconstraint(O)} ]",
            "    RequiresCompatibilities : [ ${9:String(O)} ]",
            "    TaskRoleArn : ${10:String(O)}",
            "    Volumes : [ ${11:aws-ecs-taskdefinition.volume(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-clustersubnetgroup":{
        "prefix":"aws-redshift-clustersubnetgroup",
        "body":[
            "${1:myAWSRedshiftClusterSubnetGroup}:",
            "  Type: AWS::Redshift::ClusterSubnetGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    SubnetIds : [ ${3:String(R)} ]",
            "    Tags : [ ${4:aws-redshift-clustersubnetgroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-eipassociation":{
        "prefix":"aws-ec2-eipassociation",
        "body":[
            "${1:myAWSEC2EIPAssociation}:",
            "  Type: AWS::EC2::EIPAssociation",
            "  Properties:",
            "    AllocationId : ${2:String(O)}",
            "    EIP : ${3:String(O)}",
            "    InstanceId : ${4:String(O)}",
            "    NetworkInterfaceId : ${5:String(O)}",
            "    PrivateIpAddress : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpngateway":{
        "prefix":"aws-ec2-vpngateway",
        "body":[
            "${1:myAWSEC2VPNGateway}:",
            "  Type: AWS::EC2::VPNGateway",
            "  Properties:",
            "    AmazonSideAsn : ${2:Long(O)}",
            "    Tags : [ ${3:aws-ec2-vpngateway.tag(O)} ]",
            "    Type : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-cachecluster":{
        "prefix":"aws-elasticache-cachecluster",
        "body":[
            "${1:myAWSElastiCacheCacheCluster}:",
            "  Type: AWS::ElastiCache::CacheCluster",
            "  Properties:",
            "    AZMode : ${2:String(O)}",
            "    AutoMinorVersionUpgrade : ${3:Boolean(O)}",
            "    CacheNodeType : ${4:String(R)}",
            "    CacheParameterGroupName : ${5:String(O)}",
            "    CacheSecurityGroupNames : [ ${6:String(O)} ]",
            "    CacheSubnetGroupName : ${7:String(O)}",
            "    ClusterName : ${8:String(O)}",
            "    Engine : ${9:String(R)}",
            "    EngineVersion : ${10:String(O)}",
            "    NotificationTopicArn : ${11:String(O)}",
            "    NumCacheNodes : ${12:Integer(R)}",
            "    Port : ${13:Integer(O)}",
            "    PreferredAvailabilityZone : ${14:String(O)}",
            "    PreferredAvailabilityZones : [ ${15:String(O)} ]",
            "    PreferredMaintenanceWindow : ${16:String(O)}",
            "    SnapshotArns : [ ${17:String(O)} ]",
            "    SnapshotName : ${18:String(O)}",
            "    SnapshotRetentionLimit : ${19:Integer(O)}",
            "    SnapshotWindow : ${20:String(O)}",
            "    Tags : [ ${21:aws-elasticache-cachecluster.tag(O)} ]",
            "    VpcSecurityGroupIds : [ ${22:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-thingprincipalattachment":{
        "prefix":"aws-iot-thingprincipalattachment",
        "body":[
            "${1:myAWSIoTThingPrincipalAttachment}:",
            "  Type: AWS::IoT::ThingPrincipalAttachment",
            "  Properties:",
            "    Principal : ${2:String(R)}",
            "    ThingName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-detector":{
        "prefix":"aws-guardduty-detector",
        "body":[
            "${1:myAWSGuardDutyDetector}:",
            "  Type: AWS::GuardDuty::Detector",
            "  Properties:",
            "    FindingPublishingFrequency : ${2:String(O)}",
            "    Enable : ${3:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-docdb-dbclusterparametergroup":{
        "prefix":"aws-docdb-dbclusterparametergroup",
        "body":[
            "${1:myAWSDocDBDBClusterParameterGroup}:",
            "  Type: AWS::DocDB::DBClusterParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Parameters : ${3:Json(R)}",
            "    Family : ${4:String(R)}",
            "    Tags : [ ${5:aws-docdb-dbclusterparametergroup.tag(O)} ]",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-privatednsnamespace":{
        "prefix":"aws-servicediscovery-privatednsnamespace",
        "body":[
            "${1:myAWSServiceDiscoveryPrivateDnsNamespace}:",
            "  Type: AWS::ServiceDiscovery::PrivateDnsNamespace",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Vpc : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-applicationversion":{
        "prefix":"aws-elasticbeanstalk-applicationversion",
        "body":[
            "${1:myAWSElasticBeanstalkApplicationVersion}:",
            "  Type: AWS::ElasticBeanstalk::ApplicationVersion",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    SourceBundle: ${4:aws-elasticbeanstalk-applicationversion.sourcebundle(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcendpoint":{
        "prefix":"aws-ec2-vpcendpoint",
        "body":[
            "${1:myAWSEC2VPCEndpoint}:",
            "  Type: AWS::EC2::VPCEndpoint",
            "  Properties:",
            "    PolicyDocument : ${2:Json(O)}",
            "    PrivateDnsEnabled : ${3:Boolean(O)}",
            "    RouteTableIds : [ ${4:String(O)} ]",
            "    SecurityGroupIds : [ ${5:String(O)} ]",
            "    ServiceName : ${6:String(R)}",
            "    SubnetIds : [ ${7:String(O)} ]",
            "    VpcEndpointType : ${8:String(O)}",
            "    VpcId : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-devendpoint":{
        "prefix":"aws-glue-devendpoint",
        "body":[
            "${1:myAWSGlueDevEndpoint}:",
            "  Type: AWS::Glue::DevEndpoint",
            "  Properties:",
            "    ExtraJarsS3Path : ${2:String(O)}",
            "    EndpointName : ${3:String(O)}",
            "    PublicKey : ${4:String(R)}",
            "    NumberOfNodes : ${5:Integer(O)}",
            "    SubnetId : ${6:String(O)}",
            "    ExtraPythonLibsS3Path : ${7:String(O)}",
            "    SecurityGroupIds : [ ${8:String(O)} ]",
            "    RoleArn : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-userprofile":{
        "prefix":"aws-opsworks-userprofile",
        "body":[
            "${1:myAWSOpsWorksUserProfile}:",
            "  Type: AWS::OpsWorks::UserProfile",
            "  Properties:",
            "    AllowSelfManagement : ${2:Boolean(O)}",
            "    IamUserArn : ${3:String(R)}",
            "    SshPublicKey : ${4:String(O)}",
            "    SshUsername : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-targetgroup":{
        "prefix":"aws-elasticloadbalancingv2-targetgroup",
        "body":[
            "${1:myAWSElasticLoadBalancingV2TargetGroup}:",
            "  Type: AWS::ElasticLoadBalancingV2::TargetGroup",
            "  Properties:",
            "    HealthCheckEnabled : ${2:Boolean(O)}",
            "    HealthCheckIntervalSeconds : ${3:Integer(O)}",
            "    HealthCheckPath : ${4:String(O)}",
            "    HealthCheckPort : ${5:String(O)}",
            "    HealthCheckProtocol : ${6:String(O)}",
            "    HealthCheckTimeoutSeconds : ${7:Integer(O)}",
            "    HealthyThresholdCount : ${8:Integer(O)}",
            "    Matcher: ${9:aws-elasticloadbalancingv2-targetgroup.matcher(O)}",
            "    Name : ${10:String(O)}",
            "    Port : ${11:Integer(O)}",
            "    Protocol : ${12:String(O)}",
            "    Tags : [ ${13:aws-elasticloadbalancingv2-targetgroup.tag(O)} ]",
            "    TargetGroupAttributes : [ ${14:aws-elasticloadbalancingv2-targetgroup.targetgroupattribute(O)} ]",
            "    TargetType : ${15:String(O)}",
            "    Targets : [ ${16:aws-elasticloadbalancingv2-targetgroup.targetdescription(O)} ]",
            "    UnhealthyThresholdCount : ${17:Integer(O)}",
            "    VpcId : ${18:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-neptune-dbsubnetgroup":{
        "prefix":"aws-neptune-dbsubnetgroup",
        "body":[
            "${1:myAWSNeptuneDBSubnetGroup}:",
            "  Type: AWS::Neptune::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupName : ${2:String(O)}",
            "    DBSubnetGroupDescription : ${3:String(R)}",
            "    SubnetIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-neptune-dbsubnetgroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-user":{
        "prefix":"aws-appstream-user",
        "body":[
            "${1:myAWSAppStreamUser}:",
            "  Type: AWS::AppStream::User",
            "  Properties:",
            "    UserName : ${2:String(R)}",
            "    FirstName : ${3:String(O)}",
            "    MessageAction : ${4:String(O)}",
            "    LastName : ${5:String(O)}",
            "    AuthenticationType : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcgatewayattachment":{
        "prefix":"aws-ec2-vpcgatewayattachment",
        "body":[
            "${1:myAWSEC2VPCGatewayAttachment}:",
            "  Type: AWS::EC2::VPCGatewayAttachment",
            "  Properties:",
            "    InternetGatewayId : ${2:String(O)}",
            "    VpcId : ${3:String(R)}",
            "    VpnGatewayId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-robot":{
        "prefix":"aws-robomaker-robot",
        "body":[
            "${1:myAWSRoboMakerRobot}:",
            "  Type: AWS::RoboMaker::Robot",
            "  Properties:",
            "    Fleet : ${2:String(O)}",
            "    Architecture : ${3:String(R)}",
            "    GreengrassGroupId : ${4:String(R)}",
            "    Tags : ${5:Json(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application":{
        "prefix":"aws-kinesisanalyticsv2-application",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application}:",
            "  Type: AWS::KinesisAnalyticsV2::Application",
            "  Properties:",
            "    ApplicationName : ${2:String(O)}",
            "    RuntimeEnvironment : ${3:String(R)}",
            "    ApplicationConfiguration: ${4:aws-kinesisanalyticsv2-application.applicationconfiguration(O)}",
            "    ApplicationDescription : ${5:String(O)}",
            "    ServiceExecutionRole : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpnconnection":{
        "prefix":"aws-ec2-vpnconnection",
        "body":[
            "${1:myAWSEC2VPNConnection}:",
            "  Type: AWS::EC2::VPNConnection",
            "  Properties:",
            "    CustomerGatewayId : ${2:String(R)}",
            "    StaticRoutesOnly : ${3:Boolean(O)}",
            "    Tags : [ ${4:aws-ec2-vpnconnection.tag(O)} ]",
            "    Type : ${5:String(R)}",
            "    VpnGatewayId : ${6:String(R)}",
            "    VpnTunnelOptionsSpecifications : [ ${7:aws-ec2-vpnconnection.vpntunneloptionsspecification(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-trigger":{
        "prefix":"aws-glue-trigger",
        "body":[
            "${1:myAWSGlueTrigger}:",
            "  Type: AWS::Glue::Trigger",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    Actions : [ ${4:aws-glue-trigger.action(R)} ]",
            "    Schedule : ${5:String(O)}",
            "    Name : ${6:String(O)}",
            "    Predicate: ${7:aws-glue-trigger.predicate(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpccidrblock":{
        "prefix":"aws-ec2-vpccidrblock",
        "body":[
            "${1:myAWSEC2VPCCidrBlock}:",
            "  Type: AWS::EC2::VPCCidrBlock",
            "  Properties:",
            "    AmazonProvidedIpv6CidrBlock : ${2:Boolean(O)}",
            "    CidrBlock : ${3:String(O)}",
            "    VpcId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-parameter":{
        "prefix":"aws-ssm-parameter",
        "body":[
            "${1:myAWSSSMParameter}:",
            "  Type: AWS::SSM::Parameter",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    AllowedPattern : ${4:String(O)}",
            "    Value : ${5:String(R)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-inspector-assessmenttemplate":{
        "prefix":"aws-inspector-assessmenttemplate",
        "body":[
            "${1:myAWSInspectorAssessmentTemplate}:",
            "  Type: AWS::Inspector::AssessmentTemplate",
            "  Properties:",
            "    AssessmentTargetArn : ${2:String(R)}",
            "    DurationInSeconds : ${3:Integer(R)}",
            "    AssessmentTemplateName : ${4:String(O)}",
            "    RulesPackageArns : [ ${5:String(R)} ]",
            "    UserAttributesForFindings : [ ${6:aws-inspector-assessmenttemplate.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-mesh":{
        "prefix":"aws-appmesh-mesh",
        "body":[
            "${1:myAWSAppMeshMesh}:",
            "  Type: AWS::AppMesh::Mesh",
            "  Properties:",
            "    MeshName : ${2:String(R)}",
            "    Spec: ${3:aws-appmesh-mesh.meshspec(O)}",
            "    Tags : [ ${4:aws-appmesh-mesh.tagref(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-fleet":{
        "prefix":"aws-appstream-fleet",
        "body":[
            "${1:myAWSAppStreamFleet}:",
            "  Type: AWS::AppStream::Fleet",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    ComputeCapacity: ${3:aws-appstream-fleet.computecapacity(R)}",
            "    VpcConfig: ${4:aws-appstream-fleet.vpcconfig(O)}",
            "    FleetType : ${5:String(O)}",
            "    EnableDefaultInternetAccess : ${6:Boolean(O)}",
            "    DomainJoinInfo: ${7:aws-appstream-fleet.domainjoininfo(O)}",
            "    Name : ${8:String(O)}",
            "    ImageName : ${9:String(O)}",
            "    MaxUserDurationInSeconds : ${10:Integer(O)}",
            "    DisconnectTimeoutInSeconds : ${11:Integer(O)}",
            "    DisplayName : ${12:String(O)}",
            "    InstanceType : ${13:String(R)}",
            "    Tags : [ ${14:aws-appstream-fleet.tag(O)} ]",
            "    ImageArn : ${15:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-subscriptionfilter":{
        "prefix":"aws-logs-subscriptionfilter",
        "body":[
            "${1:myAWSLogsSubscriptionFilter}:",
            "  Type: AWS::Logs::SubscriptionFilter",
            "  Properties:",
            "    DestinationArn : ${2:String(R)}",
            "    FilterPattern : ${3:String(R)}",
            "    LogGroupName : ${4:String(R)}",
            "    RoleArn : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion":{
        "prefix":"aws-greengrass-functiondefinitionversion",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion",
            "  Properties:",
            "    DefaultConfig: ${2:aws-greengrass-functiondefinitionversion.defaultconfig(O)}",
            "    Functions : [ ${3:aws-greengrass-functiondefinitionversion.function(R)} ]",
            "    FunctionDefinitionId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    ReferenceDataSource: ${3:aws-kinesisanalytics-applicationreferencedatasource.referencedatasource(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-resourcedatasync":{
        "prefix":"aws-ssm-resourcedatasync",
        "body":[
            "${1:myAWSSSMResourceDataSync}:",
            "  Type: AWS::SSM::ResourceDataSync",
            "  Properties:",
            "    KMSKeyArn : ${2:String(O)}",
            "    BucketName : ${3:String(R)}",
            "    BucketRegion : ${4:String(R)}",
            "    SyncFormat : ${5:String(R)}",
            "    SyncName : ${6:String(R)}",
            "    BucketPrefix : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-configuration":{
        "prefix":"aws-amazonmq-configuration",
        "body":[
            "${1:myAWSAmazonMQConfiguration}:",
            "  Type: AWS::AmazonMQ::Configuration",
            "  Properties:",
            "    EngineVersion : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    EngineType : ${4:String(R)}",
            "    Data : ${5:String(R)}",
            "    Tags : [ ${6:aws-amazonmq-configuration.tagsentry(O)} ]",
            "    Name : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application":{
        "prefix":"aws-kinesisanalytics-application",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication}:",
            "  Type: AWS::KinesisAnalytics::Application",
            "  Properties:",
            "    ApplicationName : ${2:String(O)}",
            "    Inputs : [ ${3:aws-kinesisanalytics-application.input(R)} ]",
            "    ApplicationDescription : ${4:String(O)}",
            "    ApplicationCode : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table":{
        "prefix":"aws-dynamodb-table",
        "body":[
            "${1:myAWSDynamoDBTable}:",
            "  Type: AWS::DynamoDB::Table",
            "  Properties:",
            "    AttributeDefinitions : [ ${2:aws-dynamodb-table.attributedefinition(O)} ]",
            "    BillingMode : ${3:String(O)}",
            "    GlobalSecondaryIndexes : [ ${4:aws-dynamodb-table.globalsecondaryindex(O)} ]",
            "    KeySchema : [ ${5:aws-dynamodb-table.keyschema(R)} ]",
            "    LocalSecondaryIndexes : [ ${6:aws-dynamodb-table.localsecondaryindex(O)} ]",
            "    PointInTimeRecoverySpecification: ${7:aws-dynamodb-table.pointintimerecoveryspecification(O)}",
            "    ProvisionedThroughput: ${8:aws-dynamodb-table.provisionedthroughput(O)}",
            "    SSESpecification: ${9:aws-dynamodb-table.ssespecification(O)}",
            "    StreamSpecification: ${10:aws-dynamodb-table.streamspecification(O)}",
            "    TableName : ${11:String(O)}",
            "    Tags : [ ${12:aws-dynamodb-table.tag(O)} ]",
            "    TimeToLiveSpecification: ${13:aws-dynamodb-table.timetolivespecification(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-destination":{
        "prefix":"aws-logs-destination",
        "body":[
            "${1:myAWSLogsDestination}:",
            "  Type: AWS::Logs::Destination",
            "  Properties:",
            "    DestinationName : ${2:String(R)}",
            "    DestinationPolicy : ${3:String(R)}",
            "    RoleArn : ${4:String(R)}",
            "    TargetArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-clustersecuritygroup":{
        "prefix":"aws-redshift-clustersecuritygroup",
        "body":[
            "${1:myAWSRedshiftClusterSecurityGroup}:",
            "  Type: AWS::Redshift::ClusterSecurityGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Tags : [ ${3:aws-redshift-clustersecuritygroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet":{
        "prefix":"aws-ec2-ec2fleet",
        "body":[
            "${1:myAWSEC2EC2Fleet}:",
            "  Type: AWS::EC2::EC2Fleet",
            "  Properties:",
            "    TargetCapacitySpecification: ${2:aws-ec2-ec2fleet.targetcapacityspecificationrequest(R)}",
            "    OnDemandOptions: ${3:aws-ec2-ec2fleet.ondemandoptionsrequest(O)}",
            "    Type : ${4:String(O)}",
            "    ExcessCapacityTerminationPolicy : ${5:String(O)}",
            "    TagSpecifications : [ ${6:aws-ec2-ec2fleet.tagspecification(O)} ]",
            "    SpotOptions: ${7:aws-ec2-ec2fleet.spotoptionsrequest(O)}",
            "    ValidFrom : ${8:String(O)}",
            "    ReplaceUnhealthyInstances : ${9:Boolean(O)}",
            "    LaunchTemplateConfigs : [ ${10:aws-ec2-ec2fleet.fleetlaunchtemplateconfigrequest(R)} ]",
            "    TerminateInstancesWithExpiration : ${11:Boolean(O)}",
            "    ValidUntil : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-transitgatewayroutetable":{
        "prefix":"aws-ec2-transitgatewayroutetable",
        "body":[
            "${1:myAWSEC2TransitGatewayRouteTable}:",
            "  Type: AWS::EC2::TransitGatewayRouteTable",
            "  Properties:",
            "    TransitGatewayId : ${2:String(R)}",
            "    Tags : [ ${3:aws-ec2-transitgatewayroutetable.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-xssmatchset":{
        "prefix":"aws-waf-xssmatchset",
        "body":[
            "${1:myAWSWAFXssMatchSet}:",
            "  Type: AWS::WAF::XssMatchSet",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    XssMatchTuples : [ ${3:aws-waf-xssmatchset.xssmatchtuple(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-groupversion":{
        "prefix":"aws-greengrass-groupversion",
        "body":[
            "${1:myAWSGreengrassGroupVersion}:",
            "  Type: AWS::Greengrass::GroupVersion",
            "  Properties:",
            "    LoggerDefinitionVersionArn : ${2:String(O)}",
            "    DeviceDefinitionVersionArn : ${3:String(O)}",
            "    FunctionDefinitionVersionArn : ${4:String(O)}",
            "    CoreDefinitionVersionArn : ${5:String(O)}",
            "    ResourceDefinitionVersionArn : ${6:String(O)}",
            "    ConnectorDefinitionVersionArn : ${7:String(O)}",
            "    SubscriptionDefinitionVersionArn : ${8:String(O)}",
            "    GroupId : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-healthcheck":{
        "prefix":"aws-route53-healthcheck",
        "body":[
            "${1:myAWSRoute53HealthCheck}:",
            "  Type: AWS::Route53::HealthCheck",
            "  Properties:",
            "    HealthCheckConfig: ${2:aws-route53-healthcheck.healthcheckconfig(R)}",
            "    HealthCheckTags : [ ${3:aws-route53-healthcheck.healthchecktag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-permission":{
        "prefix":"aws-lambda-permission",
        "body":[
            "${1:myAWSLambdaPermission}:",
            "  Type: AWS::Lambda::Permission",
            "  Properties:",
            "    Action : ${2:String(R)}",
            "    EventSourceToken : ${3:String(O)}",
            "    FunctionName : ${4:String(R)}",
            "    Principal : ${5:String(R)}",
            "    SourceAccount : ${6:String(O)}",
            "    SourceArn : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-ipset":{
        "prefix":"aws-guardduty-ipset",
        "body":[
            "${1:myAWSGuardDutyIPSet}:",
            "  Type: AWS::GuardDuty::IPSet",
            "  Properties:",
            "    Format : ${2:String(R)}",
            "    Activate : ${3:Boolean(R)}",
            "    DetectorId : ${4:String(R)}",
            "    Name : ${5:String(O)}",
            "    Location : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-certificate":{
        "prefix":"aws-iot-certificate",
        "body":[
            "${1:myAWSIoTCertificate}:",
            "  Type: AWS::IoT::Certificate",
            "  Properties:",
            "    CertificateSigningRequest : ${2:String(R)}",
            "    Status : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-association":{
        "prefix":"aws-ssm-association",
        "body":[
            "${1:myAWSSSMAssociation}:",
            "  Type: AWS::SSM::Association",
            "  Properties:",
            "    AssociationName : ${2:String(O)}",
            "    DocumentVersion : ${3:String(O)}",
            "    InstanceId : ${4:String(O)}",
            "    Name : ${5:String(R)}",
            "    OutputLocation: ${6:aws-ssm-association.instanceassociationoutputlocation(O)}",
            "    Parameters : [ ${7:aws-ssm-association.parametervalues(O)} ]",
            "    ScheduleExpression : ${8:String(O)}",
            "    Targets : [ ${9:aws-ssm-association.target(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-neptune-dbinstance":{
        "prefix":"aws-neptune-dbinstance",
        "body":[
            "${1:myAWSNeptuneDBInstance}:",
            "  Type: AWS::Neptune::DBInstance",
            "  Properties:",
            "    DBParameterGroupName : ${2:String(O)}",
            "    DBInstanceClass : ${3:String(R)}",
            "    AllowMajorVersionUpgrade : ${4:Boolean(O)}",
            "    DBClusterIdentifier : ${5:String(O)}",
            "    AvailabilityZone : ${6:String(O)}",
            "    PreferredMaintenanceWindow : ${7:String(O)}",
            "    AutoMinorVersionUpgrade : ${8:Boolean(O)}",
            "    DBSubnetGroupName : ${9:String(O)}",
            "    DBInstanceIdentifier : ${10:String(O)}",
            "    DBSnapshotIdentifier : ${11:String(O)}",
            "    Tags : [ ${12:aws-neptune-dbinstance.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbclusterparametergroup":{
        "prefix":"aws-rds-dbclusterparametergroup",
        "body":[
            "${1:myAWSRDSDBClusterParameterGroup}:",
            "  Type: AWS::RDS::DBClusterParameterGroup",
            "  Properties:",
            "    Description : ${2:String(R)}",
            "    Family : ${3:String(R)}",
            "    Parameters : ${4:Json(R)}",
            "    Tags : [ ${5:aws-rds-dbclusterparametergroup.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-athena-namedquery":{
        "prefix":"aws-athena-namedquery",
        "body":[
            "${1:myAWSAthenaNamedQuery}:",
            "  Type: AWS::Athena::NamedQuery",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    QueryString : ${3:String(R)}",
            "    Database : ${4:String(R)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesis-streamconsumer":{
        "prefix":"aws-kinesis-streamconsumer",
        "body":[
            "${1:myAWSKinesisStreamConsumer}:",
            "  Type: AWS::Kinesis::StreamConsumer",
            "  Properties:",
            "    ConsumerName : ${2:String(R)}",
            "    StreamARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-master":{
        "prefix":"aws-guardduty-master",
        "body":[
            "${1:myAWSGuardDutyMaster}:",
            "  Type: AWS::GuardDuty::Master",
            "  Properties:",
            "    DetectorId : ${2:String(R)}",
            "    MasterId : ${3:String(R)}",
            "    InvitationId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-inspector-assessmenttarget":{
        "prefix":"aws-inspector-assessmenttarget",
        "body":[
            "${1:myAWSInspectorAssessmentTarget}:",
            "  Type: AWS::Inspector::AssessmentTarget",
            "  Properties:",
            "    AssessmentTargetName : ${2:String(O)}",
            "    ResourceGroupArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucketpolicy":{
        "prefix":"aws-s3-bucketpolicy",
        "body":[
            "${1:myAWSS3BucketPolicy}:",
            "  Type: AWS::S3::BucketPolicy",
            "  Properties:",
            "    Bucket : ${2:String(R)}",
            "    PolicyDocument : ${3:Json(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup":{
        "prefix":"aws-autoscaling-autoscalinggroup",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup",
            "  Properties:",
            "    AutoScalingGroupName : ${2:String(O)}",
            "    AvailabilityZones : [ ${3:String(O)} ]",
            "    Cooldown : ${4:String(O)}",
            "    DesiredCapacity : ${5:String(O)}",
            "    HealthCheckGracePeriod : ${6:Integer(O)}",
            "    HealthCheckType : ${7:String(O)}",
            "    InstanceId : ${8:String(O)}",
            "    LaunchConfigurationName : ${9:String(O)}",
            "    LaunchTemplate: ${10:aws-autoscaling-autoscalinggroup.launchtemplatespecification(O)}",
            "    LifecycleHookSpecificationList : [ ${11:aws-autoscaling-autoscalinggroup.lifecyclehookspecification(O)} ]",
            "    LoadBalancerNames : [ ${12:String(O)} ]",
            "    MaxSize : ${13:String(R)}",
            "    MetricsCollection : [ ${14:aws-autoscaling-autoscalinggroup.metricscollection(O)} ]",
            "    MinSize : ${15:String(R)}",
            "    MixedInstancesPolicy: ${16:aws-autoscaling-autoscalinggroup.mixedinstancespolicy(O)}",
            "    NotificationConfigurations : [ ${17:aws-autoscaling-autoscalinggroup.notificationconfiguration(O)} ]",
            "    PlacementGroup : ${18:String(O)}",
            "    ServiceLinkedRoleARN : ${19:String(O)}",
            "    Tags : [ ${20:aws-autoscaling-autoscalinggroup.tagproperty(O)} ]",
            "    TargetGroupARNs : [ ${21:String(O)} ]",
            "    TerminationPolicies : [ ${22:String(O)} ]",
            "    VPCZoneIdentifier : [ ${23:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudformation-customresource":{
        "prefix":"aws-cloudformation-customresource",
        "body":[
            "${1:myAWSCloudFormationCustomResource}:",
            "  Type: AWS::CloudFormation::CustomResource",
            "  Properties:",
            "    ServiceToken : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53resolver-resolverendpoint":{
        "prefix":"aws-route53resolver-resolverendpoint",
        "body":[
            "${1:myAWSRoute53ResolverResolverEndpoint}:",
            "  Type: AWS::Route53Resolver::ResolverEndpoint",
            "  Properties:",
            "    IpAddresses : [ ${2:aws-route53resolver-resolverendpoint.ipaddressrequest(R)} ]",
            "    Direction : ${3:String(R)}",
            "    SecurityGroupIds : [ ${4:String(R)} ]",
            "    Tags : [ ${5:aws-route53resolver-resolverendpoint.tag(O)} ]",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler":{
        "prefix":"aws-glue-crawler",
        "body":[
            "${1:myAWSGlueCrawler}:",
            "  Type: AWS::Glue::Crawler",
            "  Properties:",
            "    Role : ${2:String(R)}",
            "    Classifiers : [ ${3:String(O)} ]",
            "    Description : ${4:String(O)}",
            "    SchemaChangePolicy: ${5:aws-glue-crawler.schemachangepolicy(O)}",
            "    Configuration : ${6:String(O)}",
            "    Schedule: ${7:aws-glue-crawler.schedule(O)}",
            "    DatabaseName : ${8:String(R)}",
            "    Targets: ${9:aws-glue-crawler.targets(R)}",
            "    TablePrefix : ${10:String(O)}",
            "    Name : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-documentationversion":{
        "prefix":"aws-apigateway-documentationversion",
        "body":[
            "${1:myAWSApiGatewayDocumentationVersion}:",
            "  Type: AWS::ApiGateway::DocumentationVersion",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    DocumentationVersion : ${3:String(R)}",
            "    RestApiId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpcdhcpoptionsassociation":{
        "prefix":"aws-ec2-vpcdhcpoptionsassociation",
        "body":[
            "${1:myAWSEC2VPCDHCPOptionsAssociation}:",
            "  Type: AWS::EC2::VPCDHCPOptionsAssociation",
            "  Properties:",
            "    DhcpOptionsId : ${2:String(R)}",
            "    VpcId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask":{
        "prefix":"aws-ssm-maintenancewindowtask",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask}:",
            "  Type: AWS::SSM::MaintenanceWindowTask",
            "  Properties:",
            "    MaxErrors : ${2:String(R)}",
            "    Description : ${3:String(O)}",
            "    ServiceRoleArn : ${4:String(R)}",
            "    Priority : ${5:Integer(R)}",
            "    MaxConcurrency : ${6:String(R)}",
            "    Targets : [ ${7:aws-ssm-maintenancewindowtask.target(R)} ]",
            "    Name : ${8:String(O)}",
            "    TaskArn : ${9:String(R)}",
            "    TaskInvocationParameters: ${10:aws-ssm-maintenancewindowtask.taskinvocationparameters(O)}",
            "    WindowId : ${11:String(O)}",
            "    TaskParameters : ${12:Json(O)}",
            "    TaskType : ${13:String(R)}",
            "    LoggingInfo: ${14:aws-ssm-maintenancewindowtask.logginginfo(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-replicationtask":{
        "prefix":"aws-dms-replicationtask",
        "body":[
            "${1:myAWSDMSReplicationTask}:",
            "  Type: AWS::DMS::ReplicationTask",
            "  Properties:",
            "    ReplicationTaskSettings : ${2:String(O)}",
            "    TableMappings : ${3:String(R)}",
            "    ReplicationTaskIdentifier : ${4:String(O)}",
            "    SourceEndpointArn : ${5:String(R)}",
            "    MigrationType : ${6:String(R)}",
            "    TargetEndpointArn : ${7:String(R)}",
            "    ReplicationInstanceArn : ${8:String(R)}",
            "    Tags : [ ${9:aws-dms-replicationtask.tag(O)} ]",
            "    CdcStartTime : ${10:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-publicdnsnamespace":{
        "prefix":"aws-servicediscovery-publicdnsnamespace",
        "body":[
            "${1:myAWSServiceDiscoveryPublicDnsNamespace}:",
            "  Type: AWS::ServiceDiscovery::PublicDnsNamespace",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-usageplankey":{
        "prefix":"aws-apigateway-usageplankey",
        "body":[
            "${1:myAWSApiGatewayUsagePlanKey}:",
            "  Type: AWS::ApiGateway::UsagePlanKey",
            "  Properties:",
            "    KeyId : ${2:String(R)}",
            "    KeyType : ${3:String(R)}",
            "    UsagePlanId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-securityconfiguration":{
        "prefix":"aws-emr-securityconfiguration",
        "body":[
            "${1:myAWSEMRSecurityConfiguration}:",
            "  Type: AWS::EMR::SecurityConfiguration",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    SecurityConfiguration : ${3:Json(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpoolusertogroupattachment":{
        "prefix":"aws-cognito-userpoolusertogroupattachment",
        "body":[
            "${1:myAWSCognitoUserPoolUserToGroupAttachment}:",
            "  Type: AWS::Cognito::UserPoolUserToGroupAttachment",
            "  Properties:",
            "    GroupName : ${2:String(R)}",
            "    UserPoolId : ${3:String(R)}",
            "    Username : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-replicationinstance":{
        "prefix":"aws-dms-replicationinstance",
        "body":[
            "${1:myAWSDMSReplicationInstance}:",
            "  Type: AWS::DMS::ReplicationInstance",
            "  Properties:",
            "    ReplicationInstanceIdentifier : ${2:String(O)}",
            "    EngineVersion : ${3:String(O)}",
            "    KmsKeyId : ${4:String(O)}",
            "    AvailabilityZone : ${5:String(O)}",
            "    PreferredMaintenanceWindow : ${6:String(O)}",
            "    AutoMinorVersionUpgrade : ${7:Boolean(O)}",
            "    ReplicationSubnetGroupIdentifier : ${8:String(O)}",
            "    AllocatedStorage : ${9:Integer(O)}",
            "    VpcSecurityGroupIds : [ ${10:String(O)} ]",
            "    AllowMajorVersionUpgrade : ${11:Boolean(O)}",
            "    ReplicationInstanceClass : ${12:String(R)}",
            "    PubliclyAccessible : ${13:Boolean(O)}",
            "    MultiAZ : ${14:Boolean(O)}",
            "    Tags : [ ${15:aws-dms-replicationinstance.tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scheduledaction":{
        "prefix":"aws-autoscaling-scheduledaction",
        "body":[
            "${1:myAWSAutoScalingScheduledAction}:",
            "  Type: AWS::AutoScaling::ScheduledAction",
            "  Properties:",
            "    AutoScalingGroupName : ${2:String(R)}",
            "    DesiredCapacity : ${3:Integer(O)}",
            "    EndTime : ${4:String(O)}",
            "    MaxSize : ${5:Integer(O)}",
            "    MinSize : ${6:Integer(O)}",
            "    Recurrence : ${7:String(O)}",
            "    StartTime : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-classifier":{
        "prefix":"aws-glue-classifier",
        "body":[
            "${1:myAWSGlueClassifier}:",
            "  Type: AWS::Glue::Classifier",
            "  Properties:",
            "    XMLClassifier: ${2:aws-glue-classifier.xmlclassifier(O)}",
            "    JsonClassifier: ${3:aws-glue-classifier.jsonclassifier(O)}",
            "    GrokClassifier: ${4:aws-glue-classifier.grokclassifier(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-fleet":{
        "prefix":"aws-robomaker-fleet",
        "body":[
            "${1:myAWSRoboMakerFleet}:",
            "  Type: AWS::RoboMaker::Fleet",
            "  Properties:",
            "    Tags : ${2:Json(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-fsx-filesystem.tagentry":{
        "prefix":"aws-fsx-filesystem.tagentry",
        "body":[
            "${1:myAWSFSxFileSystem.TagEntry}:",
            "  Type: AWS::FSx::FileSystem.TagEntry",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualrouter.portmapping":{
        "prefix":"aws-appmesh-virtualrouter.portmapping",
        "body":[
            "${1:myAWSAppMeshVirtualRouter.PortMapping}:",
            "  Type: AWS::AppMesh::VirtualRouter.PortMapping",
            "  Properties:",
            "    Port : ${2:Integer(R)}",
            "    Protocol : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-bytematchset.bytematchtuple":{
        "prefix":"aws-wafregional-bytematchset.bytematchtuple",
        "body":[
            "${1:myAWSWAFRegionalByteMatchSet.ByteMatchTuple}:",
            "  Type: AWS::WAFRegional::ByteMatchSet.ByteMatchTuple",
            "  Properties:",
            "    TargetString : ${2:String(O)}",
            "    TargetStringBase64 : ${3:String(O)}",
            "    PositionalConstraint : ${4:String(R)}",
            "    TextTransformation : ${5:String(R)}",
            "    FieldToMatch : ${6:aws-wafregional-bytematchsetbytematchtuple.FieldToMatch(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-coredefinition.core":{
        "prefix":"aws-greengrass-coredefinition.core",
        "body":[
            "${1:myAWSGreengrassCoreDefinition.Core}:",
            "  Type: AWS::Greengrass::CoreDefinition.Core",
            "  Properties:",
            "    SyncShadow : ${2:Boolean(O)}",
            "    ThingArn : ${3:String(R)}",
            "    Id : ${4:String(R)}",
            "    CertificateArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenercertificate.certificate":{
        "prefix":"aws-elasticloadbalancingv2-listenercertificate.certificate",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerCertificate.Certificate}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerCertificate.Certificate",
            "  Properties:",
            "    CertificateArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "alexa-ask-skill.skillpackage":{
        "prefix":"alexa-ask-skill.skillpackage",
        "body":[
            "${1:myAlexaASKSkill.SkillPackage}:",
            "  Type: Alexa::ASK::Skill.SkillPackage",
            "  Properties:",
            "    S3BucketRole : ${2:String(O)}",
            "    S3ObjectVersion : ${3:String(O)}",
            "    S3Bucket : ${4:String(R)}",
            "    S3Key : ${5:String(R)}",
            "    Overrides : ${6:alexa-ask-skillskillpackage.Overrides(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.inputartifact":{
        "prefix":"aws-codepipeline-pipeline.inputartifact",
        "body":[
            "${1:myAWSCodePipelinePipeline.InputArtifact}:",
            "  Type: AWS::CodePipeline::Pipeline.InputArtifact",
            "  Properties:",
            "    Name : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.bucketencryption":{
        "prefix":"aws-s3-bucket.bucketencryption",
        "body":[
            "${1:myAWSS3Bucket.BucketEncryption}:",
            "  Type: AWS::S3::Bucket.BucketEncryption",
            "  Properties:",
            "    ServerSideEncryptionConfiguration : [ ${2:aws-s3-bucketbucketencryption.ServerSideEncryptionRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.functionconfiguration":{
        "prefix":"aws-greengrass-functiondefinitionversion.functionconfiguration",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.FunctionConfiguration}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration",
            "  Properties:",
            "    MemorySize : ${2:Integer(R)}",
            "    Pinned : ${3:Boolean(O)}",
            "    ExecArgs : ${4:String(O)}",
            "    Timeout : ${5:Integer(R)}",
            "    EncodingType : ${6:String(O)}",
            "    Environment : ${7:aws-greengrass-functiondefinitionversionfunctionconfiguration.Environment(O)}",
            "    Executable : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-environment.optionsetting":{
        "prefix":"aws-elasticbeanstalk-environment.optionsetting",
        "body":[
            "${1:myAWSElasticBeanstalkEnvironment.OptionSetting}:",
            "  Type: AWS::ElasticBeanstalk::Environment.OptionSetting",
            "  Properties:",
            "    Namespace : ${2:String(R)}",
            "    OptionName : ${3:String(R)}",
            "    ResourceName : ${4:String(O)}",
            "    Value : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.runcommandparameters":{
        "prefix":"aws-events-rule.runcommandparameters",
        "body":[
            "${1:myAWSEventsRule.RunCommandParameters}:",
            "  Type: AWS::Events::Rule.RunCommandParameters",
            "  Properties:",
            "    RunCommandTargets : [ ${2:aws-events-ruleruncommandparameters.RunCommandTarget(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-certificatemanager-certificate.domainvalidationoption":{
        "prefix":"aws-certificatemanager-certificate.domainvalidationoption",
        "body":[
            "${1:myAWSCertificateManagerCertificate.DomainValidationOption}:",
            "  Type: AWS::CertificateManager::Certificate.DomainValidationOption",
            "  Properties:",
            "    DomainName : ${2:String(R)}",
            "    ValidationDomain : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint.kinesissettings":{
        "prefix":"aws-dms-endpoint.kinesissettings",
        "body":[
            "${1:myAWSDMSEndpoint.KinesisSettings}:",
            "  Type: AWS::DMS::Endpoint.KinesisSettings",
            "  Properties:",
            "    MessageFormat : ${2:String(O)}",
            "    StreamArn : ${3:String(O)}",
            "    ServiceAccessRoleArn : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.datasetcontentversionvalue":{
        "prefix":"aws-iotanalytics-dataset.datasetcontentversionvalue",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.DatasetContentVersionValue}:",
            "  Type: AWS::IoTAnalytics::Dataset.DatasetContentVersionValue",
            "  Properties:",
            "    DatasetName : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudtrail-trail.eventselector":{
        "prefix":"aws-cloudtrail-trail.eventselector",
        "body":[
            "${1:myAWSCloudTrailTrail.EventSelector}:",
            "  Type: AWS::CloudTrail::Trail.EventSelector",
            "  Properties:",
            "    DataResources : [ ${2:aws-cloudtrail-traileventselector.DataResource(O)} ]",
            "    IncludeManagementEvents : ${3:Boolean(O)}",
            "    ReadWriteType : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.bounceaction":{
        "prefix":"aws-ses-receiptrule.bounceaction",
        "body":[
            "${1:myAWSSESReceiptRule.BounceAction}:",
            "  Type: AWS::SES::ReceiptRule.BounceAction",
            "  Properties:",
            "    Sender : ${2:String(R)}",
            "    SmtpReplyCode : ${3:String(R)}",
            "    Message : ${4:String(R)}",
            "    TopicArn : ${5:String(O)}",
            "    StatusCode : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.routingrulecondition":{
        "prefix":"aws-s3-bucket.routingrulecondition",
        "body":[
            "${1:myAWSS3Bucket.RoutingRuleCondition}:",
            "  Type: AWS::S3::Bucket.RoutingRuleCondition",
            "  Properties:",
            "    HttpErrorCodeReturnedEquals : ${2:String(O)}",
            "    KeyPrefixEquals : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.logging":{
        "prefix":"aws-appmesh-virtualnode.logging",
        "body":[
            "${1:myAWSAppMeshVirtualNode.Logging}:",
            "  Type: AWS::AppMesh::VirtualNode.Logging",
            "  Properties:",
            "    AccessLog : ${2:aws-appmesh-virtualnodelogging.AccessLog(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.lifecycleconfiguration":{
        "prefix":"aws-s3-bucket.lifecycleconfiguration",
        "body":[
            "${1:myAWSS3Bucket.LifecycleConfiguration}:",
            "  Type: AWS::S3::Bucket.LifecycleConfiguration",
            "  Properties:",
            "    Rules : [ ${2:aws-s3-bucketlifecycleconfiguration.Rule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-launchconfiguration.blockdevicemapping":{
        "prefix":"aws-autoscaling-launchconfiguration.blockdevicemapping",
        "body":[
            "${1:myAWSAutoScalingLaunchConfiguration.BlockDeviceMapping}:",
            "  Type: AWS::AutoScaling::LaunchConfiguration.BlockDeviceMapping",
            "  Properties:",
            "    DeviceName : ${2:String(R)}",
            "    Ebs : ${3:aws-autoscaling-launchconfigurationblockdevicemapping.BlockDevice(O)}",
            "    NoDevice : ${4:Boolean(O)}",
            "    VirtualName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint.s3settings":{
        "prefix":"aws-dms-endpoint.s3settings",
        "body":[
            "${1:myAWSDMSEndpoint.S3Settings}:",
            "  Type: AWS::DMS::Endpoint.S3Settings",
            "  Properties:",
            "    ExternalTableDefinition : ${2:String(O)}",
            "    BucketName : ${3:String(O)}",
            "    BucketFolder : ${4:String(O)}",
            "    CsvRowDelimiter : ${5:String(O)}",
            "    CsvDelimiter : ${6:String(O)}",
            "    ServiceAccessRoleArn : ${7:String(O)}",
            "    CompressionType : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.serdeinfo":{
        "prefix":"aws-glue-partition.serdeinfo",
        "body":[
            "${1:myAWSGluePartition.SerdeInfo}:",
            "  Type: AWS::Glue::Partition.SerdeInfo",
            "  Properties:",
            "    Parameters : ${2:Json(O)}",
            "    SerializationLibrary : ${3:String(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualrouter.virtualrouterlistener":{
        "prefix":"aws-appmesh-virtualrouter.virtualrouterlistener",
        "body":[
            "${1:myAWSAppMeshVirtualRouter.VirtualRouterListener}:",
            "  Type: AWS::AppMesh::VirtualRouter.VirtualRouterListener",
            "  Properties:",
            "    PortMapping : ${2:aws-appmesh-virtualroutervirtualrouterlistener.PortMapping(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.cookies":{
        "prefix":"aws-cloudfront-distribution.cookies",
        "body":[
            "${1:myAWSCloudFrontDistribution.Cookies}:",
            "  Type: AWS::CloudFront::Distribution.Cookies",
            "  Properties:",
            "    WhitelistedNames : [ ${2:String(O)} ]",
            "    Forward : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment.deploymentcanarysettings":{
        "prefix":"aws-apigateway-deployment.deploymentcanarysettings",
        "body":[
            "${1:myAWSApiGatewayDeployment.DeploymentCanarySettings}:",
            "  Type: AWS::ApiGateway::Deployment.DeploymentCanarySettings",
            "  Properties:",
            "    PercentTraffic : ${2:Double(O)}",
            "    StageVariableOverrides : [ ${3:String(O)} ]",
            "    UseStageCache : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-step.hadoopjarstepconfig":{
        "prefix":"aws-emr-step.hadoopjarstepconfig",
        "body":[
            "${1:myAWSEMRStep.HadoopJarStepConfig}:",
            "  Type: AWS::EMR::Step.HadoopJarStepConfig",
            "  Properties:",
            "    Args : [ ${2:String(O)} ]",
            "    Jar : ${3:String(R)}",
            "    MainClass : ${4:String(O)}",
            "    StepProperties : [ ${5:aws-emr-stephadoopjarstepconfig.KeyValue(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.ebsblockdeviceconfig":{
        "prefix":"aws-emr-instancegroupconfig.ebsblockdeviceconfig",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.EbsBlockDeviceConfig}:",
            "  Type: AWS::EMR::InstanceGroupConfig.EbsBlockDeviceConfig",
            "  Properties:",
            "    VolumeSpecification : ${2:aws-emr-instancegroupconfigebsblockdeviceconfig.VolumeSpecification(R)}",
            "    VolumesPerInstance : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.s3location":{
        "prefix":"aws-codedeploy-deploymentgroup.s3location",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.S3Location}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.S3Location",
            "  Properties:",
            "    Bucket : ${2:String(R)}",
            "    BundleType : ${3:String(O)}",
            "    ETag : ${4:String(O)}",
            "    Key : ${5:String(R)}",
            "    Version : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.privateipadd":{
        "prefix":"aws-ec2-launchtemplate.privateipadd",
        "body":[
            "${1:myAWSEC2LaunchTemplate.PrivateIpAdd}:",
            "  Type: AWS::EC2::LaunchTemplate.PrivateIpAdd",
            "  Properties:",
            "    PrivateIpAddress : ${2:String(O)}",
            "    Primary : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.launchtemplateoverrides":{
        "prefix":"aws-autoscaling-autoscalinggroup.launchtemplateoverrides",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.LaunchTemplateOverrides}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.LaunchTemplateOverrides",
            "  Properties:",
            "    InstanceType : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.lambdafunctionassociation":{
        "prefix":"aws-cloudfront-distribution.lambdafunctionassociation",
        "body":[
            "${1:myAWSCloudFrontDistribution.LambdaFunctionAssociation}:",
            "  Type: AWS::CloudFront::Distribution.LambdaFunctionAssociation",
            "  Properties:",
            "    EventType : ${2:String(O)}",
            "    LambdaFunctionARN : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.elasticsearchbufferinghints":{
        "prefix":"aws-kinesisfirehose-deliverystream.elasticsearchbufferinghints",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ElasticsearchBufferingHints}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ElasticsearchBufferingHints",
            "  Properties:",
            "    IntervalInSeconds : ${2:Integer(R)}",
            "    SizeInMBs : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-computeenvironment.launchtemplatespecification":{
        "prefix":"aws-batch-computeenvironment.launchtemplatespecification",
        "body":[
            "${1:myAWSBatchComputeEnvironment.LaunchTemplateSpecification}:",
            "  Type: AWS::Batch::ComputeEnvironment.LaunchTemplateSpecification",
            "  Properties:",
            "    LaunchTemplateName : ${2:String(O)}",
            "    Version : ${3:String(O)}",
            "    LaunchTemplateId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-database.databaseinput":{
        "prefix":"aws-glue-database.databaseinput",
        "body":[
            "${1:myAWSGlueDatabase.DatabaseInput}:",
            "  Type: AWS::Glue::Database.DatabaseInput",
            "  Properties:",
            "    LocationUri : ${2:String(O)}",
            "    Description : ${3:String(O)}",
            "    Parameters : ${4:Json(O)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.lifecyclehookspecification":{
        "prefix":"aws-autoscaling-autoscalinggroup.lifecyclehookspecification",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.LifecycleHookSpecification}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.LifecycleHookSpecification",
            "  Properties:",
            "    DefaultResult : ${2:String(O)}",
            "    HeartbeatTimeout : ${3:Integer(O)}",
            "    LifecycleHookName : ${4:String(R)}",
            "    LifecycleTransition : ${5:String(R)}",
            "    NotificationMetadata : ${6:String(O)}",
            "    NotificationTargetARN : ${7:String(O)}",
            "    RoleARN : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.recordcolumn":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.recordcolumn",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.RecordColumn}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordColumn",
            "  Properties:",
            "    Mapping : ${2:String(O)}",
            "    SqlType : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.passwordpolicy":{
        "prefix":"aws-cognito-userpool.passwordpolicy",
        "body":[
            "${1:myAWSCognitoUserPool.PasswordPolicy}:",
            "  Type: AWS::Cognito::UserPool.PasswordPolicy",
            "  Properties:",
            "    RequireNumbers : ${2:Boolean(O)}",
            "    MinimumLength : ${3:Integer(O)}",
            "    RequireUppercase : ${4:Boolean(O)}",
            "    RequireLowercase : ${5:Boolean(O)}",
            "    RequireSymbols : ${6:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput.kinesisfirehoseoutput":{
        "prefix":"aws-kinesisanalytics-applicationoutput.kinesisfirehoseoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput.KinesisFirehoseOutput}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput.KinesisFirehoseOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configurationaggregator.organizationaggregationsource":{
        "prefix":"aws-config-configurationaggregator.organizationaggregationsource",
        "body":[
            "${1:myAWSConfigConfigurationAggregator.OrganizationAggregationSource}:",
            "  Type: AWS::Config::ConfigurationAggregator.OrganizationAggregationSource",
            "  Properties:",
            "    AllAwsRegions : ${2:Boolean(O)}",
            "    AwsRegions : [ ${3:String(O)} ]",
            "    RoleArn : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.shutdowneventconfiguration":{
        "prefix":"aws-opsworks-layer.shutdowneventconfiguration",
        "body":[
            "${1:myAWSOpsWorksLayer.ShutdownEventConfiguration}:",
            "  Type: AWS::OpsWorks::Layer.ShutdownEventConfiguration",
            "  Properties:",
            "    DelayUntilElbConnectionsDrained : ${2:Boolean(O)}",
            "    ExecutionTimeout : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.volumes":{
        "prefix":"aws-batch-jobdefinition.volumes",
        "body":[
            "${1:myAWSBatchJobDefinition.Volumes}:",
            "  Type: AWS::Batch::JobDefinition.Volumes",
            "  Properties:",
            "    Host : ${2:aws-batch-jobdefinitionvolumes.VolumesHost(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.stepscalingpolicyconfiguration":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.stepscalingpolicyconfiguration",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.StepScalingPolicyConfiguration}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.StepScalingPolicyConfiguration",
            "  Properties:",
            "    AdjustmentType : ${2:String(O)}",
            "    Cooldown : ${3:Integer(O)}",
            "    MetricAggregationType : ${4:String(O)}",
            "    MinAdjustmentMagnitude : ${5:Integer(O)}",
            "    StepAdjustments : [ ${6:aws-applicationautoscaling-scalingpolicystepscalingpolicyconfiguration.StepAdjustment(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.deviceshadowenrich":{
        "prefix":"aws-iotanalytics-pipeline.deviceshadowenrich",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.DeviceShadowEnrich}:",
            "  Type: AWS::IoTAnalytics::Pipeline.DeviceShadowEnrich",
            "  Properties:",
            "    Attribute : ${2:String(O)}",
            "    Next : ${3:String(O)}",
            "    ThingName : ${4:String(O)}",
            "    RoleArn : ${5:String(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.corsrule":{
        "prefix":"aws-s3-bucket.corsrule",
        "body":[
            "${1:myAWSS3Bucket.CorsRule}:",
            "  Type: AWS::S3::Bucket.CorsRule",
            "  Properties:",
            "    AllowedHeaders : [ ${2:String(O)} ]",
            "    AllowedMethods : [ ${3:String(R)} ]",
            "    AllowedOrigins : [ ${4:String(R)} ]",
            "    ExposedHeaders : [ ${5:String(O)} ]",
            "    Id : ${6:String(O)}",
            "    MaxAge : ${7:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.s3action":{
        "prefix":"aws-iot-topicrule.s3action",
        "body":[
            "${1:myAWSIoTTopicRule.S3Action}:",
            "  Type: AWS::IoT::TopicRule.S3Action",
            "  Properties:",
            "    BucketName : ${2:String(R)}",
            "    Key : ${3:String(R)}",
            "    RoleArn : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput.lambdaoutput":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput.lambdaoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput.LambdaOutput}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput.LambdaOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.logsconfig":{
        "prefix":"aws-codebuild-project.logsconfig",
        "body":[
            "${1:myAWSCodeBuildProject.LogsConfig}:",
            "  Type: AWS::CodeBuild::Project.LogsConfig",
            "  Properties:",
            "    CloudWatchLogs : ${2:aws-codebuild-projectlogsconfig.CloudWatchLogsConfig(O)}",
            "    S3Logs : ${3:aws-codebuild-projectlogsconfig.S3LogsConfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.splunkdestinationconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.splunkdestinationconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.SplunkDestinationConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.SplunkDestinationConfiguration",
            "  Properties:",
            "    CloudWatchLoggingOptions : ${2:aws-kinesisfirehose-deliverystreamsplunkdestinationconfiguration.CloudWatchLoggingOptions(O)}",
            "    HECAcknowledgmentTimeoutInSeconds : ${3:Integer(O)}",
            "    HECEndpoint : ${4:String(R)}",
            "    HECEndpointType : ${5:String(R)}",
            "    HECToken : ${6:String(R)}",
            "    ProcessingConfiguration : ${7:aws-kinesisfirehose-deliverystreamsplunkdestinationconfiguration.ProcessingConfiguration(O)}",
            "    RetryOptions : ${8:aws-kinesisfirehose-deliverystreamsplunkdestinationconfiguration.SplunkRetryOptions(O)}",
            "    S3BackupMode : ${9:String(O)}",
            "    S3Configuration : ${10:aws-kinesisfirehose-deliverystreamsplunkdestinationconfiguration.S3DestinationConfiguration(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.execution":{
        "prefix":"aws-greengrass-functiondefinition.execution",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.Execution}:",
            "  Type: AWS::Greengrass::FunctionDefinition.Execution",
            "  Properties:",
            "    IsolationMode : ${2:String(O)}",
            "    RunAs : ${3:aws-greengrass-functiondefinitionexecution.RunAs(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-directoryservice-microsoftad.vpcsettings":{
        "prefix":"aws-directoryservice-microsoftad.vpcsettings",
        "body":[
            "${1:myAWSDirectoryServiceMicrosoftAD.VpcSettings}:",
            "  Type: AWS::DirectoryService::MicrosoftAD.VpcSettings",
            "  Properties:",
            "    SubnetIds : [ ${2:String(R)} ]",
            "    VpcId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.relationaldatabaseconfig":{
        "prefix":"aws-appsync-datasource.relationaldatabaseconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.RelationalDatabaseConfig}:",
            "  Type: AWS::AppSync::DataSource.RelationalDatabaseConfig",
            "  Properties:",
            "    RdsHttpEndpointConfig : ${2:aws-appsync-datasourcerelationaldatabaseconfig.RdsHttpEndpointConfig(O)}",
            "    RelationalDatabaseSourceType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function.vpcconfig":{
        "prefix":"aws-lambda-function.vpcconfig",
        "body":[
            "${1:myAWSLambdaFunction.VpcConfig}:",
            "  Type: AWS::Lambda::Function.VpcConfig",
            "  Properties:",
            "    SecurityGroupIds : [ ${2:String(R)} ]",
            "    SubnetIds : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sqlinjectionmatchset.sqlinjectionmatchtuple":{
        "prefix":"aws-waf-sqlinjectionmatchset.sqlinjectionmatchtuple",
        "body":[
            "${1:myAWSWAFSqlInjectionMatchSet.SqlInjectionMatchTuple}:",
            "  Type: AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple",
            "  Properties:",
            "    FieldToMatch : ${2:aws-waf-sqlinjectionmatchsetsqlinjectionmatchtuple.FieldToMatch(R)}",
            "    TextTransformation : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-targetgroup.targetgroupattribute":{
        "prefix":"aws-elasticloadbalancingv2-targetgroup.targetgroupattribute",
        "body":[
            "${1:myAWSElasticLoadBalancingV2TargetGroup.TargetGroupAttribute}:",
            "  Type: AWS::ElasticLoadBalancingV2::TargetGroup.TargetGroupAttribute",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.weightedtarget":{
        "prefix":"aws-appmesh-route.weightedtarget",
        "body":[
            "${1:myAWSAppMeshRoute.WeightedTarget}:",
            "  Type: AWS::AppMesh::Route.WeightedTarget",
            "  Properties:",
            "    VirtualNode : ${2:String(R)}",
            "    Weight : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-app.datasource":{
        "prefix":"aws-opsworks-app.datasource",
        "body":[
            "${1:myAWSOpsWorksApp.DataSource}:",
            "  Type: AWS::OpsWorks::App.DataSource",
            "  Properties:",
            "    Arn : ${2:String(O)}",
            "    DatabaseName : ${3:String(O)}",
            "    Type : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.destination":{
        "prefix":"aws-s3-bucket.destination",
        "body":[
            "${1:myAWSS3Bucket.Destination}:",
            "  Type: AWS::S3::Bucket.Destination",
            "  Properties:",
            "    BucketAccountId : ${2:String(O)}",
            "    BucketArn : ${3:String(R)}",
            "    Format : ${4:String(R)}",
            "    Prefix : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-webacl.wafaction":{
        "prefix":"aws-waf-webacl.wafaction",
        "body":[
            "${1:myAWSWAFWebACL.WafAction}:",
            "  Type: AWS::WAF::WebACL.WafAction",
            "  Properties:",
            "    Type : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbsecuritygroup.ingress":{
        "prefix":"aws-rds-dbsecuritygroup.ingress",
        "body":[
            "${1:myAWSRDSDBSecurityGroup.Ingress}:",
            "  Type: AWS::RDS::DBSecurityGroup.Ingress",
            "  Properties:",
            "    CIDRIP : ${2:String(O)}",
            "    EC2SecurityGroupId : ${3:String(O)}",
            "    EC2SecurityGroupName : ${4:String(O)}",
            "    EC2SecurityGroupOwnerId : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-ipset.ipsetdescriptor":{
        "prefix":"aws-waf-ipset.ipsetdescriptor",
        "body":[
            "${1:myAWSWAFIPSet.IPSetDescriptor}:",
            "  Type: AWS::WAF::IPSet.IPSetDescriptor",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.action":{
        "prefix":"aws-ses-receiptrule.action",
        "body":[
            "${1:myAWSSESReceiptRule.Action}:",
            "  Type: AWS::SES::ReceiptRule.Action",
            "  Properties:",
            "    BounceAction : ${2:aws-ses-receiptruleaction.BounceAction(O)}",
            "    S3Action : ${3:aws-ses-receiptruleaction.S3Action(O)}",
            "    StopAction : ${4:aws-ses-receiptruleaction.StopAction(O)}",
            "    SNSAction : ${5:aws-ses-receiptruleaction.SNSAction(O)}",
            "    WorkmailAction : ${6:aws-ses-receiptruleaction.WorkmailAction(O)}",
            "    AddHeaderAction : ${7:aws-ses-receiptruleaction.AddHeaderAction(O)}",
            "    LambdaAction : ${8:aws-ses-receiptruleaction.LambdaAction(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.servicediscovery":{
        "prefix":"aws-appmesh-virtualnode.servicediscovery",
        "body":[
            "${1:myAWSAppMeshVirtualNode.ServiceDiscovery}:",
            "  Type: AWS::AppMesh::VirtualNode.ServiceDiscovery",
            "  Properties:",
            "    DNS : ${2:aws-appmesh-virtualnodeservicediscovery.DnsServiceDiscovery(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment.methodsetting":{
        "prefix":"aws-apigateway-deployment.methodsetting",
        "body":[
            "${1:myAWSApiGatewayDeployment.MethodSetting}:",
            "  Type: AWS::ApiGateway::Deployment.MethodSetting",
            "  Properties:",
            "    CacheDataEncrypted : ${2:Boolean(O)}",
            "    CacheTtlInSeconds : ${3:Integer(O)}",
            "    CachingEnabled : ${4:Boolean(O)}",
            "    DataTraceEnabled : ${5:Boolean(O)}",
            "    HttpMethod : ${6:String(O)}",
            "    LoggingLevel : ${7:String(O)}",
            "    MetricsEnabled : ${8:Boolean(O)}",
            "    ResourcePath : ${9:String(O)}",
            "    ThrottlingBurstLimit : ${10:Integer(O)}",
            "    ThrottlingRateLimit : ${11:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.volumeconfiguration":{
        "prefix":"aws-opsworks-layer.volumeconfiguration",
        "body":[
            "${1:myAWSOpsWorksLayer.VolumeConfiguration}:",
            "  Type: AWS::OpsWorks::Layer.VolumeConfiguration",
            "  Properties:",
            "    Encrypted : ${2:Boolean(O)}",
            "    Iops : ${3:Integer(O)}",
            "    MountPoint : ${4:String(O)}",
            "    NumberOfDisks : ${5:Integer(O)}",
            "    RaidLevel : ${6:Integer(O)}",
            "    Size : ${7:Integer(O)}",
            "    VolumeType : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.spotprovisioningspecification":{
        "prefix":"aws-emr-cluster.spotprovisioningspecification",
        "body":[
            "${1:myAWSEMRCluster.SpotProvisioningSpecification}:",
            "  Type: AWS::EMR::Cluster.SpotProvisioningSpecification",
            "  Properties:",
            "    BlockDurationMinutes : ${2:Integer(O)}",
            "    TimeoutAction : ${3:String(R)}",
            "    TimeoutDurationMinutes : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.bootstrapactionconfig":{
        "prefix":"aws-emr-cluster.bootstrapactionconfig",
        "body":[
            "${1:myAWSEMRCluster.BootstrapActionConfig}:",
            "  Type: AWS::EMR::Cluster.BootstrapActionConfig",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    ScriptBootstrapAction : ${3:aws-emr-clusterbootstrapactionconfig.ScriptBootstrapActionConfig(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.spotprovisioningspecification":{
        "prefix":"aws-emr-instancefleetconfig.spotprovisioningspecification",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.SpotProvisioningSpecification}:",
            "  Type: AWS::EMR::InstanceFleetConfig.SpotProvisioningSpecification",
            "  Properties:",
            "    BlockDurationMinutes : ${2:Integer(O)}",
            "    TimeoutAction : ${3:String(R)}",
            "    TimeoutDurationMinutes : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.launchtemplatespecification":{
        "prefix":"aws-autoscaling-autoscalinggroup.launchtemplatespecification",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.LaunchTemplateSpecification}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification",
            "  Properties:",
            "    LaunchTemplateId : ${2:String(O)}",
            "    LaunchTemplateName : ${3:String(O)}",
            "    Version : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.containerproperties":{
        "prefix":"aws-batch-jobdefinition.containerproperties",
        "body":[
            "${1:myAWSBatchJobDefinition.ContainerProperties}:",
            "  Type: AWS::Batch::JobDefinition.ContainerProperties",
            "  Properties:",
            "    User : ${2:String(O)}",
            "    Memory : ${3:Integer(R)}",
            "    Privileged : ${4:Boolean(O)}",
            "    JobRoleArn : ${5:String(O)}",
            "    ReadonlyRootFilesystem : ${6:Boolean(O)}",
            "    Vcpus : ${7:Integer(R)}",
            "    Image : ${8:String(R)}",
            "    MountPoints : [ ${9:aws-batch-jobdefinitioncontainerproperties.MountPoints(O)} ]",
            "    Volumes : [ ${10:aws-batch-jobdefinitioncontainerproperties.Volumes(O)} ]",
            "    Command : [ ${11:String(O)} ]",
            "    Environment : [ ${12:aws-batch-jobdefinitioncontainerproperties.Environment(O)} ]",
            "    Ulimits : [ ${13:aws-batch-jobdefinitioncontainerproperties.Ulimit(O)} ]",
            "    InstanceType : ${14:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-fleet.ippermission":{
        "prefix":"aws-gamelift-fleet.ippermission",
        "body":[
            "${1:myAWSGameLiftFleet.IpPermission}:",
            "  Type: AWS::GameLift::Fleet.IpPermission",
            "  Properties:",
            "    FromPort : ${2:Integer(R)}",
            "    IpRange : ${3:String(R)}",
            "    Protocol : ${4:String(R)}",
            "    ToPort : ${5:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-deliverychannel.configsnapshotdeliveryproperties":{
        "prefix":"aws-config-deliverychannel.configsnapshotdeliveryproperties",
        "body":[
            "${1:myAWSConfigDeliveryChannel.ConfigSnapshotDeliveryProperties}:",
            "  Type: AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties",
            "  Properties:",
            "    DeliveryFrequency : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.lambda":{
        "prefix":"aws-iotanalytics-pipeline.lambda",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Lambda}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Lambda",
            "  Properties:",
            "    BatchSize : ${2:Integer(O)}",
            "    Next : ${3:String(O)}",
            "    LambdaName : ${4:String(O)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy.customizedmetricspecification":{
        "prefix":"aws-autoscaling-scalingpolicy.customizedmetricspecification",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy.CustomizedMetricSpecification}:",
            "  Type: AWS::AutoScaling::ScalingPolicy.CustomizedMetricSpecification",
            "  Properties:",
            "    Dimensions : [ ${2:aws-autoscaling-scalingpolicycustomizedmetricspecification.MetricDimension(O)} ]",
            "    MetricName : ${3:String(R)}",
            "    Namespace : ${4:String(R)}",
            "    Statistic : ${5:String(R)}",
            "    Unit : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.sqsaction":{
        "prefix":"aws-iot-topicrule.sqsaction",
        "body":[
            "${1:myAWSIoTTopicRule.SqsAction}:",
            "  Type: AWS::IoT::TopicRule.SqsAction",
            "  Properties:",
            "    QueueUrl : ${2:String(R)}",
            "    RoleArn : ${3:String(R)}",
            "    UseBase64 : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.authenticatecognitoconfig":{
        "prefix":"aws-elasticloadbalancingv2-listener.authenticatecognitoconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.AuthenticateCognitoConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.AuthenticateCognitoConfig",
            "  Properties:",
            "    AuthenticationRequestExtraParams : [ ${2:String(O)} ]",
            "    OnUnauthenticatedRequest : ${3:String(O)}",
            "    Scope : ${4:String(O)}",
            "    SessionCookieName : ${5:String(O)}",
            "    SessionTimeout : ${6:Long(O)}",
            "    UserPoolArn : ${7:String(R)}",
            "    UserPoolClientId : ${8:String(R)}",
            "    UserPoolDomain : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-stepfunctions-activity.tagsentry":{
        "prefix":"aws-stepfunctions-activity.tagsentry",
        "body":[
            "${1:myAWSStepFunctionsActivity.TagsEntry}:",
            "  Type: AWS::StepFunctions::Activity.TagsEntry",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.loadbalancer":{
        "prefix":"aws-ecs-service.loadbalancer",
        "body":[
            "${1:myAWSECSService.LoadBalancer}:",
            "  Type: AWS::ECS::Service.LoadBalancer",
            "  Properties:",
            "    ContainerName : ${2:String(O)}",
            "    ContainerPort : ${3:Integer(R)}",
            "    LoadBalancerName : ${4:String(O)}",
            "    TargetGroupArn : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.encryptionconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.encryptionconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.EncryptionConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration",
            "  Properties:",
            "    KMSEncryptionConfig : ${2:aws-kinesisfirehose-deliverystreamencryptionconfiguration.KMSEncryptionConfig(O)}",
            "    NoEncryptionConfig : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-imagebuilder.vpcconfig":{
        "prefix":"aws-appstream-imagebuilder.vpcconfig",
        "body":[
            "${1:myAWSAppStreamImageBuilder.VpcConfig}:",
            "  Type: AWS::AppStream::ImageBuilder.VpcConfig",
            "  Properties:",
            "    SecurityGroupIds : [ ${2:String(O)} ]",
            "    SubnetIds : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.cloudwatchloggingoptions":{
        "prefix":"aws-kinesisfirehose-deliverystream.cloudwatchloggingoptions",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.CloudWatchLoggingOptions}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}",
            "    LogGroupName : ${3:String(O)}",
            "    LogStreamName : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.logconfiguration":{
        "prefix":"aws-ecs-taskdefinition.logconfiguration",
        "body":[
            "${1:myAWSECSTaskDefinition.LogConfiguration}:",
            "  Type: AWS::ECS::TaskDefinition.LogConfiguration",
            "  Properties:",
            "    LogDriver : ${2:String(R)}",
            "    Options : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.putiteminput":{
        "prefix":"aws-iot-topicrule.putiteminput",
        "body":[
            "${1:myAWSIoTTopicRule.PutItemInput}:",
            "  Type: AWS::IoT::TopicRule.PutItemInput",
            "  Properties:",
            "    TableName : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.accessloggingpolicy":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.accessloggingpolicy",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.AccessLoggingPolicy}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy",
            "  Properties:",
            "    EmitInterval : ${2:Integer(O)}",
            "    Enabled : ${3:Boolean(R)}",
            "    S3BucketName : ${4:String(R)}",
            "    S3BucketPrefix : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptfilter.filter":{
        "prefix":"aws-ses-receiptfilter.filter",
        "body":[
            "${1:myAWSSESReceiptFilter.Filter}:",
            "  Type: AWS::SES::ReceiptFilter.Filter",
            "  Properties:",
            "    IpFilter : ${2:aws-ses-receiptfilterfilter.IpFilter(R)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.tagfilter":{
        "prefix":"aws-codedeploy-deploymentgroup.tagfilter",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.TagFilter}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.TagFilter",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Type : ${3:String(O)}",
            "    Value : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.spotfleettagspecification":{
        "prefix":"aws-ec2-spotfleet.spotfleettagspecification",
        "body":[
            "${1:myAWSEC2SpotFleet.SpotFleetTagSpecification}:",
            "  Type: AWS::EC2::SpotFleet.SpotFleetTagSpecification",
            "  Properties:",
            "    ResourceType : ${2:String(O)}",
            "    Tags : [ ${3:aws-ec2-spotfleetspotfleettagspecification.Tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.privateipaddressspecification":{
        "prefix":"aws-ec2-spotfleet.privateipaddressspecification",
        "body":[
            "${1:myAWSEC2SpotFleet.PrivateIpAddressSpecification}:",
            "  Type: AWS::EC2::SpotFleet.PrivateIpAddressSpecification",
            "  Properties:",
            "    Primary : ${2:Boolean(O)}",
            "    PrivateIpAddress : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.device":{
        "prefix":"aws-ecs-taskdefinition.device",
        "body":[
            "${1:myAWSECSTaskDefinition.Device}:",
            "  Type: AWS::ECS::TaskDefinition.Device",
            "  Properties:",
            "    ContainerPath : ${2:String(O)}",
            "    HostPath : ${3:String(R)}",
            "    Permissions : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.action":{
        "prefix":"aws-elasticloadbalancingv2-listener.action",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.Action}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.Action",
            "  Properties:",
            "    AuthenticateCognitoConfig : ${2:aws-elasticloadbalancingv2-listeneraction.AuthenticateCognitoConfig(O)}",
            "    AuthenticateOidcConfig : ${3:aws-elasticloadbalancingv2-listeneraction.AuthenticateOidcConfig(O)}",
            "    FixedResponseConfig : ${4:aws-elasticloadbalancingv2-listeneraction.FixedResponseConfig(O)}",
            "    Order : ${5:Integer(O)}",
            "    RedirectConfig : ${6:aws-elasticloadbalancingv2-listeneraction.RedirectConfig(O)}",
            "    TargetGroupArn : ${7:String(O)}",
            "    Type : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.recordformat":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.recordformat",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.RecordFormat}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordFormat",
            "  Properties:",
            "    MappingParameters : ${2:aws-kinesisanalyticsv2-applicationreferencedatasourcerecordformat.MappingParameters(O)}",
            "    RecordFormatType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-job.jobcommand":{
        "prefix":"aws-glue-job.jobcommand",
        "body":[
            "${1:myAWSGlueJob.JobCommand}:",
            "  Type: AWS::Glue::Job.JobCommand",
            "  Properties:",
            "    ScriptLocation : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput.output":{
        "prefix":"aws-kinesisanalytics-applicationoutput.output",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput.Output}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput.Output",
            "  Properties:",
            "    DestinationSchema : ${2:aws-kinesisanalytics-applicationoutputoutput.DestinationSchema(R)}",
            "    LambdaOutput : ${3:aws-kinesisanalytics-applicationoutputoutput.LambdaOutput(O)}",
            "    KinesisFirehoseOutput : ${4:aws-kinesisanalytics-applicationoutputoutput.KinesisFirehoseOutput(O)}",
            "    KinesisStreamsOutput : ${5:aws-kinesisanalytics-applicationoutputoutput.KinesisStreamsOutput(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.instancefleetconfig":{
        "prefix":"aws-emr-cluster.instancefleetconfig",
        "body":[
            "${1:myAWSEMRCluster.InstanceFleetConfig}:",
            "  Type: AWS::EMR::Cluster.InstanceFleetConfig",
            "  Properties:",
            "    InstanceTypeConfigs : [ ${2:aws-emr-clusterinstancefleetconfig.InstanceTypeConfig(O)} ]",
            "    LaunchSpecifications : ${3:aws-emr-clusterinstancefleetconfig.InstanceFleetProvisioningSpecifications(O)}",
            "    Name : ${4:String(O)}",
            "    TargetOnDemandCapacity : ${5:Integer(O)}",
            "    TargetSpotCapacity : ${6:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.fleetlaunchtemplatespecificationrequest":{
        "prefix":"aws-ec2-ec2fleet.fleetlaunchtemplatespecificationrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.FleetLaunchTemplateSpecificationRequest}:",
            "  Type: AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest",
            "  Properties:",
            "    LaunchTemplateName : ${2:String(O)}",
            "    Version : ${3:String(O)}",
            "    LaunchTemplateId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.processingconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.processingconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ProcessingConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}",
            "    Processors : [ ${3:aws-kinesisfirehose-deliverystreamprocessingconfiguration.Processor(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.localsecondaryindex":{
        "prefix":"aws-dynamodb-table.localsecondaryindex",
        "body":[
            "${1:myAWSDynamoDBTable.LocalSecondaryIndex}:",
            "  Type: AWS::DynamoDB::Table.LocalSecondaryIndex",
            "  Properties:",
            "    IndexName : ${2:String(R)}",
            "    KeySchema : [ ${3:aws-dynamodb-tablelocalsecondaryindex.KeySchema(R)} ]",
            "    Projection : ${4:aws-dynamodb-tablelocalsecondaryindex.Projection(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.jobflowinstancesconfig":{
        "prefix":"aws-emr-cluster.jobflowinstancesconfig",
        "body":[
            "${1:myAWSEMRCluster.JobFlowInstancesConfig}:",
            "  Type: AWS::EMR::Cluster.JobFlowInstancesConfig",
            "  Properties:",
            "    AdditionalMasterSecurityGroups : [ ${2:String(O)} ]",
            "    AdditionalSlaveSecurityGroups : [ ${3:String(O)} ]",
            "    CoreInstanceFleet : ${4:aws-emr-clusterjobflowinstancesconfig.InstanceFleetConfig(O)}",
            "    CoreInstanceGroup : ${5:aws-emr-clusterjobflowinstancesconfig.InstanceGroupConfig(O)}",
            "    Ec2KeyName : ${6:String(O)}",
            "    Ec2SubnetId : ${7:String(O)}",
            "    EmrManagedMasterSecurityGroup : ${8:String(O)}",
            "    EmrManagedSlaveSecurityGroup : ${9:String(O)}",
            "    HadoopVersion : ${10:String(O)}",
            "    KeepJobFlowAliveWhenNoSteps : ${11:Boolean(O)}",
            "    MasterInstanceFleet : ${12:aws-emr-clusterjobflowinstancesconfig.InstanceFleetConfig(O)}",
            "    MasterInstanceGroup : ${13:aws-emr-clusterjobflowinstancesconfig.InstanceGroupConfig(O)}",
            "    Placement : ${14:aws-emr-clusterjobflowinstancesconfig.PlacementType(O)}",
            "    ServiceAccessSecurityGroup : ${15:String(O)}",
            "    TerminationProtected : ${16:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-vpnconnection.vpntunneloptionsspecification":{
        "prefix":"aws-ec2-vpnconnection.vpntunneloptionsspecification",
        "body":[
            "${1:myAWSEC2VPNConnection.VpnTunnelOptionsSpecification}:",
            "  Type: AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification",
            "  Properties:",
            "    PreSharedKey : ${2:String(O)}",
            "    TunnelInsideCidr : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-healthcheck.healthcheckconfig":{
        "prefix":"aws-route53-healthcheck.healthcheckconfig",
        "body":[
            "${1:myAWSRoute53HealthCheck.HealthCheckConfig}:",
            "  Type: AWS::Route53::HealthCheck.HealthCheckConfig",
            "  Properties:",
            "    AlarmIdentifier : ${2:aws-route53-healthcheckhealthcheckconfig.AlarmIdentifier(O)}",
            "    ChildHealthChecks : [ ${3:String(O)} ]",
            "    EnableSNI : ${4:Boolean(O)}",
            "    FailureThreshold : ${5:Integer(O)}",
            "    FullyQualifiedDomainName : ${6:String(O)}",
            "    HealthThreshold : ${7:Integer(O)}",
            "    IPAddress : ${8:String(O)}",
            "    InsufficientDataHealthStatus : ${9:String(O)}",
            "    Inverted : ${10:Boolean(O)}",
            "    MeasureLatency : ${11:Boolean(O)}",
            "    Port : ${12:Integer(O)}",
            "    Regions : [ ${13:String(O)} ]",
            "    RequestInterval : ${14:Integer(O)}",
            "    ResourcePath : ${15:String(O)}",
            "    SearchString : ${16:String(O)}",
            "    Type : ${17:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.snsaction":{
        "prefix":"aws-iot-topicrule.snsaction",
        "body":[
            "${1:myAWSIoTTopicRule.SnsAction}:",
            "  Type: AWS::IoT::TopicRule.SnsAction",
            "  Properties:",
            "    MessageFormat : ${2:String(O)}",
            "    RoleArn : ${3:String(R)}",
            "    TargetArn : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-directoryservice-simplead.vpcsettings":{
        "prefix":"aws-directoryservice-simplead.vpcsettings",
        "body":[
            "${1:myAWSDirectoryServiceSimpleAD.VpcSettings}:",
            "  Type: AWS::DirectoryService::SimpleAD.VpcSettings",
            "  Properties:",
            "    SubnetIds : [ ${2:String(R)} ]",
            "    VpcId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.cachebehavior":{
        "prefix":"aws-cloudfront-distribution.cachebehavior",
        "body":[
            "${1:myAWSCloudFrontDistribution.CacheBehavior}:",
            "  Type: AWS::CloudFront::Distribution.CacheBehavior",
            "  Properties:",
            "    Compress : ${2:Boolean(O)}",
            "    LambdaFunctionAssociations : [ ${3:aws-cloudfront-distributioncachebehavior.LambdaFunctionAssociation(O)} ]",
            "    TargetOriginId : ${4:String(R)}",
            "    ViewerProtocolPolicy : ${5:String(R)}",
            "    TrustedSigners : [ ${6:String(O)} ]",
            "    DefaultTTL : ${7:Double(O)}",
            "    FieldLevelEncryptionId : ${8:String(O)}",
            "    AllowedMethods : [ ${9:String(O)} ]",
            "    PathPattern : ${10:String(R)}",
            "    CachedMethods : [ ${11:String(O)} ]",
            "    SmoothStreaming : ${12:Boolean(O)}",
            "    ForwardedValues : ${13:aws-cloudfront-distributioncachebehavior.ForwardedValues(R)}",
            "    MinTTL : ${14:Double(O)}",
            "    MaxTTL : ${15:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.stepconfig":{
        "prefix":"aws-emr-cluster.stepconfig",
        "body":[
            "${1:myAWSEMRCluster.StepConfig}:",
            "  Type: AWS::EMR::Cluster.StepConfig",
            "  Properties:",
            "    ActionOnFailure : ${2:String(O)}",
            "    HadoopJarStep : ${3:aws-emr-clusterstepconfig.HadoopJarStepConfig(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.blockerdeclaration":{
        "prefix":"aws-codepipeline-pipeline.blockerdeclaration",
        "body":[
            "${1:myAWSCodePipelinePipeline.BlockerDeclaration}:",
            "  Type: AWS::CodePipeline::Pipeline.BlockerDeclaration",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-filter.findingcriteria":{
        "prefix":"aws-guardduty-filter.findingcriteria",
        "body":[
            "${1:myAWSGuardDutyFilter.FindingCriteria}:",
            "  Type: AWS::GuardDuty::Filter.FindingCriteria",
            "  Properties:",
            "    Criterion : ${2:Json(O)}",
            "    ItemType : ${3:aws-guardduty-filterfindingcriteria.Condition(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.nodetonodeencryptionoptions":{
        "prefix":"aws-elasticsearch-domain.nodetonodeencryptionoptions",
        "body":[
            "${1:myAWSElasticsearchDomain.NodeToNodeEncryptionOptions}:",
            "  Type: AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-alarm.metricstat":{
        "prefix":"aws-cloudwatch-alarm.metricstat",
        "body":[
            "${1:myAWSCloudWatchAlarm.MetricStat}:",
            "  Type: AWS::CloudWatch::Alarm.MetricStat",
            "  Properties:",
            "    Metric : ${2:aws-cloudwatch-alarmmetricstat.Metric(R)}",
            "    Period : ${3:Integer(R)}",
            "    Stat : ${4:String(R)}",
            "    Unit : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.elasticsearchclusterconfig":{
        "prefix":"aws-elasticsearch-domain.elasticsearchclusterconfig",
        "body":[
            "${1:myAWSElasticsearchDomain.ElasticsearchClusterConfig}:",
            "  Type: AWS::Elasticsearch::Domain.ElasticsearchClusterConfig",
            "  Properties:",
            "    DedicatedMasterCount : ${2:Integer(O)}",
            "    DedicatedMasterEnabled : ${3:Boolean(O)}",
            "    DedicatedMasterType : ${4:String(O)}",
            "    InstanceCount : ${5:Integer(O)}",
            "    InstanceType : ${6:String(O)}",
            "    ZoneAwarenessEnabled : ${7:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function.deadletterconfig":{
        "prefix":"aws-lambda-function.deadletterconfig",
        "body":[
            "${1:myAWSLambdaFunction.DeadLetterConfig}:",
            "  Type: AWS::Lambda::Function.DeadLetterConfig",
            "  Properties:",
            "    TargetArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-stepfunctions-statemachine.tagsentry":{
        "prefix":"aws-stepfunctions-statemachine.tagsentry",
        "body":[
            "${1:myAWSStepFunctionsStateMachine.TagsEntry}:",
            "  Type: AWS::StepFunctions::StateMachine.TagsEntry",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.execution":{
        "prefix":"aws-greengrass-functiondefinitionversion.execution",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.Execution}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.Execution",
            "  Properties:",
            "    IsolationMode : ${2:String(O)}",
            "    RunAs : ${3:aws-greengrass-functiondefinitionversionexecution.RunAs(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.metricdimension":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.metricdimension",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.MetricDimension}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.MetricDimension",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.budgetdata":{
        "prefix":"aws-budgets-budget.budgetdata",
        "body":[
            "${1:myAWSBudgetsBudget.BudgetData}:",
            "  Type: AWS::Budgets::Budget.BudgetData",
            "  Properties:",
            "    BudgetLimit : ${2:aws-budgets-budgetbudgetdata.Spend(O)}",
            "    TimePeriod : ${3:aws-budgets-budgetbudgetdata.TimePeriod(O)}",
            "    TimeUnit : ${4:String(R)}",
            "    CostFilters : ${5:Json(O)}",
            "    BudgetName : ${6:String(O)}",
            "    CostTypes : ${7:aws-budgets-budgetbudgetdata.CostTypes(O)}",
            "    BudgetType : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.s3contentlocation":{
        "prefix":"aws-kinesisanalyticsv2-application.s3contentlocation",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.S3ContentLocation}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.S3ContentLocation",
            "  Properties:",
            "    BucketARN : ${2:String(O)}",
            "    FileKey : ${3:String(O)}",
            "    ObjectVersion : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline.rulegroup":{
        "prefix":"aws-ssm-patchbaseline.rulegroup",
        "body":[
            "${1:myAWSSSMPatchBaseline.RuleGroup}:",
            "  Type: AWS::SSM::PatchBaseline.RuleGroup",
            "  Properties:",
            "    PatchRules : [ ${2:aws-ssm-patchbaselinerulegroup.Rule(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "alexa-ask-skill.authenticationconfiguration":{
        "prefix":"alexa-ask-skill.authenticationconfiguration",
        "body":[
            "${1:myAlexaASKSkill.AuthenticationConfiguration}:",
            "  Type: Alexa::ASK::Skill.AuthenticationConfiguration",
            "  Properties:",
            "    RefreshToken : ${2:String(R)}",
            "    ClientSecret : ${3:String(R)}",
            "    ClientId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-usageplan.apistage":{
        "prefix":"aws-apigateway-usageplan.apistage",
        "body":[
            "${1:myAWSApiGatewayUsagePlan.ApiStage}:",
            "  Type: AWS::ApiGateway::UsagePlan.ApiStage",
            "  Properties:",
            "    ApiId : ${2:String(O)}",
            "    Stage : ${3:String(O)}",
            "    Throttle : [ ${4:aws-apigateway-usageplanapistage.ThrottleSettings(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configurationrecorder.recordinggroup":{
        "prefix":"aws-config-configurationrecorder.recordinggroup",
        "body":[
            "${1:myAWSConfigConfigurationRecorder.RecordingGroup}:",
            "  Type: AWS::Config::ConfigurationRecorder.RecordingGroup",
            "  Properties:",
            "    AllSupported : ${2:Boolean(O)}",
            "    IncludeGlobalResourceTypes : ${3:Boolean(O)}",
            "    ResourceTypes : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dlm-lifecyclepolicy.schedule":{
        "prefix":"aws-dlm-lifecyclepolicy.schedule",
        "body":[
            "${1:myAWSDLMLifecyclePolicy.Schedule}:",
            "  Type: AWS::DLM::LifecyclePolicy.Schedule",
            "  Properties:",
            "    TagsToAdd : [ ${2:aws-dlm-lifecyclepolicyschedule.Tag(O)} ]",
            "    CreateRule : ${3:aws-dlm-lifecyclepolicyschedule.CreateRule(O)}",
            "    RetainRule : ${4:aws-dlm-lifecyclepolicyschedule.RetainRule(O)}",
            "    Name : ${5:String(O)}",
            "    CopyTags : ${6:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-webacl.activatedrule":{
        "prefix":"aws-waf-webacl.activatedrule",
        "body":[
            "${1:myAWSWAFWebACL.ActivatedRule}:",
            "  Type: AWS::WAF::WebACL.ActivatedRule",
            "  Properties:",
            "    Action : ${2:aws-waf-webaclactivatedrule.WafAction(O)}",
            "    Priority : ${3:Integer(R)}",
            "    RuleId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbcluster.scalingconfiguration":{
        "prefix":"aws-rds-dbcluster.scalingconfiguration",
        "body":[
            "${1:myAWSRDSDBCluster.ScalingConfiguration}:",
            "  Type: AWS::RDS::DBCluster.ScalingConfiguration",
            "  Properties:",
            "    AutoPause : ${2:Boolean(O)}",
            "    MaxCapacity : ${3:Integer(O)}",
            "    MinCapacity : ${4:Integer(O)}",
            "    SecondsUntilAutoPause : ${5:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.tcproute":{
        "prefix":"aws-appmesh-route.tcproute",
        "body":[
            "${1:myAWSAppMeshRoute.TcpRoute}:",
            "  Type: AWS::AppMesh::Route.TcpRoute",
            "  Properties:",
            "    Action : ${2:aws-appmesh-routetcproute.TcpRouteAction(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-fsx-filesystem.lustreconfiguration":{
        "prefix":"aws-fsx-filesystem.lustreconfiguration",
        "body":[
            "${1:myAWSFSxFileSystem.LustreConfiguration}:",
            "  Type: AWS::FSx::FileSystem.LustreConfiguration",
            "  Properties:",
            "    ImportPath : ${2:String(O)}",
            "    WeeklyMaintenanceStartTime : ${3:String(O)}",
            "    ImportedFileChunkSize : ${4:Integer(O)}",
            "    ExportPath : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-streamingdistribution.trustedsigners":{
        "prefix":"aws-cloudfront-streamingdistribution.trustedsigners",
        "body":[
            "${1:myAWSCloudFrontStreamingDistribution.TrustedSigners}:",
            "  Type: AWS::CloudFront::StreamingDistribution.TrustedSigners",
            "  Properties:",
            "    Enabled : ${2:Boolean(R)}",
            "    AwsAccountNumbers : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.blockdevicemapping":{
        "prefix":"aws-ec2-launchtemplate.blockdevicemapping",
        "body":[
            "${1:myAWSEC2LaunchTemplate.BlockDeviceMapping}:",
            "  Type: AWS::EC2::LaunchTemplate.BlockDeviceMapping",
            "  Properties:",
            "    Ebs : ${2:aws-ec2-launchtemplateblockdevicemapping.Ebs(O)}",
            "    NoDevice : ${3:String(O)}",
            "    VirtualName : ${4:String(O)}",
            "    DeviceName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-application.applicationresourcelifecycleconfig":{
        "prefix":"aws-elasticbeanstalk-application.applicationresourcelifecycleconfig",
        "body":[
            "${1:myAWSElasticBeanstalkApplication.ApplicationResourceLifecycleConfig}:",
            "  Type: AWS::ElasticBeanstalk::Application.ApplicationResourceLifecycleConfig",
            "  Properties:",
            "    ServiceRole : ${2:String(O)}",
            "    VersionLifecycleConfig : ${3:aws-elasticbeanstalk-applicationapplicationresourcelifecycleconfig.ApplicationVersionLifecycleConfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.jsonmappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.jsonmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.JSONMappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.JSONMappingParameters",
            "  Properties:",
            "    RecordRowPath : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.spotoptions":{
        "prefix":"aws-ec2-launchtemplate.spotoptions",
        "body":[
            "${1:myAWSEC2LaunchTemplate.SpotOptions}:",
            "  Type: AWS::EC2::LaunchTemplate.SpotOptions",
            "  Properties:",
            "    SpotInstanceType : ${2:String(O)}",
            "    InstanceInterruptionBehavior : ${3:String(O)}",
            "    MaxPrice : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.bufferinghints":{
        "prefix":"aws-kinesisfirehose-deliverystream.bufferinghints",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.BufferingHints}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.BufferingHints",
            "  Properties:",
            "    IntervalInSeconds : ${2:Integer(R)}",
            "    SizeInMBs : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationcloudwatchloggingoption.cloudwatchloggingoption":{
        "prefix":"aws-kinesisanalyticsv2-applicationcloudwatchloggingoption.cloudwatchloggingoption",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption",
            "  Properties:",
            "    LogStreamARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.outputfileurivalue":{
        "prefix":"aws-iotanalytics-dataset.outputfileurivalue",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.OutputFileUriValue}:",
            "  Type: AWS::IoTAnalytics::Dataset.OutputFileUriValue",
            "  Properties:",
            "    FileName : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.accesscontroltranslation":{
        "prefix":"aws-s3-bucket.accesscontroltranslation",
        "body":[
            "${1:myAWSS3Bucket.AccessControlTranslation}:",
            "  Type: AWS::S3::Bucket.AccessControlTranslation",
            "  Properties:",
            "    Owner : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-coredefinitionversion.core":{
        "prefix":"aws-greengrass-coredefinitionversion.core",
        "body":[
            "${1:myAWSGreengrassCoreDefinitionVersion.Core}:",
            "  Type: AWS::Greengrass::CoreDefinitionVersion.Core",
            "  Properties:",
            "    SyncShadow : ${2:Boolean(O)}",
            "    ThingArn : ${3:String(R)}",
            "    Id : ${4:String(R)}",
            "    CertificateArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-robotapplication.robotsoftwaresuite":{
        "prefix":"aws-robomaker-robotapplication.robotsoftwaresuite",
        "body":[
            "${1:myAWSRoboMakerRobotApplication.RobotSoftwareSuite}:",
            "  Type: AWS::RoboMaker::RobotApplication.RobotSoftwareSuite",
            "  Properties:",
            "    Version : ${2:String(R)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.artifactstoremap":{
        "prefix":"aws-codepipeline-pipeline.artifactstoremap",
        "body":[
            "${1:myAWSCodePipelinePipeline.ArtifactStoreMap}:",
            "  Type: AWS::CodePipeline::Pipeline.ArtifactStoreMap",
            "  Properties:",
            "    ArtifactStore : ${2:aws-codepipeline-pipelineartifactstoremap.ArtifactStore(R)}",
            "    Region : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.resourceinstance":{
        "prefix":"aws-greengrass-resourcedefinitionversion.resourceinstance",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.ResourceInstance}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance",
            "  Properties:",
            "    ResourceDataContainer : ${2:aws-greengrass-resourcedefinitionversionresourceinstance.ResourceDataContainer(R)}",
            "    Id : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-rule.predicate":{
        "prefix":"aws-wafregional-rule.predicate",
        "body":[
            "${1:myAWSWAFRegionalRule.Predicate}:",
            "  Type: AWS::WAFRegional::Rule.Predicate",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    DataId : ${3:String(R)}",
            "    Negated : ${4:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-job.connectionslist":{
        "prefix":"aws-glue-job.connectionslist",
        "body":[
            "${1:myAWSGlueJob.ConnectionsList}:",
            "  Type: AWS::Glue::Job.ConnectionsList",
            "  Properties:",
            "    Connections : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.authenticateoidcconfig":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.authenticateoidcconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.AuthenticateOidcConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateOidcConfig",
            "  Properties:",
            "    AuthenticationRequestExtraParams : [ ${2:String(O)} ]",
            "    AuthorizationEndpoint : ${3:String(R)}",
            "    ClientId : ${4:String(R)}",
            "    ClientSecret : ${5:String(R)}",
            "    Issuer : ${6:String(R)}",
            "    OnUnauthenticatedRequest : ${7:String(O)}",
            "    Scope : ${8:String(O)}",
            "    SessionCookieName : ${9:String(O)}",
            "    SessionTimeout : ${10:Long(O)}",
            "    TokenEndpoint : ${11:String(R)}",
            "    UserInfoEndpoint : ${12:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.spotplacement":{
        "prefix":"aws-ec2-spotfleet.spotplacement",
        "body":[
            "${1:myAWSEC2SpotFleet.SpotPlacement}:",
            "  Type: AWS::EC2::SpotFleet.SpotPlacement",
            "  Properties:",
            "    AvailabilityZone : ${2:String(O)}",
            "    GroupName : ${3:String(O)}",
            "    Tenancy : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.defaultcachebehavior":{
        "prefix":"aws-cloudfront-distribution.defaultcachebehavior",
        "body":[
            "${1:myAWSCloudFrontDistribution.DefaultCacheBehavior}:",
            "  Type: AWS::CloudFront::Distribution.DefaultCacheBehavior",
            "  Properties:",
            "    Compress : ${2:Boolean(O)}",
            "    LambdaFunctionAssociations : [ ${3:aws-cloudfront-distributiondefaultcachebehavior.LambdaFunctionAssociation(O)} ]",
            "    TargetOriginId : ${4:String(R)}",
            "    ViewerProtocolPolicy : ${5:String(R)}",
            "    TrustedSigners : [ ${6:String(O)} ]",
            "    DefaultTTL : ${7:Double(O)}",
            "    FieldLevelEncryptionId : ${8:String(O)}",
            "    AllowedMethods : [ ${9:String(O)} ]",
            "    CachedMethods : [ ${10:String(O)} ]",
            "    SmoothStreaming : ${11:Boolean(O)}",
            "    ForwardedValues : ${12:aws-cloudfront-distributiondefaultcachebehavior.ForwardedValues(R)}",
            "    MinTTL : ${13:Double(O)}",
            "    MaxTTL : ${14:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.functionconfiguration":{
        "prefix":"aws-greengrass-functiondefinition.functionconfiguration",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.FunctionConfiguration}:",
            "  Type: AWS::Greengrass::FunctionDefinition.FunctionConfiguration",
            "  Properties:",
            "    MemorySize : ${2:Integer(R)}",
            "    Pinned : ${3:Boolean(O)}",
            "    ExecArgs : ${4:String(O)}",
            "    Timeout : ${5:Integer(R)}",
            "    EncodingType : ${6:String(O)}",
            "    Environment : ${7:aws-greengrass-functiondefinitionfunctionconfiguration.Environment(O)}",
            "    Executable : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.variable":{
        "prefix":"aws-iotanalytics-dataset.variable",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.Variable}:",
            "  Type: AWS::IoTAnalytics::Dataset.Variable",
            "  Properties:",
            "    DatasetContentVersionValue : ${2:aws-iotanalytics-datasetvariable.DatasetContentVersionValue(O)}",
            "    DoubleValue : ${3:Double(O)}",
            "    OutputFileUriValue : ${4:aws-iotanalytics-datasetvariable.OutputFileUriValue(O)}",
            "    VariableName : ${5:String(R)}",
            "    StringValue : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.capacityreservationpreference":{
        "prefix":"aws-ec2-launchtemplate.capacityreservationpreference",
        "body":[
            "${1:myAWSEC2LaunchTemplate.CapacityReservationPreference}:",
            "  Type: AWS::EC2::LaunchTemplate.CapacityReservationPreference",
            "  Properties:"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-customactiontype.artifactdetails":{
        "prefix":"aws-codepipeline-customactiontype.artifactdetails",
        "body":[
            "${1:myAWSCodePipelineCustomActionType.ArtifactDetails}:",
            "  Type: AWS::CodePipeline::CustomActionType.ArtifactDetails",
            "  Properties:",
            "    MaximumCount : ${2:Integer(R)}",
            "    MinimumCount : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-loggerdefinitionversion.logger":{
        "prefix":"aws-greengrass-loggerdefinitionversion.logger",
        "body":[
            "${1:myAWSGreengrassLoggerDefinitionVersion.Logger}:",
            "  Type: AWS::Greengrass::LoggerDefinitionVersion.Logger",
            "  Properties:",
            "    Space : ${2:Integer(O)}",
            "    Type : ${3:String(R)}",
            "    Level : ${4:String(R)}",
            "    Id : ${5:String(R)}",
            "    Component : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.versioningconfiguration":{
        "prefix":"aws-s3-bucket.versioningconfiguration",
        "body":[
            "${1:myAWSS3Bucket.VersioningConfiguration}:",
            "  Type: AWS::S3::Bucket.VersioningConfiguration",
            "  Properties:",
            "    Status : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.githublocation":{
        "prefix":"aws-codedeploy-deploymentgroup.githublocation",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.GitHubLocation}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.GitHubLocation",
            "  Properties:",
            "    CommitId : ${2:String(R)}",
            "    Repository : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.csvmappingparameters":{
        "prefix":"aws-kinesisanalytics-application.csvmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.CSVMappingParameters}:",
            "  Type: AWS::KinesisAnalytics::Application.CSVMappingParameters",
            "  Properties:",
            "    RecordRowDelimiter : ${2:String(R)}",
            "    RecordColumnDelimiter : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.targetgroupinfo":{
        "prefix":"aws-codedeploy-deploymentgroup.targetgroupinfo",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.TargetGroupInfo}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo",
            "  Properties:",
            "    Name : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.runas":{
        "prefix":"aws-greengrass-functiondefinitionversion.runas",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.RunAs}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.RunAs",
            "  Properties:",
            "    Uid : ${2:Integer(O)}",
            "    Gid : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkinterface.instanceipv6address":{
        "prefix":"aws-ec2-networkinterface.instanceipv6address",
        "body":[
            "${1:myAWSEC2NetworkInterface.InstanceIpv6Address}:",
            "  Type: AWS::EC2::NetworkInterface.InstanceIpv6Address",
            "  Properties:",
            "    Ipv6Address : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-applicationversion.sourcebundle":{
        "prefix":"aws-elasticbeanstalk-applicationversion.sourcebundle",
        "body":[
            "${1:myAWSElasticBeanstalkApplicationVersion.SourceBundle}:",
            "  Type: AWS::ElasticBeanstalk::ApplicationVersion.SourceBundle",
            "  Properties:",
            "    S3Bucket : ${2:String(R)}",
            "    S3Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-step.keyvalue":{
        "prefix":"aws-emr-step.keyvalue",
        "body":[
            "${1:myAWSEMRStep.KeyValue}:",
            "  Type: AWS::EMR::Step.KeyValue",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationseteventdestination.eventdestination":{
        "prefix":"aws-ses-configurationseteventdestination.eventdestination",
        "body":[
            "${1:myAWSSESConfigurationSetEventDestination.EventDestination}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination.EventDestination",
            "  Properties:",
            "    CloudWatchDestination : ${2:aws-ses-configurationseteventdestinationeventdestination.CloudWatchDestination(O)}",
            "    Enabled : ${3:Boolean(O)}",
            "    MatchingEventTypes : [ ${4:String(R)} ]",
            "    Name : ${5:String(O)}",
            "    KinesisFirehoseDestination : ${6:aws-ses-configurationseteventdestinationeventdestination.KinesisFirehoseDestination(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.customizedscalingmetricspecification":{
        "prefix":"aws-autoscalingplans-scalingplan.customizedscalingmetricspecification",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.CustomizedScalingMetricSpecification}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.CustomizedScalingMetricSpecification",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    Statistic : ${3:String(R)}",
            "    Dimensions : [ ${4:aws-autoscalingplans-scalingplancustomizedscalingmetricspecification.MetricDimension(O)} ]",
            "    Unit : ${5:String(O)}",
            "    Namespace : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.filter":{
        "prefix":"aws-iotanalytics-dataset.filter",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.Filter}:",
            "  Type: AWS::IoTAnalytics::Dataset.Filter",
            "  Properties:",
            "    DeltaTime : ${2:aws-iotanalytics-datasetfilter.DeltaTime(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-hostedzone.hostedzonetag":{
        "prefix":"aws-route53-hostedzone.hostedzonetag",
        "body":[
            "${1:myAWSRoute53HostedZone.HostedZoneTag}:",
            "  Type: AWS::Route53::HostedZone.HostedZoneTag",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplication.renderingengine":{
        "prefix":"aws-robomaker-simulationapplication.renderingengine",
        "body":[
            "${1:myAWSRoboMakerSimulationApplication.RenderingEngine}:",
            "  Type: AWS::RoboMaker::SimulationApplication.RenderingEngine",
            "  Properties:",
            "    Version : ${2:String(R)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-app.environmentvariable":{
        "prefix":"aws-opsworks-app.environmentvariable",
        "body":[
            "${1:myAWSOpsWorksApp.EnvironmentVariable}:",
            "  Type: AWS::OpsWorks::App.EnvironmentVariable",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Secure : ${3:Boolean(O)}",
            "    Value : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-stage.canarysetting":{
        "prefix":"aws-apigateway-stage.canarysetting",
        "body":[
            "${1:myAWSApiGatewayStage.CanarySetting}:",
            "  Type: AWS::ApiGateway::Stage.CanarySetting",
            "  Properties:",
            "    DeploymentId : ${2:String(O)}",
            "    PercentTraffic : ${3:Double(O)}",
            "    StageVariableOverrides : [ ${4:String(O)} ]",
            "    UseStageCache : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.fileaccesslog":{
        "prefix":"aws-appmesh-virtualnode.fileaccesslog",
        "body":[
            "${1:myAWSAppMeshVirtualNode.FileAccessLog}:",
            "  Type: AWS::AppMesh::VirtualNode.FileAccessLog",
            "  Properties:",
            "    Path : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.authenticatecognitoconfig":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.authenticatecognitoconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.AuthenticateCognitoConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateCognitoConfig",
            "  Properties:",
            "    AuthenticationRequestExtraParams : [ ${2:String(O)} ]",
            "    OnUnauthenticatedRequest : ${3:String(O)}",
            "    Scope : ${4:String(O)}",
            "    SessionCookieName : ${5:String(O)}",
            "    SessionTimeout : ${6:Long(O)}",
            "    UserPoolArn : ${7:String(R)}",
            "    UserPoolClientId : ${8:String(R)}",
            "    UserPoolDomain : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.fixedresponseconfig":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.fixedresponseconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.FixedResponseConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.FixedResponseConfig",
            "  Properties:",
            "    ContentType : ${2:String(O)}",
            "    MessageBody : ${3:String(O)}",
            "    StatusCode : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.notificationconfiguration":{
        "prefix":"aws-s3-bucket.notificationconfiguration",
        "body":[
            "${1:myAWSS3Bucket.NotificationConfiguration}:",
            "  Type: AWS::S3::Bucket.NotificationConfiguration",
            "  Properties:",
            "    LambdaConfigurations : [ ${2:aws-s3-bucketnotificationconfiguration.LambdaConfiguration(O)} ]",
            "    QueueConfigurations : [ ${3:aws-s3-bucketnotificationconfiguration.QueueConfiguration(O)} ]",
            "    TopicConfigurations : [ ${4:aws-s3-bucketnotificationconfiguration.TopicConfiguration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.ebsconfiguration":{
        "prefix":"aws-emr-instancefleetconfig.ebsconfiguration",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.EbsConfiguration}:",
            "  Type: AWS::EMR::InstanceFleetConfig.EbsConfiguration",
            "  Properties:",
            "    EbsBlockDeviceConfigs : [ ${2:aws-emr-instancefleetconfigebsconfiguration.EbsBlockDeviceConfig(O)} ]",
            "    EbsOptimized : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-logs-metricfilter.metrictransformation":{
        "prefix":"aws-logs-metricfilter.metrictransformation",
        "body":[
            "${1:myAWSLogsMetricFilter.MetricTransformation}:",
            "  Type: AWS::Logs::MetricFilter.MetricTransformation",
            "  Properties:",
            "    DefaultValue : ${2:Double(O)}",
            "    MetricName : ${3:String(R)}",
            "    MetricNamespace : ${4:String(R)}",
            "    MetricValue : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.ebsblockdevice":{
        "prefix":"aws-ec2-spotfleet.ebsblockdevice",
        "body":[
            "${1:myAWSEC2SpotFleet.EbsBlockDevice}:",
            "  Type: AWS::EC2::SpotFleet.EbsBlockDevice",
            "  Properties:",
            "    DeleteOnTermination : ${2:Boolean(O)}",
            "    Encrypted : ${3:Boolean(O)}",
            "    Iops : ${4:Integer(O)}",
            "    SnapshotId : ${5:String(O)}",
            "    VolumeSize : ${6:Integer(O)}",
            "    VolumeType : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.sourceauth":{
        "prefix":"aws-codebuild-project.sourceauth",
        "body":[
            "${1:myAWSCodeBuildProject.SourceAuth}:",
            "  Type: AWS::CodeBuild::Project.SourceAuth",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Resource : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler.targets":{
        "prefix":"aws-glue-crawler.targets",
        "body":[
            "${1:myAWSGlueCrawler.Targets}:",
            "  Type: AWS::Glue::Crawler.Targets",
            "  Properties:",
            "    S3Targets : [ ${2:aws-glue-crawlertargets.S3Target(O)} ]",
            "    JdbcTargets : [ ${3:aws-glue-crawlertargets.JdbcTarget(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.placementstrategy":{
        "prefix":"aws-ecs-service.placementstrategy",
        "body":[
            "${1:myAWSECSService.PlacementStrategy}:",
            "  Type: AWS::ECS::Service.PlacementStrategy",
            "  Properties:",
            "    Field : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.restrictions":{
        "prefix":"aws-cloudfront-distribution.restrictions",
        "body":[
            "${1:myAWSCloudFrontDistribution.Restrictions}:",
            "  Type: AWS::CloudFront::Distribution.Restrictions",
            "  Properties:",
            "    GeoRestriction : ${2:aws-cloudfront-distributionrestrictions.GeoRestriction(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordsetgroup.recordset":{
        "prefix":"aws-route53-recordsetgroup.recordset",
        "body":[
            "${1:myAWSRoute53RecordSetGroup.RecordSet}:",
            "  Type: AWS::Route53::RecordSetGroup.RecordSet",
            "  Properties:",
            "    AliasTarget : ${2:aws-route53-recordsetgrouprecordset.AliasTarget(O)}",
            "    Comment : ${3:String(O)}",
            "    Failover : ${4:String(O)}",
            "    GeoLocation : ${5:aws-route53-recordsetgrouprecordset.GeoLocation(O)}",
            "    HealthCheckId : ${6:String(O)}",
            "    HostedZoneId : ${7:String(O)}",
            "    HostedZoneName : ${8:String(O)}",
            "    MultiValueAnswer : ${9:Boolean(O)}",
            "    Name : ${10:String(R)}",
            "    Region : ${11:String(O)}",
            "    ResourceRecords : [ ${12:String(O)} ]",
            "    SetIdentifier : ${13:String(O)}",
            "    TTL : ${14:String(O)}",
            "    Type : ${15:String(R)}",
            "    Weight : ${16:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-computeenvironment.computeresources":{
        "prefix":"aws-batch-computeenvironment.computeresources",
        "body":[
            "${1:myAWSBatchComputeEnvironment.ComputeResources}:",
            "  Type: AWS::Batch::ComputeEnvironment.ComputeResources",
            "  Properties:",
            "    SpotIamFleetRole : ${2:String(O)}",
            "    MaxvCpus : ${3:Integer(R)}",
            "    BidPercentage : ${4:Integer(O)}",
            "    SecurityGroupIds : [ ${5:String(R)} ]",
            "    Subnets : [ ${6:String(R)} ]",
            "    Type : ${7:String(R)}",
            "    MinvCpus : ${8:Integer(R)}",
            "    LaunchTemplate : ${9:aws-batch-computeenvironmentcomputeresources.LaunchTemplateSpecification(O)}",
            "    ImageId : ${10:String(O)}",
            "    InstanceRole : ${11:String(R)}",
            "    InstanceTypes : [ ${12:String(R)} ]",
            "    Ec2KeyPair : ${13:String(O)}",
            "    PlacementGroup : ${14:String(O)}",
            "    Tags : ${15:Json(O)}",
            "    DesiredvCpus : ${16:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.sagemakermachinelearningmodelresourcedata":{
        "prefix":"aws-greengrass-resourcedefinitionversion.sagemakermachinelearningmodelresourcedata",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.SageMakerMachineLearningModelResourceData}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData",
            "  Properties:",
            "    DestinationPath : ${2:String(R)}",
            "    SageMakerJobArn : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.action":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.action",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.Action}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.Action",
            "  Properties:",
            "    AuthenticateCognitoConfig : ${2:aws-elasticloadbalancingv2-listenerruleaction.AuthenticateCognitoConfig(O)}",
            "    AuthenticateOidcConfig : ${3:aws-elasticloadbalancingv2-listenerruleaction.AuthenticateOidcConfig(O)}",
            "    FixedResponseConfig : ${4:aws-elasticloadbalancingv2-listenerruleaction.FixedResponseConfig(O)}",
            "    Order : ${5:Integer(O)}",
            "    RedirectConfig : ${6:aws-elasticloadbalancingv2-listenerruleaction.RedirectConfig(O)}",
            "    TargetGroupArn : ${7:String(O)}",
            "    Type : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.loadbalancersconfig":{
        "prefix":"aws-ec2-spotfleet.loadbalancersconfig",
        "body":[
            "${1:myAWSEC2SpotFleet.LoadBalancersConfig}:",
            "  Type: AWS::EC2::SpotFleet.LoadBalancersConfig",
            "  Properties:",
            "    ClassicLoadBalancersConfig : ${2:aws-ec2-spotfleetloadbalancersconfig.ClassicLoadBalancersConfig(O)}",
            "    TargetGroupsConfig : ${3:aws-ec2-spotfleetloadbalancersconfig.TargetGroupsConfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.processorparameter":{
        "prefix":"aws-kinesisfirehose-deliverystream.processorparameter",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ProcessorParameter}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ProcessorParameter",
            "  Properties:",
            "    ParameterName : ${2:String(R)}",
            "    ParameterValue : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-apikey.stagekey":{
        "prefix":"aws-apigateway-apikey.stagekey",
        "body":[
            "${1:myAWSApiGatewayApiKey.StageKey}:",
            "  Type: AWS::ApiGateway::ApiKey.StageKey",
            "  Properties:",
            "    RestApiId : ${2:String(O)}",
            "    StageName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.serversideencryptionbydefault":{
        "prefix":"aws-s3-bucket.serversideencryptionbydefault",
        "body":[
            "${1:myAWSS3Bucket.ServerSideEncryptionByDefault}:",
            "  Type: AWS::S3::Bucket.ServerSideEncryptionByDefault",
            "  Properties:",
            "    KMSMasterKeyID : ${2:String(O)}",
            "    SSEAlgorithm : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.ebsblockdeviceconfig":{
        "prefix":"aws-emr-cluster.ebsblockdeviceconfig",
        "body":[
            "${1:myAWSEMRCluster.EbsBlockDeviceConfig}:",
            "  Type: AWS::EMR::Cluster.EbsBlockDeviceConfig",
            "  Properties:",
            "    VolumeSpecification : ${2:aws-emr-clusterebsblockdeviceconfig.VolumeSpecification(R)}",
            "    VolumesPerInstance : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.elbinfo":{
        "prefix":"aws-codedeploy-deploymentgroup.elbinfo",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.ELBInfo}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.ELBInfo",
            "  Properties:",
            "    Name : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-mesh.tagref":{
        "prefix":"aws-appmesh-mesh.tagref",
        "body":[
            "${1:myAWSAppMeshMesh.TagRef}:",
            "  Type: AWS::AppMesh::Mesh.TagRef",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.runcommandtarget":{
        "prefix":"aws-events-rule.runcommandtarget",
        "body":[
            "${1:myAWSEventsRule.RunCommandTarget}:",
            "  Type: AWS::Events::Rule.RunCommandTarget",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Values : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stack.applicationsettings":{
        "prefix":"aws-appstream-stack.applicationsettings",
        "body":[
            "${1:myAWSAppStreamStack.ApplicationSettings}:",
            "  Type: AWS::AppStream::Stack.ApplicationSettings",
            "  Properties:",
            "    SettingsGroup : ${2:String(O)}",
            "    Enabled : ${3:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment.stagedescription":{
        "prefix":"aws-apigateway-deployment.stagedescription",
        "body":[
            "${1:myAWSApiGatewayDeployment.StageDescription}:",
            "  Type: AWS::ApiGateway::Deployment.StageDescription",
            "  Properties:",
            "    AccessLogSetting : ${2:aws-apigateway-deploymentstagedescription.AccessLogSetting(O)}",
            "    CacheClusterEnabled : ${3:Boolean(O)}",
            "    CacheClusterSize : ${4:String(O)}",
            "    CacheDataEncrypted : ${5:Boolean(O)}",
            "    CacheTtlInSeconds : ${6:Integer(O)}",
            "    CachingEnabled : ${7:Boolean(O)}",
            "    CanarySetting : ${8:aws-apigateway-deploymentstagedescription.CanarySetting(O)}",
            "    ClientCertificateId : ${9:String(O)}",
            "    DataTraceEnabled : ${10:Boolean(O)}",
            "    Description : ${11:String(O)}",
            "    DocumentationVersion : ${12:String(O)}",
            "    LoggingLevel : ${13:String(O)}",
            "    MethodSettings : [ ${14:aws-apigateway-deploymentstagedescription.MethodSetting(O)} ]",
            "    MetricsEnabled : ${15:Boolean(O)}",
            "    Tags : [ ${16:aws-apigateway-deploymentstagedescription.Tag(O)} ]",
            "    ThrottlingBurstLimit : ${17:Integer(O)}",
            "    ThrottlingRateLimit : ${18:Double(O)}",
            "    TracingEnabled : ${19:Boolean(O)}",
            "    Variables : [ ${20:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.fleetlaunchtemplatespecification":{
        "prefix":"aws-ec2-spotfleet.fleetlaunchtemplatespecification",
        "body":[
            "${1:myAWSEC2SpotFleet.FleetLaunchTemplateSpecification}:",
            "  Type: AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification",
            "  Properties:",
            "    LaunchTemplateId : ${2:String(O)}",
            "    LaunchTemplateName : ${3:String(O)}",
            "    Version : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.redirectallrequeststo":{
        "prefix":"aws-s3-bucket.redirectallrequeststo",
        "body":[
            "${1:myAWSS3Bucket.RedirectAllRequestsTo}:",
            "  Type: AWS::S3::Bucket.RedirectAllRequestsTo",
            "  Properties:",
            "    HostName : ${2:String(R)}",
            "    Protocol : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-xssmatchset.xssmatchtuple":{
        "prefix":"aws-waf-xssmatchset.xssmatchtuple",
        "body":[
            "${1:myAWSWAFXssMatchSet.XssMatchTuple}:",
            "  Type: AWS::WAF::XssMatchSet.XssMatchTuple",
            "  Properties:",
            "    FieldToMatch : ${2:aws-waf-xssmatchsetxssmatchtuple.FieldToMatch(R)}",
            "    TextTransformation : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.selectattributes":{
        "prefix":"aws-iotanalytics-pipeline.selectattributes",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.SelectAttributes}:",
            "  Type: AWS::IoTAnalytics::Pipeline.SelectAttributes",
            "  Properties:",
            "    Next : ${2:String(O)}",
            "    Attributes : [ ${3:String(O)} ]",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-rotationschedule.rotationrules":{
        "prefix":"aws-secretsmanager-rotationschedule.rotationrules",
        "body":[
            "${1:myAWSSecretsManagerRotationSchedule.RotationRules}:",
            "  Type: AWS::SecretsManager::RotationSchedule.RotationRules",
            "  Properties:",
            "    AutomaticallyAfterDays : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.environment":{
        "prefix":"aws-codebuild-project.environment",
        "body":[
            "${1:myAWSCodeBuildProject.Environment}:",
            "  Type: AWS::CodeBuild::Project.Environment",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    EnvironmentVariables : [ ${3:aws-codebuild-projectenvironment.EnvironmentVariable(O)} ]",
            "    PrivilegedMode : ${4:Boolean(O)}",
            "    ImagePullCredentialsType : ${5:String(O)}",
            "    Image : ${6:String(R)}",
            "    RegistryCredential : ${7:aws-codebuild-projectenvironment.RegistryCredential(O)}",
            "    ComputeType : ${8:String(R)}",
            "    Certificate : ${9:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.s3keyfilter":{
        "prefix":"aws-s3-bucket.s3keyfilter",
        "body":[
            "${1:myAWSS3Bucket.S3KeyFilter}:",
            "  Type: AWS::S3::Bucket.S3KeyFilter",
            "  Properties:",
            "    Rules : [ ${2:aws-s3-buckets3keyfilter.FilterRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-fleet.domainjoininfo":{
        "prefix":"aws-appstream-fleet.domainjoininfo",
        "body":[
            "${1:myAWSAppStreamFleet.DomainJoinInfo}:",
            "  Type: AWS::AppStream::Fleet.DomainJoinInfo",
            "  Properties:",
            "    OrganizationalUnitDistinguishedName : ${2:String(O)}",
            "    DirectoryName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-template.template":{
        "prefix":"aws-ses-template.template",
        "body":[
            "${1:myAWSSESTemplate.Template}:",
            "  Type: AWS::SES::Template.Template",
            "  Properties:",
            "    HtmlPart : ${2:String(O)}",
            "    TextPart : ${3:String(O)}",
            "    TemplateName : ${4:String(O)}",
            "    SubjectPart : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.lbcookiestickinesspolicy":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.lbcookiestickinesspolicy",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.LBCookieStickinessPolicy}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy",
            "  Properties:",
            "    CookieExpirationPeriod : ${2:String(O)}",
            "    PolicyName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.volume":{
        "prefix":"aws-ec2-instance.volume",
        "body":[
            "${1:myAWSEC2Instance.Volume}:",
            "  Type: AWS::EC2::Instance.Volume",
            "  Properties:",
            "    Device : ${2:String(R)}",
            "    VolumeId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkaclentry.portrange":{
        "prefix":"aws-ec2-networkaclentry.portrange",
        "body":[
            "${1:myAWSEC2NetworkAclEntry.PortRange}:",
            "  Type: AWS::EC2::NetworkAclEntry.PortRange",
            "  Properties:",
            "    From : ${2:Integer(O)}",
            "    To : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-connection.connectioninput":{
        "prefix":"aws-glue-connection.connectioninput",
        "body":[
            "${1:myAWSGlueConnection.ConnectionInput}:",
            "  Type: AWS::Glue::Connection.ConnectionInput",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    ConnectionType : ${3:String(R)}",
            "    MatchCriteria : [ ${4:String(O)} ]",
            "    PhysicalConnectionRequirements : ${5:aws-glue-connectionconnectioninput.PhysicalConnectionRequirements(O)}",
            "    ConnectionProperties : ${6:Json(R)}",
            "    Name : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.origin":{
        "prefix":"aws-cloudfront-distribution.origin",
        "body":[
            "${1:myAWSCloudFrontDistribution.Origin}:",
            "  Type: AWS::CloudFront::Distribution.Origin",
            "  Properties:",
            "    OriginCustomHeaders : [ ${2:aws-cloudfront-distributionorigin.OriginCustomHeader(O)} ]",
            "    DomainName : ${3:String(R)}",
            "    S3OriginConfig : ${4:aws-cloudfront-distributionorigin.S3OriginConfig(O)}",
            "    OriginPath : ${5:String(O)}",
            "    Id : ${6:String(R)}",
            "    CustomOriginConfig : ${7:aws-cloudfront-distributionorigin.CustomOriginConfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-hostedzone.hostedzoneconfig":{
        "prefix":"aws-route53-hostedzone.hostedzoneconfig",
        "body":[
            "${1:myAWSRoute53HostedZone.HostedZoneConfig}:",
            "  Type: AWS::Route53::HostedZone.HostedZoneConfig",
            "  Properties:",
            "    Comment : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.inputtransformer":{
        "prefix":"aws-events-rule.inputtransformer",
        "body":[
            "${1:myAWSEventsRule.InputTransformer}:",
            "  Type: AWS::Events::Rule.InputTransformer",
            "  Properties:",
            "    InputPathsMap : [ ${2:String(O)} ]",
            "    InputTemplate : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.firehoseaction":{
        "prefix":"aws-iot-topicrule.firehoseaction",
        "body":[
            "${1:myAWSIoTTopicRule.FirehoseAction}:",
            "  Type: AWS::IoT::TopicRule.FirehoseAction",
            "  Properties:",
            "    DeliveryStreamName : ${2:String(R)}",
            "    RoleArn : ${3:String(R)}",
            "    Separator : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.logginginfo":{
        "prefix":"aws-ssm-maintenancewindowtask.logginginfo",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.LoggingInfo}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.LoggingInfo",
            "  Properties:",
            "    S3Bucket : ${2:String(R)}",
            "    Region : ${3:String(R)}",
            "    S3Prefix : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.inventoryconfiguration":{
        "prefix":"aws-s3-bucket.inventoryconfiguration",
        "body":[
            "${1:myAWSS3Bucket.InventoryConfiguration}:",
            "  Type: AWS::S3::Bucket.InventoryConfiguration",
            "  Properties:",
            "    Destination : ${2:aws-s3-bucketinventoryconfiguration.Destination(R)}",
            "    Enabled : ${3:Boolean(R)}",
            "    Id : ${4:String(R)}",
            "    IncludedObjectVersions : ${5:String(R)}",
            "    OptionalFields : [ ${6:String(O)} ]",
            "    Prefix : ${7:String(O)}",
            "    ScheduleFrequency : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-workspaces-workspace.workspaceproperties":{
        "prefix":"aws-workspaces-workspace.workspaceproperties",
        "body":[
            "${1:myAWSWorkSpacesWorkspace.WorkspaceProperties}:",
            "  Type: AWS::WorkSpaces::Workspace.WorkspaceProperties",
            "  Properties:",
            "    ComputeTypeName : ${2:String(O)}",
            "    RootVolumeSizeGib : ${3:Integer(O)}",
            "    RunningMode : ${4:String(O)}",
            "    RunningModeAutoStopTimeoutInMinutes : ${5:Integer(O)}",
            "    UserVolumeSizeGib : ${6:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.environment":{
        "prefix":"aws-greengrass-functiondefinition.environment",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.Environment}:",
            "  Type: AWS::Greengrass::FunctionDefinition.Environment",
            "  Properties:",
            "    Variables : ${2:Json(O)}",
            "    Execution : ${3:aws-greengrass-functiondefinitionenvironment.Execution(O)}",
            "    ResourceAccessPolicies : [ ${4:aws-greengrass-functiondefinitionenvironment.ResourceAccessPolicy(O)} ]",
            "    AccessSysfs : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.volumefrom":{
        "prefix":"aws-ecs-taskdefinition.volumefrom",
        "body":[
            "${1:myAWSECSTaskDefinition.VolumeFrom}:",
            "  Type: AWS::ECS::TaskDefinition.VolumeFrom",
            "  Properties:",
            "    ReadOnly : ${2:Boolean(O)}",
            "    SourceContainer : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.deltatime":{
        "prefix":"aws-iotanalytics-dataset.deltatime",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.DeltaTime}:",
            "  Type: AWS::IoTAnalytics::Dataset.DeltaTime",
            "  Properties:",
            "    TimeExpression : ${2:String(R)}",
            "    OffsetSeconds : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint.mongodbsettings":{
        "prefix":"aws-dms-endpoint.mongodbsettings",
        "body":[
            "${1:myAWSDMSEndpoint.MongoDbSettings}:",
            "  Type: AWS::DMS::Endpoint.MongoDbSettings",
            "  Properties:",
            "    AuthSource : ${2:String(O)}",
            "    AuthMechanism : ${3:String(O)}",
            "    Username : ${4:String(O)}",
            "    DocsToInvestigate : ${5:String(O)}",
            "    ServerName : ${6:String(O)}",
            "    Port : ${7:Integer(O)}",
            "    ExtractDocId : ${8:String(O)}",
            "    DatabaseName : ${9:String(O)}",
            "    AuthType : ${10:String(O)}",
            "    Password : ${11:String(O)}",
            "    NestingLevel : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.target":{
        "prefix":"aws-ssm-maintenancewindowtask.target",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.Target}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.Target",
            "  Properties:",
            "    Values : [ ${2:String(O)} ]",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-directoryconfig.serviceaccountcredentials":{
        "prefix":"aws-appstream-directoryconfig.serviceaccountcredentials",
        "body":[
            "${1:myAWSAppStreamDirectoryConfig.ServiceAccountCredentials}:",
            "  Type: AWS::AppStream::DirectoryConfig.ServiceAccountCredentials",
            "  Properties:",
            "    AccountName : ${2:String(R)}",
            "    AccountPassword : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sns-topic.subscription":{
        "prefix":"aws-sns-topic.subscription",
        "body":[
            "${1:myAWSSNSTopic.Subscription}:",
            "  Type: AWS::SNS::Topic.Subscription",
            "  Properties:",
            "    Endpoint : ${2:String(R)}",
            "    Protocol : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.propertygroup":{
        "prefix":"aws-kinesisanalyticsv2-application.propertygroup",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.PropertyGroup}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.PropertyGroup",
            "  Properties:",
            "    PropertyMap : ${2:Json(O)}",
            "    PropertyGroupId : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.onpremisestagsetlistobject":{
        "prefix":"aws-codedeploy-deploymentgroup.onpremisestagsetlistobject",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.OnPremisesTagSetListObject}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject",
            "  Properties:",
            "    OnPremisesTagGroup : [ ${2:aws-codedeploy-deploymentgrouponpremisestagsetlistobject.TagFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.replicationconfiguration":{
        "prefix":"aws-s3-bucket.replicationconfiguration",
        "body":[
            "${1:myAWSS3Bucket.ReplicationConfiguration}:",
            "  Type: AWS::S3::Bucket.ReplicationConfiguration",
            "  Properties:",
            "    Role : ${2:String(R)}",
            "    Rules : [ ${3:aws-s3-bucketreplicationconfiguration.ReplicationRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.input":{
        "prefix":"aws-kinesisanalytics-application.input",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.Input}:",
            "  Type: AWS::KinesisAnalytics::Application.Input",
            "  Properties:",
            "    NamePrefix : ${2:String(R)}",
            "    InputSchema : ${3:aws-kinesisanalytics-applicationinput.InputSchema(R)}",
            "    KinesisStreamsInput : ${4:aws-kinesisanalytics-applicationinput.KinesisStreamsInput(O)}",
            "    KinesisFirehoseInput : ${5:aws-kinesisanalytics-applicationinput.KinesisFirehoseInput(O)}",
            "    InputProcessingConfiguration : ${6:aws-kinesisanalytics-applicationinput.InputProcessingConfiguration(O)}",
            "    InputParallelism : ${7:aws-kinesisanalytics-applicationinput.InputParallelism(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.inputschema":{
        "prefix":"aws-kinesisanalytics-application.inputschema",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.InputSchema}:",
            "  Type: AWS::KinesisAnalytics::Application.InputSchema",
            "  Properties:",
            "    RecordEncoding : ${2:String(O)}",
            "    RecordColumns : [ ${3:aws-kinesisanalytics-applicationinputschema.RecordColumn(R)} ]",
            "    RecordFormat : ${4:aws-kinesisanalytics-applicationinputschema.RecordFormat(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.awsiamconfig":{
        "prefix":"aws-appsync-datasource.awsiamconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.AwsIamConfig}:",
            "  Type: AWS::AppSync::DataSource.AwsIamConfig",
            "  Properties:",
            "    SigningRegion : ${2:String(O)}",
            "    SigningServiceName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.kinesisstreamsinput":{
        "prefix":"aws-kinesisanalyticsv2-application.kinesisstreamsinput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.KinesisStreamsInput}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.KinesisStreamsInput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-dbinstance.processorfeature":{
        "prefix":"aws-rds-dbinstance.processorfeature",
        "body":[
            "${1:myAWSRDSDBInstance.ProcessorFeature}:",
            "  Type: AWS::RDS::DBInstance.ProcessorFeature",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.ssekmsencryptedobjects":{
        "prefix":"aws-s3-bucket.ssekmsencryptedobjects",
        "body":[
            "${1:myAWSS3Bucket.SseKmsEncryptedObjects}:",
            "  Type: AWS::S3::Bucket.SseKmsEncryptedObjects",
            "  Properties:",
            "    Status : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.predefinedmetricspecification":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.predefinedmetricspecification",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.PredefinedMetricSpecification}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.PredefinedMetricSpecification",
            "  Properties:",
            "    PredefinedMetricType : ${2:String(R)}",
            "    ResourceLabel : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.hostentry":{
        "prefix":"aws-ecs-taskdefinition.hostentry",
        "body":[
            "${1:myAWSECSTaskDefinition.HostEntry}:",
            "  Type: AWS::ECS::TaskDefinition.HostEntry",
            "  Properties:",
            "    Hostname : ${2:String(R)}",
            "    IpAddress : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.emailconfiguration":{
        "prefix":"aws-cognito-userpool.emailconfiguration",
        "body":[
            "${1:myAWSCognitoUserPool.EmailConfiguration}:",
            "  Type: AWS::Cognito::UserPool.EmailConfiguration",
            "  Properties:",
            "    ReplyToEmailAddress : ${2:String(O)}",
            "    SourceArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.queueconfiguration":{
        "prefix":"aws-s3-bucket.queueconfiguration",
        "body":[
            "${1:myAWSS3Bucket.QueueConfiguration}:",
            "  Type: AWS::S3::Bucket.QueueConfiguration",
            "  Properties:",
            "    Event : ${2:String(R)}",
            "    Filter : ${3:aws-s3-bucketqueueconfiguration.NotificationFilter(O)}",
            "    Queue : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.scalingaction":{
        "prefix":"aws-emr-instancegroupconfig.scalingaction",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.ScalingAction}:",
            "  Type: AWS::EMR::InstanceGroupConfig.ScalingAction",
            "  Properties:",
            "    Market : ${2:String(O)}",
            "    SimpleScalingPolicyConfiguration : ${3:aws-emr-instancegroupconfigscalingaction.SimpleScalingPolicyConfiguration(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.listeners":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.listeners",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.Listeners}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.Listeners",
            "  Properties:",
            "    InstancePort : ${2:String(R)}",
            "    InstanceProtocol : ${3:String(O)}",
            "    LoadBalancerPort : ${4:String(R)}",
            "    PolicyNames : [ ${5:String(O)} ]",
            "    Protocol : ${6:String(R)}",
            "    SSLCertificateId : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-webhook.webhookfilterrule":{
        "prefix":"aws-codepipeline-webhook.webhookfilterrule",
        "body":[
            "${1:myAWSCodePipelineWebhook.WebhookFilterRule}:",
            "  Type: AWS::CodePipeline::Webhook.WebhookFilterRule",
            "  Properties:",
            "    JsonPath : ${2:String(R)}",
            "    MatchEquals : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.scalingtrigger":{
        "prefix":"aws-emr-instancegroupconfig.scalingtrigger",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.ScalingTrigger}:",
            "  Type: AWS::EMR::InstanceGroupConfig.ScalingTrigger",
            "  Properties:",
            "    CloudWatchAlarmDefinition : ${2:aws-emr-instancegroupconfigscalingtrigger.CloudWatchAlarmDefinition(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker.maintenancewindow":{
        "prefix":"aws-amazonmq-broker.maintenancewindow",
        "body":[
            "${1:myAWSAmazonMQBroker.MaintenanceWindow}:",
            "  Type: AWS::AmazonMQ::Broker.MaintenanceWindow",
            "  Properties:",
            "    DayOfWeek : ${2:String(R)}",
            "    TimeOfDay : ${3:String(R)}",
            "    TimeZone : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-connection.physicalconnectionrequirements":{
        "prefix":"aws-glue-connection.physicalconnectionrequirements",
        "body":[
            "${1:myAWSGlueConnection.PhysicalConnectionRequirements}:",
            "  Type: AWS::Glue::Connection.PhysicalConnectionRequirements",
            "  Properties:",
            "    AvailabilityZone : ${2:String(O)}",
            "    SecurityGroupIdList : [ ${3:String(O)} ]",
            "    SubnetId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-loadbalancer.loadbalancerattribute":{
        "prefix":"aws-elasticloadbalancingv2-loadbalancer.loadbalancerattribute",
        "body":[
            "${1:myAWSElasticLoadBalancingV2LoadBalancer.LoadBalancerAttribute}:",
            "  Type: AWS::ElasticLoadBalancingV2::LoadBalancer.LoadBalancerAttribute",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.targetgroup":{
        "prefix":"aws-ec2-spotfleet.targetgroup",
        "body":[
            "${1:myAWSEC2SpotFleet.TargetGroup}:",
            "  Type: AWS::EC2::SpotFleet.TargetGroup",
            "  Properties:",
            "    Arn : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.elasticgpuspecification":{
        "prefix":"aws-ec2-launchtemplate.elasticgpuspecification",
        "body":[
            "${1:myAWSEC2LaunchTemplate.ElasticGpuSpecification}:",
            "  Type: AWS::EC2::LaunchTemplate.ElasticGpuSpecification",
            "  Properties:",
            "    Type : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.ondemandoptionsrequest":{
        "prefix":"aws-ec2-ec2fleet.ondemandoptionsrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.OnDemandOptionsRequest}:",
            "  Type: AWS::EC2::EC2Fleet.OnDemandOptionsRequest",
            "  Properties:",
            "    AllocationStrategy : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.taskdefinitionplacementconstraint":{
        "prefix":"aws-ecs-taskdefinition.taskdefinitionplacementconstraint",
        "body":[
            "${1:myAWSECSTaskDefinition.TaskDefinitionPlacementConstraint}:",
            "  Type: AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint",
            "  Properties:",
            "    Expression : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.recordformat":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.recordformat",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.RecordFormat}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordFormat",
            "  Properties:",
            "    MappingParameters : ${2:aws-kinesisanalytics-applicationreferencedatasourcerecordformat.MappingParameters(O)}",
            "    RecordFormatType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler.jdbctarget":{
        "prefix":"aws-glue-crawler.jdbctarget",
        "body":[
            "${1:myAWSGlueCrawler.JdbcTarget}:",
            "  Type: AWS::Glue::Crawler.JdbcTarget",
            "  Properties:",
            "    ConnectionName : ${2:String(O)}",
            "    Path : ${3:String(O)}",
            "    Exclusions : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkinterface.privateipaddressspecification":{
        "prefix":"aws-ec2-networkinterface.privateipaddressspecification",
        "body":[
            "${1:myAWSEC2NetworkInterface.PrivateIpAddressSpecification}:",
            "  Type: AWS::EC2::NetworkInterface.PrivateIpAddressSpecification",
            "  Properties:",
            "    Primary : ${2:Boolean(R)}",
            "    PrivateIpAddress : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.gitsubmodulesconfig":{
        "prefix":"aws-codebuild-project.gitsubmodulesconfig",
        "body":[
            "${1:myAWSCodeBuildProject.GitSubmodulesConfig}:",
            "  Type: AWS::CodeBuild::Project.GitSubmodulesConfig",
            "  Properties:",
            "    FetchSubmodules : ${2:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.lambdaaction":{
        "prefix":"aws-iot-topicrule.lambdaaction",
        "body":[
            "${1:myAWSIoTTopicRule.LambdaAction}:",
            "  Type: AWS::IoT::TopicRule.LambdaAction",
            "  Properties:",
            "    FunctionArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.functiondefinitionversion":{
        "prefix":"aws-greengrass-functiondefinition.functiondefinitionversion",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.FunctionDefinitionVersion}:",
            "  Type: AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion",
            "  Properties:",
            "    DefaultConfig : ${2:aws-greengrass-functiondefinitionfunctiondefinitionversion.DefaultConfig(O)}",
            "    Functions : [ ${3:aws-greengrass-functiondefinitionfunctiondefinitionversion.Function(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.mappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-application.mappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.MappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.MappingParameters",
            "  Properties:",
            "    JSONMappingParameters : ${2:aws-kinesisanalyticsv2-applicationmappingparameters.JSONMappingParameters(O)}",
            "    CSVMappingParameters : ${3:aws-kinesisanalyticsv2-applicationmappingparameters.CSVMappingParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.deploymentconfiguration":{
        "prefix":"aws-ecs-service.deploymentconfiguration",
        "body":[
            "${1:myAWSECSService.DeploymentConfiguration}:",
            "  Type: AWS::ECS::Service.DeploymentConfiguration",
            "  Properties:",
            "    MaximumPercent : ${2:Integer(O)}",
            "    MinimumHealthyPercent : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.mountpoints":{
        "prefix":"aws-batch-jobdefinition.mountpoints",
        "body":[
            "${1:myAWSBatchJobDefinition.MountPoints}:",
            "  Type: AWS::Batch::JobDefinition.MountPoints",
            "  Properties:",
            "    ReadOnly : ${2:Boolean(O)}",
            "    SourceVolume : ${3:String(O)}",
            "    ContainerPath : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.deploymentstyle":{
        "prefix":"aws-codedeploy-deploymentgroup.deploymentstyle",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.DeploymentStyle}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.DeploymentStyle",
            "  Properties:",
            "    DeploymentOption : ${2:String(O)}",
            "    DeploymentType : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.admincreateuserconfig":{
        "prefix":"aws-cognito-userpool.admincreateuserconfig",
        "body":[
            "${1:myAWSCognitoUserPool.AdminCreateUserConfig}:",
            "  Type: AWS::Cognito::UserPool.AdminCreateUserConfig",
            "  Properties:",
            "    InviteMessageTemplate : ${2:aws-cognito-userpooladmincreateuserconfig.InviteMessageTemplate(O)}",
            "    UnusedAccountValidityDays : ${3:Double(O)}",
            "    AllowAdminCreateUserOnly : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.ebs":{
        "prefix":"aws-ec2-instance.ebs",
        "body":[
            "${1:myAWSEC2Instance.Ebs}:",
            "  Type: AWS::EC2::Instance.Ebs",
            "  Properties:",
            "    DeleteOnTermination : ${2:Boolean(O)}",
            "    Encrypted : ${3:Boolean(O)}",
            "    Iops : ${4:Integer(O)}",
            "    SnapshotId : ${5:String(O)}",
            "    VolumeSize : ${6:Integer(O)}",
            "    VolumeType : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment.canarysetting":{
        "prefix":"aws-apigateway-deployment.canarysetting",
        "body":[
            "${1:myAWSApiGatewayDeployment.CanarySetting}:",
            "  Type: AWS::ApiGateway::Deployment.CanarySetting",
            "  Properties:",
            "    PercentTraffic : ${2:Double(O)}",
            "    StageVariableOverrides : [ ${3:String(O)} ]",
            "    UseStageCache : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.schemaattribute":{
        "prefix":"aws-cognito-userpool.schemaattribute",
        "body":[
            "${1:myAWSCognitoUserPool.SchemaAttribute}:",
            "  Type: AWS::Cognito::UserPool.SchemaAttribute",
            "  Properties:",
            "    DeveloperOnlyAttribute : ${2:Boolean(O)}",
            "    Mutable : ${3:Boolean(O)}",
            "    AttributeDataType : ${4:String(O)}",
            "    StringAttributeConstraints : ${5:aws-cognito-userpoolschemaattribute.StringAttributeConstraints(O)}",
            "    Required : ${6:Boolean(O)}",
            "    NumberAttributeConstraints : ${7:aws-cognito-userpoolschemaattribute.NumberAttributeConstraints(O)}",
            "    Name : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.alarm":{
        "prefix":"aws-codedeploy-deploymentgroup.alarm",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.Alarm}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.Alarm",
            "  Properties:",
            "    Name : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.customizedmetricspecification":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.customizedmetricspecification",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.CustomizedMetricSpecification}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.CustomizedMetricSpecification",
            "  Properties:",
            "    Dimensions : [ ${2:aws-applicationautoscaling-scalingpolicycustomizedmetricspecification.MetricDimension(O)} ]",
            "    MetricName : ${3:String(R)}",
            "    Namespace : ${4:String(R)}",
            "    Statistic : ${5:String(R)}",
            "    Unit : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-model.vpcconfig":{
        "prefix":"aws-sagemaker-model.vpcconfig",
        "body":[
            "${1:myAWSSageMakerModel.VpcConfig}:",
            "  Type: AWS::SageMaker::Model.VpcConfig",
            "  Properties:",
            "    Subnets : [ ${2:String(R)} ]",
            "    SecurityGroupIds : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.tagspecification":{
        "prefix":"aws-ec2-launchtemplate.tagspecification",
        "body":[
            "${1:myAWSEC2LaunchTemplate.TagSpecification}:",
            "  Type: AWS::EC2::LaunchTemplate.TagSpecification",
            "  Properties:",
            "    ResourceType : ${2:String(O)}",
            "    Tags : [ ${3:aws-ec2-launchtemplatetagspecification.Tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-instance.blockdevicemapping":{
        "prefix":"aws-opsworks-instance.blockdevicemapping",
        "body":[
            "${1:myAWSOpsWorksInstance.BlockDeviceMapping}:",
            "  Type: AWS::OpsWorks::Instance.BlockDeviceMapping",
            "  Properties:",
            "    DeviceName : ${2:String(O)}",
            "    Ebs : ${3:aws-opsworks-instanceblockdevicemapping.EbsBlockDevice(O)}",
            "    NoDevice : ${4:String(O)}",
            "    VirtualName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.iaminstanceprofile":{
        "prefix":"aws-ec2-launchtemplate.iaminstanceprofile",
        "body":[
            "${1:myAWSEC2LaunchTemplate.IamInstanceProfile}:",
            "  Type: AWS::EC2::LaunchTemplate.IamInstanceProfile",
            "  Properties:",
            "    Arn : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.numberattributeconstraints":{
        "prefix":"aws-cognito-userpool.numberattributeconstraints",
        "body":[
            "${1:myAWSCognitoUserPool.NumberAttributeConstraints}:",
            "  Type: AWS::Cognito::UserPool.NumberAttributeConstraints",
            "  Properties:",
            "    MinValue : ${2:String(O)}",
            "    MaxValue : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.checkpointconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.checkpointconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.CheckpointConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.CheckpointConfiguration",
            "  Properties:",
            "    ConfigurationType : ${2:String(R)}",
            "    CheckpointInterval : ${3:Integer(O)}",
            "    MinPauseBetweenCheckpoints : ${4:Integer(O)}",
            "    CheckpointingEnabled : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.routespec":{
        "prefix":"aws-appmesh-route.routespec",
        "body":[
            "${1:myAWSAppMeshRoute.RouteSpec}:",
            "  Type: AWS::AppMesh::Route.RouteSpec",
            "  Properties:",
            "    HttpRoute : ${2:aws-appmesh-routeroutespec.HttpRoute(O)}",
            "    TcpRoute : ${3:aws-appmesh-routeroutespec.TcpRoute(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker.loglist":{
        "prefix":"aws-amazonmq-broker.loglist",
        "body":[
            "${1:myAWSAmazonMQBroker.LogList}:",
            "  Type: AWS::AmazonMQ::Broker.LogList",
            "  Properties:",
            "    Audit : ${2:Boolean(O)}",
            "    General : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker.tagsentry":{
        "prefix":"aws-amazonmq-broker.tagsentry",
        "body":[
            "${1:myAWSAmazonMQBroker.TagsEntry}:",
            "  Type: AWS::AmazonMQ::Broker.TagsEntry",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-instance.ebsblockdevice":{
        "prefix":"aws-opsworks-instance.ebsblockdevice",
        "body":[
            "${1:myAWSOpsWorksInstance.EbsBlockDevice}:",
            "  Type: AWS::OpsWorks::Instance.EbsBlockDevice",
            "  Properties:",
            "    DeleteOnTermination : ${2:Boolean(O)}",
            "    Iops : ${3:Integer(O)}",
            "    SnapshotId : ${4:String(O)}",
            "    VolumeSize : ${5:Integer(O)}",
            "    VolumeType : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.pipelineobject":{
        "prefix":"aws-datapipeline-pipeline.pipelineobject",
        "body":[
            "${1:myAWSDataPipelinePipeline.PipelineObject}:",
            "  Type: AWS::DataPipeline::Pipeline.PipelineObject",
            "  Properties:",
            "    Fields : [ ${2:aws-datapipeline-pipelinepipelineobject.Field(R)} ]",
            "    Id : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-documentationpart.location":{
        "prefix":"aws-apigateway-documentationpart.location",
        "body":[
            "${1:myAWSApiGatewayDocumentationPart.Location}:",
            "  Type: AWS::ApiGateway::DocumentationPart.Location",
            "  Properties:",
            "    Method : ${2:String(O)}",
            "    Name : ${3:String(O)}",
            "    Path : ${4:String(O)}",
            "    StatusCode : ${5:String(O)}",
            "    Type : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.nodevice":{
        "prefix":"aws-ec2-instance.nodevice",
        "body":[
            "${1:myAWSEC2Instance.NoDevice}:",
            "  Type: AWS::EC2::Instance.NoDevice",
            "  Properties:"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy.stepadjustment":{
        "prefix":"aws-autoscaling-scalingpolicy.stepadjustment",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy.StepAdjustment}:",
            "  Type: AWS::AutoScaling::ScalingPolicy.StepAdjustment",
            "  Properties:",
            "    MetricIntervalLowerBound : ${2:Double(O)}",
            "    MetricIntervalUpperBound : ${3:Double(O)}",
            "    ScalingAdjustment : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-role.policy":{
        "prefix":"aws-iam-role.policy",
        "body":[
            "${1:myAWSIAMRole.Policy}:",
            "  Type: AWS::IAM::Role.Policy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    PolicyName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.inputparallelism":{
        "prefix":"aws-kinesisanalyticsv2-application.inputparallelism",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.InputParallelism}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.InputParallelism",
            "  Properties:",
            "    Count : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.environment":{
        "prefix":"aws-batch-jobdefinition.environment",
        "body":[
            "${1:myAWSBatchJobDefinition.Environment}:",
            "  Type: AWS::Batch::JobDefinition.Environment",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.cloudwatchalarmdefinition":{
        "prefix":"aws-emr-cluster.cloudwatchalarmdefinition",
        "body":[
            "${1:myAWSEMRCluster.CloudWatchAlarmDefinition}:",
            "  Type: AWS::EMR::Cluster.CloudWatchAlarmDefinition",
            "  Properties:",
            "    ComparisonOperator : ${2:String(R)}",
            "    Dimensions : [ ${3:aws-emr-clustercloudwatchalarmdefinition.MetricDimension(O)} ]",
            "    EvaluationPeriods : ${4:Integer(O)}",
            "    MetricName : ${5:String(R)}",
            "    Namespace : ${6:String(O)}",
            "    Period : ${7:Integer(R)}",
            "    Statistic : ${8:String(O)}",
            "    Threshold : ${9:Double(R)}",
            "    Unit : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler.schedule":{
        "prefix":"aws-glue-crawler.schedule",
        "body":[
            "${1:myAWSGlueCrawler.Schedule}:",
            "  Type: AWS::Glue::Crawler.Schedule",
            "  Properties:",
            "    ScheduleExpression : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack.stackconfigurationmanager":{
        "prefix":"aws-opsworks-stack.stackconfigurationmanager",
        "body":[
            "${1:myAWSOpsWorksStack.StackConfigurationManager}:",
            "  Type: AWS::OpsWorks::Stack.StackConfigurationManager",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    Version : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-streamingdistribution.s3origin":{
        "prefix":"aws-cloudfront-streamingdistribution.s3origin",
        "body":[
            "${1:myAWSCloudFrontStreamingDistribution.S3Origin}:",
            "  Type: AWS::CloudFront::StreamingDistribution.S3Origin",
            "  Properties:",
            "    DomainName : ${2:String(R)}",
            "    OriginAccessIdentity : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.vpcconfig":{
        "prefix":"aws-codebuild-project.vpcconfig",
        "body":[
            "${1:myAWSCodeBuildProject.VpcConfig}:",
            "  Type: AWS::CodeBuild::Project.VpcConfig",
            "  Properties:",
            "    Subnets : [ ${2:String(O)} ]",
            "    VpcId : ${3:String(O)}",
            "    SecurityGroupIds : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.elasticsearchaction":{
        "prefix":"aws-iot-topicrule.elasticsearchaction",
        "body":[
            "${1:myAWSIoTTopicRule.ElasticsearchAction}:",
            "  Type: AWS::IoT::TopicRule.ElasticsearchAction",
            "  Properties:",
            "    Endpoint : ${2:String(R)}",
            "    Id : ${3:String(R)}",
            "    Index : ${4:String(R)}",
            "    RoleArn : ${5:String(R)}",
            "    Type : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.smsconfiguration":{
        "prefix":"aws-cognito-userpool.smsconfiguration",
        "body":[
            "${1:myAWSCognitoUserPool.SmsConfiguration}:",
            "  Type: AWS::Cognito::UserPool.SmsConfiguration",
            "  Properties:",
            "    ExternalId : ${2:String(O)}",
            "    SnsCallerArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-application.applicationversionlifecycleconfig":{
        "prefix":"aws-elasticbeanstalk-application.applicationversionlifecycleconfig",
        "body":[
            "${1:myAWSElasticBeanstalkApplication.ApplicationVersionLifecycleConfig}:",
            "  Type: AWS::ElasticBeanstalk::Application.ApplicationVersionLifecycleConfig",
            "  Properties:",
            "    MaxAgeRule : ${2:aws-elasticbeanstalk-applicationapplicationversionlifecycleconfig.MaxAgeRule(O)}",
            "    MaxCountRule : ${3:aws-elasticbeanstalk-applicationapplicationversionlifecycleconfig.MaxCountRule(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.trigger":{
        "prefix":"aws-iotanalytics-dataset.trigger",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.Trigger}:",
            "  Type: AWS::IoTAnalytics::Dataset.Trigger",
            "  Properties:",
            "    Schedule : ${2:aws-iotanalytics-datasettrigger.Schedule(O)}",
            "    TriggeringDataset : ${3:aws-iotanalytics-datasettrigger.TriggeringDataset(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-targetgroup.matcher":{
        "prefix":"aws-elasticloadbalancingv2-targetgroup.matcher",
        "body":[
            "${1:myAWSElasticLoadBalancingV2TargetGroup.Matcher}:",
            "  Type: AWS::ElasticLoadBalancingV2::TargetGroup.Matcher",
            "  Properties:",
            "    HttpCode : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.dynamodbaction":{
        "prefix":"aws-iot-topicrule.dynamodbaction",
        "body":[
            "${1:myAWSIoTTopicRule.DynamoDBAction}:",
            "  Type: AWS::IoT::TopicRule.DynamoDBAction",
            "  Properties:",
            "    HashKeyField : ${2:String(R)}",
            "    HashKeyType : ${3:String(O)}",
            "    HashKeyValue : ${4:String(R)}",
            "    PayloadField : ${5:String(O)}",
            "    RangeKeyField : ${6:String(O)}",
            "    RangeKeyType : ${7:String(O)}",
            "    RangeKeyValue : ${8:String(O)}",
            "    RoleArn : ${9:String(R)}",
            "    TableName : ${10:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot1click-project.devicetemplate":{
        "prefix":"aws-iot1click-project.devicetemplate",
        "body":[
            "${1:myAWSIoT1ClickProject.DeviceTemplate}:",
            "  Type: AWS::IoT1Click::Project.DeviceTemplate",
            "  Properties:",
            "    DeviceType : ${2:String(O)}",
            "    CallbackOverrides : ${3:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.runas":{
        "prefix":"aws-greengrass-functiondefinition.runas",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.RunAs}:",
            "  Type: AWS::Greengrass::FunctionDefinition.RunAs",
            "  Properties:",
            "    Uid : ${2:Integer(O)}",
            "    Gid : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-targetgroup.targetdescription":{
        "prefix":"aws-elasticloadbalancingv2-targetgroup.targetdescription",
        "body":[
            "${1:myAWSElasticLoadBalancingV2TargetGroup.TargetDescription}:",
            "  Type: AWS::ElasticLoadBalancingV2::TargetGroup.TargetDescription",
            "  Properties:",
            "    AvailabilityZone : ${2:String(O)}",
            "    Id : ${3:String(R)}",
            "    Port : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.placementconstraint":{
        "prefix":"aws-ecs-service.placementconstraint",
        "body":[
            "${1:myAWSECSService.PlacementConstraint}:",
            "  Type: AWS::ECS::Service.PlacementConstraint",
            "  Properties:",
            "    Expression : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.tagfilter":{
        "prefix":"aws-autoscalingplans-scalingplan.tagfilter",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.TagFilter}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.TagFilter",
            "  Properties:",
            "    Values : [ ${2:String(O)} ]",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.creditspecification":{
        "prefix":"aws-ec2-instance.creditspecification",
        "body":[
            "${1:myAWSEC2Instance.CreditSpecification}:",
            "  Type: AWS::EC2::Instance.CreditSpecification",
            "  Properties:",
            "    CPUCredits : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sizeconstraintset.sizeconstraint":{
        "prefix":"aws-wafregional-sizeconstraintset.sizeconstraint",
        "body":[
            "${1:myAWSWAFRegionalSizeConstraintSet.SizeConstraint}:",
            "  Type: AWS::WAFRegional::SizeConstraintSet.SizeConstraint",
            "  Properties:",
            "    ComparisonOperator : ${2:String(R)}",
            "    Size : ${3:Integer(R)}",
            "    TextTransformation : ${4:String(R)}",
            "    FieldToMatch : ${5:aws-wafregional-sizeconstraintsetsizeconstraint.FieldToMatch(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.referencedatasource":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.referencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.ReferenceDataSource}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceDataSource",
            "  Properties:",
            "    ReferenceSchema : ${2:aws-kinesisanalyticsv2-applicationreferencedatasourcereferencedatasource.ReferenceSchema(R)}",
            "    TableName : ${3:String(O)}",
            "    S3ReferenceDataSource : ${4:aws-kinesisanalyticsv2-applicationreferencedatasourcereferencedatasource.S3ReferenceDataSource(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecr-repository.lifecyclepolicy":{
        "prefix":"aws-ecr-repository.lifecyclepolicy",
        "body":[
            "${1:myAWSECRRepository.LifecyclePolicy}:",
            "  Type: AWS::ECR::Repository.LifecyclePolicy",
            "  Properties:",
            "    LifecyclePolicyText : ${2:String(O)}",
            "    RegistryId : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput.kinesisfirehoseoutput":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput.kinesisfirehoseoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput.KinesisFirehoseOutput}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisFirehoseOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-devicedefinitionversion.device":{
        "prefix":"aws-greengrass-devicedefinitionversion.device",
        "body":[
            "${1:myAWSGreengrassDeviceDefinitionVersion.Device}:",
            "  Type: AWS::Greengrass::DeviceDefinitionVersion.Device",
            "  Properties:",
            "    SyncShadow : ${2:Boolean(O)}",
            "    ThingArn : ${3:String(R)}",
            "    Id : ${4:String(R)}",
            "    CertificateArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.tagrequest":{
        "prefix":"aws-ec2-ec2fleet.tagrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.TagRequest}:",
            "  Type: AWS::EC2::EC2Fleet.TagRequest",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.volume":{
        "prefix":"aws-ecs-taskdefinition.volume",
        "body":[
            "${1:myAWSECSTaskDefinition.Volume}:",
            "  Type: AWS::ECS::TaskDefinition.Volume",
            "  Properties:",
            "    DockerVolumeConfiguration : ${2:aws-ecs-taskdefinitionvolume.DockerVolumeConfiguration(O)}",
            "    Host : ${3:aws-ecs-taskdefinitionvolume.HostVolumeProperties(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-hostedzone.queryloggingconfig":{
        "prefix":"aws-route53-hostedzone.queryloggingconfig",
        "body":[
            "${1:myAWSRoute53HostedZone.QueryLoggingConfig}:",
            "  Type: AWS::Route53::HostedZone.QueryLoggingConfig",
            "  Properties:",
            "    CloudWatchLogsLogGroupArn : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-service.healthcheckcustomconfig":{
        "prefix":"aws-servicediscovery-service.healthcheckcustomconfig",
        "body":[
            "${1:myAWSServiceDiscoveryService.HealthCheckCustomConfig}:",
            "  Type: AWS::ServiceDiscovery::Service.HealthCheckCustomConfig",
            "  Properties:",
            "    FailureThreshold : ${2:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-association.s3outputlocation":{
        "prefix":"aws-ssm-association.s3outputlocation",
        "body":[
            "${1:myAWSSSMAssociation.S3OutputLocation}:",
            "  Type: AWS::SSM::Association.S3OutputLocation",
            "  Properties:",
            "    OutputS3BucketName : ${2:String(O)}",
            "    OutputS3KeyPrefix : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-webacl.action":{
        "prefix":"aws-wafregional-webacl.action",
        "body":[
            "${1:myAWSWAFRegionalWebACL.Action}:",
            "  Type: AWS::WAFRegional::WebACL.Action",
            "  Properties:",
            "    Type : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function.code":{
        "prefix":"aws-lambda-function.code",
        "body":[
            "${1:myAWSLambdaFunction.Code}:",
            "  Type: AWS::Lambda::Function.Code",
            "  Properties:",
            "    S3Bucket : ${2:String(O)}",
            "    S3Key : ${3:String(O)}",
            "    S3ObjectVersion : ${4:String(O)}",
            "    ZipFile : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.targetcapacityspecificationrequest":{
        "prefix":"aws-ec2-ec2fleet.targetcapacityspecificationrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.TargetCapacitySpecificationRequest}:",
            "  Type: AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest",
            "  Properties:",
            "    DefaultTargetCapacityType : ${2:String(O)}",
            "    TotalTargetCapacity : ${3:Integer(R)}",
            "    OnDemandTargetCapacity : ${4:Integer(O)}",
            "    SpotTargetCapacity : ${5:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.processor":{
        "prefix":"aws-kinesisfirehose-deliverystream.processor",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.Processor}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.Processor",
            "  Properties:",
            "    Parameters : [ ${2:aws-kinesisfirehose-deliverystreamprocessor.ProcessorParameter(R)} ]",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.inputlambdaprocessor":{
        "prefix":"aws-kinesisanalyticsv2-application.inputlambdaprocessor",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.InputLambdaProcessor}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.InputLambdaProcessor",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.licensespecification":{
        "prefix":"aws-ec2-launchtemplate.licensespecification",
        "body":[
            "${1:myAWSEC2LaunchTemplate.LicenseSpecification}:",
            "  Type: AWS::EC2::LaunchTemplate.LicenseSpecification",
            "  Properties:",
            "    LicenseConfigurationArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.ec2tagfilter":{
        "prefix":"aws-codedeploy-deploymentgroup.ec2tagfilter",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.EC2TagFilter}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.EC2TagFilter",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Type : ${3:String(O)}",
            "    Value : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.corsconfiguration":{
        "prefix":"aws-s3-bucket.corsconfiguration",
        "body":[
            "${1:myAWSS3Bucket.CorsConfiguration}:",
            "  Type: AWS::S3::Bucket.CorsConfiguration",
            "  Properties:",
            "    CorsRules : [ ${2:aws-s3-bucketcorsconfiguration.CorsRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.replicationdestination":{
        "prefix":"aws-s3-bucket.replicationdestination",
        "body":[
            "${1:myAWSS3Bucket.ReplicationDestination}:",
            "  Type: AWS::S3::Bucket.ReplicationDestination",
            "  Properties:",
            "    AccessControlTranslation : ${2:aws-s3-bucketreplicationdestination.AccessControlTranslation(O)}",
            "    Account : ${3:String(O)}",
            "    Bucket : ${4:String(R)}",
            "    EncryptionConfiguration : ${5:aws-s3-bucketreplicationdestination.EncryptionConfiguration(O)}",
            "    StorageClass : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput.kinesisstreamsoutput":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput.kinesisstreamsoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput.KinesisStreamsOutput}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisStreamsOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-securitygroup.egress":{
        "prefix":"aws-ec2-securitygroup.egress",
        "body":[
            "${1:myAWSEC2SecurityGroup.Egress}:",
            "  Type: AWS::EC2::SecurityGroup.Egress",
            "  Properties:",
            "    CidrIp : ${2:String(O)}",
            "    CidrIpv6 : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    DestinationPrefixListId : ${5:String(O)}",
            "    DestinationSecurityGroupId : ${6:String(O)}",
            "    FromPort : ${7:Integer(O)}",
            "    IpProtocol : ${8:String(R)}",
            "    ToPort : ${9:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.channel":{
        "prefix":"aws-iotanalytics-pipeline.channel",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Channel}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Channel",
            "  Properties:",
            "    ChannelName : ${2:String(O)}",
            "    Next : ${3:String(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-cloudformationprovisionedproduct.provisioningparameter":{
        "prefix":"aws-servicecatalog-cloudformationprovisionedproduct.provisioningparameter",
        "body":[
            "${1:myAWSServiceCatalogCloudFormationProvisionedProduct.ProvisioningParameter}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningParameter",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.kinesisaction":{
        "prefix":"aws-iot-topicrule.kinesisaction",
        "body":[
            "${1:myAWSIoTTopicRule.KinesisAction}:",
            "  Type: AWS::IoT::TopicRule.KinesisAction",
            "  Properties:",
            "    PartitionKey : ${2:String(O)}",
            "    RoleArn : ${3:String(R)}",
            "    StreamName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.pointintimerecoveryspecification":{
        "prefix":"aws-dynamodb-table.pointintimerecoveryspecification",
        "body":[
            "${1:myAWSDynamoDBTable.PointInTimeRecoverySpecification}:",
            "  Type: AWS::DynamoDB::Table.PointInTimeRecoverySpecification",
            "  Properties:",
            "    PointInTimeRecoveryEnabled : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-mesh.meshspec":{
        "prefix":"aws-appmesh-mesh.meshspec",
        "body":[
            "${1:myAWSAppMeshMesh.MeshSpec}:",
            "  Type: AWS::AppMesh::Mesh.MeshSpec",
            "  Properties:",
            "    EgressFilter : ${2:aws-appmesh-meshmeshspec.EgressFilter(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-robotapplication.sourceconfig":{
        "prefix":"aws-robomaker-robotapplication.sourceconfig",
        "body":[
            "${1:myAWSRoboMakerRobotApplication.SourceConfig}:",
            "  Type: AWS::RoboMaker::RobotApplication.SourceConfig",
            "  Properties:",
            "    S3Bucket : ${2:String(R)}",
            "    Architecture : ${3:String(R)}",
            "    S3Key : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.flinkapplicationconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.flinkapplicationconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.FlinkApplicationConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.FlinkApplicationConfiguration",
            "  Properties:",
            "    CheckpointConfiguration : ${2:aws-kinesisanalyticsv2-applicationflinkapplicationconfiguration.CheckpointConfiguration(O)}",
            "    ParallelismConfiguration : ${3:aws-kinesisanalyticsv2-applicationflinkapplicationconfiguration.ParallelismConfiguration(O)}",
            "    MonitoringConfiguration : ${4:aws-kinesisanalyticsv2-applicationflinkapplicationconfiguration.MonitoringConfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-route.parameterconstraints":{
        "prefix":"aws-apigatewayv2-route.parameterconstraints",
        "body":[
            "${1:myAWSApiGatewayV2Route.ParameterConstraints}:",
            "  Type: AWS::ApiGatewayV2::Route.ParameterConstraints",
            "  Properties:",
            "    Required : ${2:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.lifecycleeventconfiguration":{
        "prefix":"aws-opsworks-layer.lifecycleeventconfiguration",
        "body":[
            "${1:myAWSOpsWorksLayer.LifecycleEventConfiguration}:",
            "  Type: AWS::OpsWorks::Layer.LifecycleEventConfiguration",
            "  Properties:",
            "    ShutdownEventConfiguration : ${2:aws-opsworks-layerlifecycleeventconfiguration.ShutdownEventConfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack.rdsdbinstance":{
        "prefix":"aws-opsworks-stack.rdsdbinstance",
        "body":[
            "${1:myAWSOpsWorksStack.RdsDbInstance}:",
            "  Type: AWS::OpsWorks::Stack.RdsDbInstance",
            "  Properties:",
            "    DbPassword : ${2:String(R)}",
            "    DbUser : ${3:String(R)}",
            "    RdsDbInstanceArn : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.costtypes":{
        "prefix":"aws-budgets-budget.costtypes",
        "body":[
            "${1:myAWSBudgetsBudget.CostTypes}:",
            "  Type: AWS::Budgets::Budget.CostTypes",
            "  Properties:",
            "    IncludeSupport : ${2:Boolean(O)}",
            "    IncludeOtherSubscription : ${3:Boolean(O)}",
            "    IncludeTax : ${4:Boolean(O)}",
            "    IncludeSubscription : ${5:Boolean(O)}",
            "    UseBlended : ${6:Boolean(O)}",
            "    IncludeUpfront : ${7:Boolean(O)}",
            "    IncludeDiscount : ${8:Boolean(O)}",
            "    IncludeCredit : ${9:Boolean(O)}",
            "    IncludeRecurring : ${10:Boolean(O)}",
            "    UseAmortized : ${11:Boolean(O)}",
            "    IncludeRefund : ${12:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-bytematchset.fieldtomatch":{
        "prefix":"aws-waf-bytematchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFByteMatchSet.FieldToMatch}:",
            "  Type: AWS::WAF::ByteMatchSet.FieldToMatch",
            "  Properties:",
            "    Data : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.action":{
        "prefix":"aws-iot-topicrule.action",
        "body":[
            "${1:myAWSIoTTopicRule.Action}:",
            "  Type: AWS::IoT::TopicRule.Action",
            "  Properties:",
            "    CloudwatchAlarm : ${2:aws-iot-topicruleaction.CloudwatchAlarmAction(O)}",
            "    CloudwatchMetric : ${3:aws-iot-topicruleaction.CloudwatchMetricAction(O)}",
            "    DynamoDB : ${4:aws-iot-topicruleaction.DynamoDBAction(O)}",
            "    DynamoDBv2 : ${5:aws-iot-topicruleaction.DynamoDBv2Action(O)}",
            "    Elasticsearch : ${6:aws-iot-topicruleaction.ElasticsearchAction(O)}",
            "    Firehose : ${7:aws-iot-topicruleaction.FirehoseAction(O)}",
            "    IotAnalytics : ${8:aws-iot-topicruleaction.IotAnalyticsAction(O)}",
            "    Kinesis : ${9:aws-iot-topicruleaction.KinesisAction(O)}",
            "    Lambda : ${10:aws-iot-topicruleaction.LambdaAction(O)}",
            "    Republish : ${11:aws-iot-topicruleaction.RepublishAction(O)}",
            "    S3 : ${12:aws-iot-topicruleaction.S3Action(O)}",
            "    Sns : ${13:aws-iot-topicruleaction.SnsAction(O)}",
            "    Sqs : ${14:aws-iot-topicruleaction.SqsAction(O)}",
            "    StepFunctions : ${15:aws-iot-topicruleaction.StepFunctionsAction(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.accelerateconfiguration":{
        "prefix":"aws-s3-bucket.accelerateconfiguration",
        "body":[
            "${1:myAWSS3Bucket.AccelerateConfiguration}:",
            "  Type: AWS::S3::Bucket.AccelerateConfiguration",
            "  Properties:",
            "    AccelerationStatus : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.filter":{
        "prefix":"aws-iotanalytics-pipeline.filter",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Filter}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Filter",
            "  Properties:",
            "    Filter : ${2:String(O)}",
            "    Next : ${3:String(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-trigger.condition":{
        "prefix":"aws-glue-trigger.condition",
        "body":[
            "${1:myAWSGlueTrigger.Condition}:",
            "  Type: AWS::Glue::Trigger.Condition",
            "  Properties:",
            "    State : ${2:String(O)}",
            "    LogicalOperator : ${3:String(O)}",
            "    JobName : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.csvmappingparameters":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.csvmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.CSVMappingParameters}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.CSVMappingParameters",
            "  Properties:",
            "    RecordRowDelimiter : ${2:String(R)}",
            "    RecordColumnDelimiter : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.distributionconfig":{
        "prefix":"aws-cloudfront-distribution.distributionconfig",
        "body":[
            "${1:myAWSCloudFrontDistribution.DistributionConfig}:",
            "  Type: AWS::CloudFront::Distribution.DistributionConfig",
            "  Properties:",
            "    Logging : ${2:aws-cloudfront-distributiondistributionconfig.Logging(O)}",
            "    Comment : ${3:String(O)}",
            "    DefaultRootObject : ${4:String(O)}",
            "    Origins : [ ${5:aws-cloudfront-distributiondistributionconfig.Origin(O)} ]",
            "    ViewerCertificate : ${6:aws-cloudfront-distributiondistributionconfig.ViewerCertificate(O)}",
            "    PriceClass : ${7:String(O)}",
            "    DefaultCacheBehavior : ${8:aws-cloudfront-distributiondistributionconfig.DefaultCacheBehavior(O)}",
            "    CustomErrorResponses : [ ${9:aws-cloudfront-distributiondistributionconfig.CustomErrorResponse(O)} ]",
            "    Enabled : ${10:Boolean(R)}",
            "    Aliases : [ ${11:String(O)} ]",
            "    IPV6Enabled : ${12:Boolean(O)}",
            "    WebACLId : ${13:String(O)}",
            "    HttpVersion : ${14:String(O)}",
            "    Restrictions : ${15:aws-cloudfront-distributiondistributionconfig.Restrictions(O)}",
            "    CacheBehaviors : [ ${16:aws-cloudfront-distributiondistributionconfig.CacheBehavior(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.noncurrentversiontransition":{
        "prefix":"aws-s3-bucket.noncurrentversiontransition",
        "body":[
            "${1:myAWSS3Bucket.NoncurrentVersionTransition}:",
            "  Type: AWS::S3::Bucket.NoncurrentVersionTransition",
            "  Properties:",
            "    StorageClass : ${2:String(R)}",
            "    TransitionInDays : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.keyvalue":{
        "prefix":"aws-emr-cluster.keyvalue",
        "body":[
            "${1:myAWSEMRCluster.KeyValue}:",
            "  Type: AWS::EMR::Cluster.KeyValue",
            "  Properties:",
            "    Key : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.launchtemplateoverrides":{
        "prefix":"aws-ec2-spotfleet.launchtemplateoverrides",
        "body":[
            "${1:myAWSEC2SpotFleet.LaunchTemplateOverrides}:",
            "  Type: AWS::EC2::SpotFleet.LaunchTemplateOverrides",
            "  Properties:",
            "    AvailabilityZone : ${2:String(O)}",
            "    InstanceType : ${3:String(O)}",
            "    SpotPrice : ${4:String(O)}",
            "    SubnetId : ${5:String(O)}",
            "    WeightedCapacity : ${6:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-alarm.metricdataquery":{
        "prefix":"aws-cloudwatch-alarm.metricdataquery",
        "body":[
            "${1:myAWSCloudWatchAlarm.MetricDataQuery}:",
            "  Type: AWS::CloudWatch::Alarm.MetricDataQuery",
            "  Properties:",
            "    Expression : ${2:String(O)}",
            "    Id : ${3:String(R)}",
            "    Label : ${4:String(O)}",
            "    MetricStat : ${5:aws-cloudwatch-alarmmetricdataquery.MetricStat(O)}",
            "    ReturnData : ${6:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.s3action":{
        "prefix":"aws-ses-receiptrule.s3action",
        "body":[
            "${1:myAWSSESReceiptRule.S3Action}:",
            "  Type: AWS::SES::ReceiptRule.S3Action",
            "  Properties:",
            "    BucketName : ${2:String(R)}",
            "    KmsKeyArn : ${3:String(O)}",
            "    TopicArn : ${4:String(O)}",
            "    ObjectKeyPrefix : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.jsonmappingparameters":{
        "prefix":"aws-kinesisanalytics-application.jsonmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.JSONMappingParameters}:",
            "  Type: AWS::KinesisAnalytics::Application.JSONMappingParameters",
            "  Properties:",
            "    RecordRowPath : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.mappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.mappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.MappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.MappingParameters",
            "  Properties:",
            "    JSONMappingParameters : ${2:aws-kinesisanalyticsv2-applicationreferencedatasourcemappingparameters.JSONMappingParameters(O)}",
            "    CSVMappingParameters : ${3:aws-kinesisanalyticsv2-applicationreferencedatasourcemappingparameters.CSVMappingParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.snapshotoptions":{
        "prefix":"aws-elasticsearch-domain.snapshotoptions",
        "body":[
            "${1:myAWSElasticsearchDomain.SnapshotOptions}:",
            "  Type: AWS::Elasticsearch::Domain.SnapshotOptions",
            "  Properties:",
            "    AutomatedSnapshotStartHour : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-stage.accesslogsetting":{
        "prefix":"aws-apigateway-stage.accesslogsetting",
        "body":[
            "${1:myAWSApiGatewayStage.AccessLogSetting}:",
            "  Type: AWS::ApiGateway::Stage.AccessLogSetting",
            "  Properties:",
            "    DestinationArn : ${2:String(O)}",
            "    Format : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-subscriptiondefinition.subscriptiondefinitionversion":{
        "prefix":"aws-greengrass-subscriptiondefinition.subscriptiondefinitionversion",
        "body":[
            "${1:myAWSGreengrassSubscriptionDefinition.SubscriptionDefinitionVersion}:",
            "  Type: AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion",
            "  Properties:",
            "    Subscriptions : [ ${2:aws-greengrass-subscriptiondefinitionsubscriptiondefinitionversion.Subscription(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.loadbasedautoscaling":{
        "prefix":"aws-opsworks-layer.loadbasedautoscaling",
        "body":[
            "${1:myAWSOpsWorksLayer.LoadBasedAutoScaling}:",
            "  Type: AWS::OpsWorks::Layer.LoadBasedAutoScaling",
            "  Properties:",
            "    DownScaling : ${2:aws-opsworks-layerloadbasedautoscaling.AutoScalingThresholds(O)}",
            "    Enable : ${3:Boolean(O)}",
            "    UpScaling : ${4:aws-opsworks-layerloadbasedautoscaling.AutoScalingThresholds(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.ulimit":{
        "prefix":"aws-batch-jobdefinition.ulimit",
        "body":[
            "${1:myAWSBatchJobDefinition.Ulimit}:",
            "  Type: AWS::Batch::JobDefinition.Ulimit",
            "  Properties:",
            "    SoftLimit : ${2:Integer(R)}",
            "    HardLimit : ${3:Integer(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.volumeshost":{
        "prefix":"aws-batch-jobdefinition.volumeshost",
        "body":[
            "${1:myAWSBatchJobDefinition.VolumesHost}:",
            "  Type: AWS::Batch::JobDefinition.VolumesHost",
            "  Properties:",
            "    SourcePath : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationseteventdestination.dimensionconfiguration":{
        "prefix":"aws-ses-configurationseteventdestination.dimensionconfiguration",
        "body":[
            "${1:myAWSSESConfigurationSetEventDestination.DimensionConfiguration}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination.DimensionConfiguration",
            "  Properties:",
            "    DimensionValueSource : ${2:String(R)}",
            "    DefaultDimensionValue : ${3:String(R)}",
            "    DimensionName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-trigger.predicate":{
        "prefix":"aws-glue-trigger.predicate",
        "body":[
            "${1:myAWSGlueTrigger.Predicate}:",
            "  Type: AWS::Glue::Trigger.Predicate",
            "  Properties:",
            "    Logical : ${2:String(O)}",
            "    Conditions : [ ${3:aws-glue-triggerpredicate.Condition(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-group.policy":{
        "prefix":"aws-iam-group.policy",
        "body":[
            "${1:myAWSIAMGroup.Policy}:",
            "  Type: AWS::IAM::Group.Policy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    PolicyName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.action":{
        "prefix":"aws-iotanalytics-dataset.action",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.Action}:",
            "  Type: AWS::IoTAnalytics::Dataset.Action",
            "  Properties:",
            "    ActionName : ${2:String(R)}",
            "    ContainerAction : ${3:aws-iotanalytics-datasetaction.ContainerAction(O)}",
            "    QueryAction : ${4:aws-iotanalytics-datasetaction.QueryAction(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.order":{
        "prefix":"aws-glue-table.order",
        "body":[
            "${1:myAWSGlueTable.Order}:",
            "  Type: AWS::Glue::Table.Order",
            "  Properties:",
            "    Column : ${2:String(R)}",
            "    SortOrder : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.ebs":{
        "prefix":"aws-ec2-launchtemplate.ebs",
        "body":[
            "${1:myAWSEC2LaunchTemplate.Ebs}:",
            "  Type: AWS::EC2::LaunchTemplate.Ebs",
            "  Properties:",
            "    SnapshotId : ${2:String(O)}",
            "    VolumeType : ${3:String(O)}",
            "    KmsKeyId : ${4:String(O)}",
            "    Encrypted : ${5:Boolean(O)}",
            "    Iops : ${6:Integer(O)}",
            "    VolumeSize : ${7:Integer(O)}",
            "    DeleteOnTermination : ${8:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobqueue.computeenvironmentorder":{
        "prefix":"aws-batch-jobqueue.computeenvironmentorder",
        "body":[
            "${1:myAWSBatchJobQueue.ComputeEnvironmentOrder}:",
            "  Type: AWS::Batch::JobQueue.ComputeEnvironmentOrder",
            "  Properties:",
            "    ComputeEnvironment : ${2:String(R)}",
            "    Order : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.elasticsearchretryoptions":{
        "prefix":"aws-kinesisfirehose-deliverystream.elasticsearchretryoptions",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ElasticsearchRetryOptions}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ElasticsearchRetryOptions",
            "  Properties:",
            "    DurationInSeconds : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.ssespecification":{
        "prefix":"aws-dynamodb-table.ssespecification",
        "body":[
            "${1:myAWSDynamoDBTable.SSESpecification}:",
            "  Type: AWS::DynamoDB::Table.SSESpecification",
            "  Properties:",
            "    SSEEnabled : ${2:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordsetgroup.aliastarget":{
        "prefix":"aws-route53-recordsetgroup.aliastarget",
        "body":[
            "${1:myAWSRoute53RecordSetGroup.AliasTarget}:",
            "  Type: AWS::Route53::RecordSetGroup.AliasTarget",
            "  Properties:",
            "    DNSName : ${2:String(R)}",
            "    EvaluateTargetHealth : ${3:Boolean(O)}",
            "    HostedZoneId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-alias.aliasroutingconfiguration":{
        "prefix":"aws-lambda-alias.aliasroutingconfiguration",
        "body":[
            "${1:myAWSLambdaAlias.AliasRoutingConfiguration}:",
            "  Type: AWS::Lambda::Alias.AliasRoutingConfiguration",
            "  Properties:",
            "    AdditionalVersionWeights : [ ${2:aws-lambda-aliasaliasroutingconfiguration.VersionWeight(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.fleetlaunchtemplateoverridesrequest":{
        "prefix":"aws-ec2-ec2fleet.fleetlaunchtemplateoverridesrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.FleetLaunchTemplateOverridesRequest}:",
            "  Type: AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest",
            "  Properties:",
            "    WeightedCapacity : ${2:Double(O)}",
            "    Priority : ${3:Double(O)}",
            "    AvailabilityZone : ${4:String(O)}",
            "    SubnetId : ${5:String(O)}",
            "    InstanceType : ${6:String(O)}",
            "    MaxPrice : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.abortincompletemultipartupload":{
        "prefix":"aws-s3-bucket.abortincompletemultipartupload",
        "body":[
            "${1:myAWSS3Bucket.AbortIncompleteMultipartUpload}:",
            "  Type: AWS::S3::Bucket.AbortIncompleteMultipartUpload",
            "  Properties:",
            "    DaysAfterInitiation : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.containeraction":{
        "prefix":"aws-iotanalytics-dataset.containeraction",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.ContainerAction}:",
            "  Type: AWS::IoTAnalytics::Dataset.ContainerAction",
            "  Properties:",
            "    Variables : [ ${2:aws-iotanalytics-datasetcontaineraction.Variable(O)} ]",
            "    ExecutionRoleArn : ${3:String(R)}",
            "    Image : ${4:String(R)}",
            "    ResourceConfiguration : ${5:aws-iotanalytics-datasetcontaineraction.ResourceConfiguration(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.input":{
        "prefix":"aws-kinesisanalyticsv2-application.input",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.Input}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.Input",
            "  Properties:",
            "    NamePrefix : ${2:String(R)}",
            "    InputSchema : ${3:aws-kinesisanalyticsv2-applicationinput.InputSchema(R)}",
            "    KinesisStreamsInput : ${4:aws-kinesisanalyticsv2-applicationinput.KinesisStreamsInput(O)}",
            "    KinesisFirehoseInput : ${5:aws-kinesisanalyticsv2-applicationinput.KinesisFirehoseInput(O)}",
            "    InputProcessingConfiguration : ${6:aws-kinesisanalyticsv2-applicationinput.InputProcessingConfiguration(O)}",
            "    InputParallelism : ${7:aws-kinesisanalyticsv2-applicationinput.InputParallelism(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.outputartifact":{
        "prefix":"aws-codepipeline-pipeline.outputartifact",
        "body":[
            "${1:myAWSCodePipelinePipeline.OutputArtifact}:",
            "  Type: AWS::CodePipeline::Pipeline.OutputArtifact",
            "  Properties:",
            "    Name : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.applicationsnapshotconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.applicationsnapshotconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.ApplicationSnapshotConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.ApplicationSnapshotConfiguration",
            "  Properties:",
            "    SnapshotsEnabled : ${2:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-fsx-filesystem.windowsconfiguration":{
        "prefix":"aws-fsx-filesystem.windowsconfiguration",
        "body":[
            "${1:myAWSFSxFileSystem.WindowsConfiguration}:",
            "  Type: AWS::FSx::FileSystem.WindowsConfiguration",
            "  Properties:",
            "    WeeklyMaintenanceStartTime : ${2:String(O)}",
            "    ActiveDirectoryId : ${3:String(O)}",
            "    ThroughputCapacity : ${4:Integer(O)}",
            "    CopyTagsToBackups : ${5:Boolean(O)}",
            "    DailyAutomaticBackupStartTime : ${6:String(O)}",
            "    AutomaticBackupRetentionDays : ${7:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.column":{
        "prefix":"aws-glue-partition.column",
        "body":[
            "${1:myAWSGluePartition.Column}:",
            "  Type: AWS::Glue::Partition.Column",
            "  Properties:",
            "    Comment : ${2:String(O)}",
            "    Type : ${3:String(O)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.kinesisfirehoseinput":{
        "prefix":"aws-kinesisanalyticsv2-application.kinesisfirehoseinput",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.KinesisFirehoseInput}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.KinesisFirehoseInput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.awsvpcconfiguration":{
        "prefix":"aws-ecs-service.awsvpcconfiguration",
        "body":[
            "${1:myAWSECSService.AwsVpcConfiguration}:",
            "  Type: AWS::ECS::Service.AwsVpcConfiguration",
            "  Properties:",
            "    AssignPublicIp : ${2:String(O)}",
            "    SecurityGroups : [ ${3:String(O)} ]",
            "    Subnets : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypoolroleattachment.rolemapping":{
        "prefix":"aws-cognito-identitypoolroleattachment.rolemapping",
        "body":[
            "${1:myAWSCognitoIdentityPoolRoleAttachment.RoleMapping}:",
            "  Type: AWS::Cognito::IdentityPoolRoleAttachment.RoleMapping",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    AmbiguousRoleResolution : ${3:String(O)}",
            "    RulesConfiguration : ${4:aws-cognito-identitypoolroleattachmentrolemapping.RulesConfigurationType(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.s3logsconfig":{
        "prefix":"aws-codebuild-project.s3logsconfig",
        "body":[
            "${1:myAWSCodeBuildProject.S3LogsConfig}:",
            "  Type: AWS::CodeBuild::Project.S3LogsConfig",
            "  Properties:",
            "    Status : ${2:String(R)}",
            "    EncryptionDisabled : ${3:Boolean(O)}",
            "    Location : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.onpremisestagset":{
        "prefix":"aws-codedeploy-deploymentgroup.onpremisestagset",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.OnPremisesTagSet}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet",
            "  Properties:",
            "    OnPremisesTagSetList : [ ${2:aws-codedeploy-deploymentgrouponpremisestagset.OnPremisesTagSetListObject(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-healthcheck.alarmidentifier":{
        "prefix":"aws-route53-healthcheck.alarmidentifier",
        "body":[
            "${1:myAWSRoute53HealthCheck.AlarmIdentifier}:",
            "  Type: AWS::Route53::HealthCheck.AlarmIdentifier",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Region : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.localdeviceresourcedata":{
        "prefix":"aws-greengrass-resourcedefinitionversion.localdeviceresourcedata",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.LocalDeviceResourceData}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData",
            "  Properties:",
            "    SourcePath : ${2:String(R)}",
            "    GroupOwnerSetting : ${3:aws-greengrass-resourcedefinitionversionlocaldeviceresourcedata.GroupOwnerSetting(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplication.simulationsoftwaresuite":{
        "prefix":"aws-robomaker-simulationapplication.simulationsoftwaresuite",
        "body":[
            "${1:myAWSRoboMakerSimulationApplication.SimulationSoftwareSuite}:",
            "  Type: AWS::RoboMaker::SimulationApplication.SimulationSoftwareSuite",
            "  Properties:",
            "    Version : ${2:String(R)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.iotanalyticsaction":{
        "prefix":"aws-iot-topicrule.iotanalyticsaction",
        "body":[
            "${1:myAWSIoTTopicRule.IotAnalyticsAction}:",
            "  Type: AWS::IoT::TopicRule.IotAnalyticsAction",
            "  Properties:",
            "    ChannelName : ${2:String(R)}",
            "    RoleArn : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.backend":{
        "prefix":"aws-appmesh-virtualnode.backend",
        "body":[
            "${1:myAWSAppMeshVirtualNode.Backend}:",
            "  Type: AWS::AppMesh::VirtualNode.Backend",
            "  Properties:",
            "    VirtualService : ${2:aws-appmesh-virtualnodebackend.VirtualServiceBackend(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.origincustomheader":{
        "prefix":"aws-cloudfront-distribution.origincustomheader",
        "body":[
            "${1:myAWSCloudFrontDistribution.OriginCustomHeader}:",
            "  Type: AWS::CloudFront::Distribution.OriginCustomHeader",
            "  Properties:",
            "    HeaderValue : ${2:String(R)}",
            "    HeaderName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-graphqlapi.userpoolconfig":{
        "prefix":"aws-appsync-graphqlapi.userpoolconfig",
        "body":[
            "${1:myAWSAppSyncGraphQLApi.UserPoolConfig}:",
            "  Type: AWS::AppSync::GraphQLApi.UserPoolConfig",
            "  Properties:",
            "    AppIdClientRegex : ${2:String(O)}",
            "    UserPoolId : ${3:String(O)}",
            "    AwsRegion : ${4:String(O)}",
            "    DefaultAction : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-build.s3location":{
        "prefix":"aws-gamelift-build.s3location",
        "body":[
            "${1:myAWSGameLiftBuild.S3Location}:",
            "  Type: AWS::GameLift::Build.S3Location",
            "  Properties:",
            "    Bucket : ${2:String(R)}",
            "    Key : ${3:String(R)}",
            "    RoleArn : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.kmsencryptionconfig":{
        "prefix":"aws-kinesisfirehose-deliverystream.kmsencryptionconfig",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.KMSEncryptionConfig}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.KMSEncryptionConfig",
            "  Properties:",
            "    AWSKMSKeyARN : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.volumespecification":{
        "prefix":"aws-emr-cluster.volumespecification",
        "body":[
            "${1:myAWSEMRCluster.VolumeSpecification}:",
            "  Type: AWS::EMR::Cluster.VolumeSpecification",
            "  Properties:",
            "    Iops : ${2:Integer(O)}",
            "    SizeInGB : ${3:Integer(R)}",
            "    VolumeType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-customactiontype.configurationproperties":{
        "prefix":"aws-codepipeline-customactiontype.configurationproperties",
        "body":[
            "${1:myAWSCodePipelineCustomActionType.ConfigurationProperties}:",
            "  Type: AWS::CodePipeline::CustomActionType.ConfigurationProperties",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Key : ${3:Boolean(R)}",
            "    Name : ${4:String(R)}",
            "    Queryable : ${5:Boolean(O)}",
            "    Required : ${6:Boolean(R)}",
            "    Secret : ${7:Boolean(R)}",
            "    Type : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.spotfleetmonitoring":{
        "prefix":"aws-ec2-spotfleet.spotfleetmonitoring",
        "body":[
            "${1:myAWSEC2SpotFleet.SpotFleetMonitoring}:",
            "  Type: AWS::EC2::SpotFleet.SpotFleetMonitoring",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.encryptionkey":{
        "prefix":"aws-codepipeline-pipeline.encryptionkey",
        "body":[
            "${1:myAWSCodePipelinePipeline.EncryptionKey}:",
            "  Type: AWS::CodePipeline::Pipeline.EncryptionKey",
            "  Properties:",
            "    Id : ${2:String(R)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.dynamodbconfig":{
        "prefix":"aws-appsync-datasource.dynamodbconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.DynamoDBConfig}:",
            "  Type: AWS::AppSync::DataSource.DynamoDBConfig",
            "  Properties:",
            "    TableName : ${2:String(R)}",
            "    AwsRegion : ${3:String(R)}",
            "    UseCallerCredentials : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.publicaccessblockconfiguration":{
        "prefix":"aws-s3-bucket.publicaccessblockconfiguration",
        "body":[
            "${1:myAWSS3Bucket.PublicAccessBlockConfiguration}:",
            "  Type: AWS::S3::Bucket.PublicAccessBlockConfiguration",
            "  Properties:",
            "    BlockPublicAcls : ${2:Boolean(O)}",
            "    BlockPublicPolicy : ${3:Boolean(O)}",
            "    IgnorePublicAcls : ${4:Boolean(O)}",
            "    RestrictPublicBuckets : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.hibernationoptions":{
        "prefix":"aws-ec2-launchtemplate.hibernationoptions",
        "body":[
            "${1:myAWSEC2LaunchTemplate.HibernationOptions}:",
            "  Type: AWS::EC2::LaunchTemplate.HibernationOptions",
            "  Properties:",
            "    Configured : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.volumespecification":{
        "prefix":"aws-emr-instancegroupconfig.volumespecification",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.VolumeSpecification}:",
            "  Type: AWS::EMR::InstanceGroupConfig.VolumeSpecification",
            "  Properties:",
            "    Iops : ${2:Integer(O)}",
            "    SizeInGB : ${3:Integer(R)}",
            "    VolumeType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sqlinjectionmatchset.sqlinjectionmatchtuple":{
        "prefix":"aws-wafregional-sqlinjectionmatchset.sqlinjectionmatchtuple",
        "body":[
            "${1:myAWSWAFRegionalSqlInjectionMatchSet.SqlInjectionMatchTuple}:",
            "  Type: AWS::WAFRegional::SqlInjectionMatchSet.SqlInjectionMatchTuple",
            "  Properties:",
            "    TextTransformation : ${2:String(R)}",
            "    FieldToMatch : ${3:aws-wafregional-sqlinjectionmatchsetsqlinjectionmatchtuple.FieldToMatch(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-optiongroup.optionsetting":{
        "prefix":"aws-rds-optiongroup.optionsetting",
        "body":[
            "${1:myAWSRDSOptionGroup.OptionSetting}:",
            "  Type: AWS::RDS::OptionGroup.OptionSetting",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.deployment":{
        "prefix":"aws-codedeploy-deploymentgroup.deployment",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.Deployment}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.Deployment",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    IgnoreApplicationStopFailures : ${3:Boolean(O)}",
            "    Revision : ${4:aws-codedeploy-deploymentgroupdeployment.RevisionLocation(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypoolroleattachment.mappingrule":{
        "prefix":"aws-cognito-identitypoolroleattachment.mappingrule",
        "body":[
            "${1:myAWSCognitoIdentityPoolRoleAttachment.MappingRule}:",
            "  Type: AWS::Cognito::IdentityPoolRoleAttachment.MappingRule",
            "  Properties:",
            "    MatchType : ${2:String(R)}",
            "    Value : ${3:String(R)}",
            "    Claim : ${4:String(R)}",
            "    RoleARN : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypool.cognitostreams":{
        "prefix":"aws-cognito-identitypool.cognitostreams",
        "body":[
            "${1:myAWSCognitoIdentityPool.CognitoStreams}:",
            "  Type: AWS::Cognito::IdentityPool.CognitoStreams",
            "  Properties:",
            "    StreamingStatus : ${2:String(O)}",
            "    StreamName : ${3:String(O)}",
            "    RoleArn : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.inputschema":{
        "prefix":"aws-kinesisanalyticsv2-application.inputschema",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.InputSchema}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.InputSchema",
            "  Properties:",
            "    RecordEncoding : ${2:String(O)}",
            "    RecordColumns : [ ${3:aws-kinesisanalyticsv2-applicationinputschema.RecordColumn(R)} ]",
            "    RecordFormat : ${4:aws-kinesisanalyticsv2-applicationinputschema.RecordFormat(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.partitioninput":{
        "prefix":"aws-glue-partition.partitioninput",
        "body":[
            "${1:myAWSGluePartition.PartitionInput}:",
            "  Type: AWS::Glue::Partition.PartitionInput",
            "  Properties:",
            "    Parameters : ${2:Json(O)}",
            "    StorageDescriptor : ${3:aws-glue-partitionpartitioninput.StorageDescriptor(O)}",
            "    Values : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.networkconfiguration":{
        "prefix":"aws-ecs-service.networkconfiguration",
        "body":[
            "${1:myAWSECSService.NetworkConfiguration}:",
            "  Type: AWS::ECS::Service.NetworkConfiguration",
            "  Properties:",
            "    AwsvpcConfiguration : ${2:aws-ecs-servicenetworkconfiguration.AwsVpcConfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput.destinationschema":{
        "prefix":"aws-kinesisanalytics-applicationoutput.destinationschema",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput.DestinationSchema}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput.DestinationSchema",
            "  Properties:",
            "    RecordFormatType : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.instancefleetprovisioningspecifications":{
        "prefix":"aws-emr-cluster.instancefleetprovisioningspecifications",
        "body":[
            "${1:myAWSEMRCluster.InstanceFleetProvisioningSpecifications}:",
            "  Type: AWS::EMR::Cluster.InstanceFleetProvisioningSpecifications",
            "  Properties:",
            "    SpotSpecification : ${2:aws-emr-clusterinstancefleetprovisioningspecifications.SpotProvisioningSpecification(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-datastore.retentionperiod":{
        "prefix":"aws-iotanalytics-datastore.retentionperiod",
        "body":[
            "${1:myAWSIoTAnalyticsDatastore.RetentionPeriod}:",
            "  Type: AWS::IoTAnalytics::Datastore.RetentionPeriod",
            "  Properties:",
            "    NumberOfDays : ${2:Integer(O)}",
            "    Unlimited : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dax-cluster.ssespecification":{
        "prefix":"aws-dax-cluster.ssespecification",
        "body":[
            "${1:myAWSDAXCluster.SSESpecification}:",
            "  Type: AWS::DAX::Cluster.SSESpecification",
            "  Properties:",
            "    SSEEnabled : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticache-replicationgroup.nodegroupconfiguration":{
        "prefix":"aws-elasticache-replicationgroup.nodegroupconfiguration",
        "body":[
            "${1:myAWSElastiCacheReplicationGroup.NodeGroupConfiguration}:",
            "  Type: AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration",
            "  Properties:",
            "    NodeGroupId : ${2:String(O)}",
            "    PrimaryAvailabilityZone : ${3:String(O)}",
            "    ReplicaAvailabilityZones : [ ${4:String(O)} ]",
            "    ReplicaCount : ${5:Integer(O)}",
            "    Slots : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.column":{
        "prefix":"aws-glue-table.column",
        "body":[
            "${1:myAWSGlueTable.Column}:",
            "  Type: AWS::Glue::Table.Column",
            "  Properties:",
            "    Comment : ${2:String(O)}",
            "    Type : ${3:String(O)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint.dynamodbsettings":{
        "prefix":"aws-dms-endpoint.dynamodbsettings",
        "body":[
            "${1:myAWSDMSEndpoint.DynamoDbSettings}:",
            "  Type: AWS::DMS::Endpoint.DynamoDbSettings",
            "  Properties:",
            "    ServiceAccessRoleArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-group.groupversion":{
        "prefix":"aws-greengrass-group.groupversion",
        "body":[
            "${1:myAWSGreengrassGroup.GroupVersion}:",
            "  Type: AWS::Greengrass::Group.GroupVersion",
            "  Properties:",
            "    LoggerDefinitionVersionArn : ${2:String(O)}",
            "    DeviceDefinitionVersionArn : ${3:String(O)}",
            "    FunctionDefinitionVersionArn : ${4:String(O)}",
            "    CoreDefinitionVersionArn : ${5:String(O)}",
            "    ResourceDefinitionVersionArn : ${6:String(O)}",
            "    ConnectorDefinitionVersionArn : ${7:String(O)}",
            "    SubscriptionDefinitionVersionArn : ${8:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.maintenancewindowruncommandparameters":{
        "prefix":"aws-ssm-maintenancewindowtask.maintenancewindowruncommandparameters",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.MaintenanceWindowRunCommandParameters}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters",
            "  Properties:",
            "    TimeoutSeconds : ${2:Integer(O)}",
            "    Comment : ${3:String(O)}",
            "    OutputS3KeyPrefix : ${4:String(O)}",
            "    Parameters : ${5:Json(O)}",
            "    DocumentHashType : ${6:String(O)}",
            "    ServiceRoleArn : ${7:String(O)}",
            "    NotificationConfig : ${8:aws-ssm-maintenancewindowtaskmaintenancewindowruncommandparameters.NotificationConfig(O)}",
            "    OutputS3BucketName : ${9:String(O)}",
            "    DocumentHash : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.customizedloadmetricspecification":{
        "prefix":"aws-autoscalingplans-scalingplan.customizedloadmetricspecification",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.CustomizedLoadMetricSpecification}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.CustomizedLoadMetricSpecification",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    Statistic : ${3:String(R)}",
            "    Dimensions : [ ${4:aws-autoscalingplans-scalingplancustomizedloadmetricspecification.MetricDimension(O)} ]",
            "    Unit : ${5:String(O)}",
            "    Namespace : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-application.maxagerule":{
        "prefix":"aws-elasticbeanstalk-application.maxagerule",
        "body":[
            "${1:myAWSElasticBeanstalkApplication.MaxAgeRule}:",
            "  Type: AWS::ElasticBeanstalk::Application.MaxAgeRule",
            "  Properties:",
            "    DeleteSourceFromS3 : ${2:Boolean(O)}",
            "    Enabled : ${3:Boolean(O)}",
            "    MaxAgeInDays : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.autoscalingpolicy":{
        "prefix":"aws-emr-instancegroupconfig.autoscalingpolicy",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.AutoScalingPolicy}:",
            "  Type: AWS::EMR::InstanceGroupConfig.AutoScalingPolicy",
            "  Properties:",
            "    Constraints : ${2:aws-emr-instancegroupconfigautoscalingpolicy.ScalingConstraints(R)}",
            "    Rules : [ ${3:aws-emr-instancegroupconfigautoscalingpolicy.ScalingRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.tmpfs":{
        "prefix":"aws-ecs-taskdefinition.tmpfs",
        "body":[
            "${1:myAWSECSTaskDefinition.Tmpfs}:",
            "  Type: AWS::ECS::TaskDefinition.Tmpfs",
            "  Properties:",
            "    ContainerPath : ${2:String(O)}",
            "    MountOptions : [ ${3:String(O)} ]",
            "    Size : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.ebsconfiguration":{
        "prefix":"aws-emr-instancegroupconfig.ebsconfiguration",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.EbsConfiguration}:",
            "  Type: AWS::EMR::InstanceGroupConfig.EbsConfiguration",
            "  Properties:",
            "    EbsBlockDeviceConfigs : [ ${2:aws-emr-instancegroupconfigebsconfiguration.EbsBlockDeviceConfig(O)} ]",
            "    EbsOptimized : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-deployment.accesslogsetting":{
        "prefix":"aws-apigateway-deployment.accesslogsetting",
        "body":[
            "${1:myAWSApiGatewayDeployment.AccessLogSetting}:",
            "  Type: AWS::ApiGateway::Deployment.AccessLogSetting",
            "  Properties:",
            "    DestinationArn : ${2:String(O)}",
            "    Format : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.webhookfilter":{
        "prefix":"aws-codebuild-project.webhookfilter",
        "body":[
            "${1:myAWSCodeBuildProject.WebhookFilter}:",
            "  Type: AWS::CodeBuild::Project.WebhookFilter",
            "  Properties:",
            "    Pattern : ${2:String(R)}",
            "    Type : ${3:String(R)}",
            "    ExcludeMatchedPattern : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-efs-filesystem.elasticfilesystemtag":{
        "prefix":"aws-efs-filesystem.elasticfilesystemtag",
        "body":[
            "${1:myAWSEFSFileSystem.ElasticFileSystemTag}:",
            "  Type: AWS::EFS::FileSystem.ElasticFileSystemTag",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.environment":{
        "prefix":"aws-greengrass-functiondefinitionversion.environment",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.Environment}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.Environment",
            "  Properties:",
            "    Variables : ${2:Json(O)}",
            "    Execution : ${3:aws-greengrass-functiondefinitionversionenvironment.Execution(O)}",
            "    ResourceAccessPolicies : [ ${4:aws-greengrass-functiondefinitionversionenvironment.ResourceAccessPolicy(O)} ]",
            "    AccessSysfs : ${5:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler.schemachangepolicy":{
        "prefix":"aws-glue-crawler.schemachangepolicy",
        "body":[
            "${1:myAWSGlueCrawler.SchemaChangePolicy}:",
            "  Type: AWS::Glue::Crawler.SchemaChangePolicy",
            "  Properties:",
            "    UpdateBehavior : ${2:String(O)}",
            "    DeleteBehavior : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.stringattributeconstraints":{
        "prefix":"aws-cognito-userpool.stringattributeconstraints",
        "body":[
            "${1:myAWSCognitoUserPool.StringAttributeConstraints}:",
            "  Type: AWS::Cognito::UserPool.StringAttributeConstraints",
            "  Properties:",
            "    MinLength : ${2:String(O)}",
            "    MaxLength : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.portmapping":{
        "prefix":"aws-appmesh-virtualnode.portmapping",
        "body":[
            "${1:myAWSAppMeshVirtualNode.PortMapping}:",
            "  Type: AWS::AppMesh::VirtualNode.PortMapping",
            "  Properties:",
            "    Port : ${2:Integer(R)}",
            "    Protocol : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.artifacts":{
        "prefix":"aws-codebuild-project.artifacts",
        "body":[
            "${1:myAWSCodeBuildProject.Artifacts}:",
            "  Type: AWS::CodeBuild::Project.Artifacts",
            "  Properties:",
            "    Path : ${2:String(O)}",
            "    Type : ${3:String(R)}",
            "    ArtifactIdentifier : ${4:String(O)}",
            "    OverrideArtifactName : ${5:Boolean(O)}",
            "    Packaging : ${6:String(O)}",
            "    EncryptionDisabled : ${7:Boolean(O)}",
            "    Location : ${8:String(O)}",
            "    Name : ${9:String(O)}",
            "    NamespaceType : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-fleet.computecapacity":{
        "prefix":"aws-appstream-fleet.computecapacity",
        "body":[
            "${1:myAWSAppStreamFleet.ComputeCapacity}:",
            "  Type: AWS::AppStream::Fleet.ComputeCapacity",
            "  Properties:",
            "    DesiredInstances : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.timetolivespecification":{
        "prefix":"aws-dynamodb-table.timetolivespecification",
        "body":[
            "${1:myAWSDynamoDBTable.TimeToLiveSpecification}:",
            "  Type: AWS::DynamoDB::Table.TimeToLiveSpecification",
            "  Properties:",
            "    AttributeName : ${2:String(R)}",
            "    Enabled : ${3:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.loadbalancerinfo":{
        "prefix":"aws-codedeploy-deploymentgroup.loadbalancerinfo",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.LoadBalancerInfo}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo",
            "  Properties:",
            "    ElbInfoList : [ ${2:aws-codedeploy-deploymentgrouploadbalancerinfo.ELBInfo(O)} ]",
            "    TargetGroupInfoList : [ ${3:aws-codedeploy-deploymentgrouploadbalancerinfo.TargetGroupInfo(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.recordcolumn":{
        "prefix":"aws-kinesisanalyticsv2-application.recordcolumn",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.RecordColumn}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.RecordColumn",
            "  Properties:",
            "    Mapping : ${2:String(O)}",
            "    SqlType : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.notificationwithsubscribers":{
        "prefix":"aws-budgets-budget.notificationwithsubscribers",
        "body":[
            "${1:myAWSBudgetsBudget.NotificationWithSubscribers}:",
            "  Type: AWS::Budgets::Budget.NotificationWithSubscribers",
            "  Properties:",
            "    Subscribers : [ ${2:aws-budgets-budgetnotificationwithsubscribers.Subscriber(R)} ]",
            "    Notification : ${3:aws-budgets-budgetnotificationwithsubscribers.Notification(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.revisionlocation":{
        "prefix":"aws-codedeploy-deploymentgroup.revisionlocation",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.RevisionLocation}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.RevisionLocation",
            "  Properties:",
            "    GitHubLocation : ${2:aws-codedeploy-deploymentgrouprevisionlocation.GitHubLocation(O)}",
            "    RevisionType : ${3:String(O)}",
            "    S3Location : ${4:aws-codedeploy-deploymentgrouprevisionlocation.S3Location(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.parameterattribute":{
        "prefix":"aws-datapipeline-pipeline.parameterattribute",
        "body":[
            "${1:myAWSDataPipelinePipeline.ParameterAttribute}:",
            "  Type: AWS::DataPipeline::Pipeline.ParameterAttribute",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    StringValue : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.notificationfilter":{
        "prefix":"aws-s3-bucket.notificationfilter",
        "body":[
            "${1:myAWSS3Bucket.NotificationFilter}:",
            "  Type: AWS::S3::Bucket.NotificationFilter",
            "  Properties:",
            "    S3Key : ${2:aws-s3-bucketnotificationfilter.S3KeyFilter(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.sqsparameters":{
        "prefix":"aws-events-rule.sqsparameters",
        "body":[
            "${1:myAWSEventsRule.SqsParameters}:",
            "  Type: AWS::Events::Rule.SqsParameters",
            "  Properties:",
            "    MessageGroupId : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicecatalog-cloudformationproduct.provisioningartifactproperties":{
        "prefix":"aws-servicecatalog-cloudformationproduct.provisioningartifactproperties",
        "body":[
            "${1:myAWSServiceCatalogCloudFormationProduct.ProvisioningArtifactProperties}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProduct.ProvisioningArtifactProperties",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    Info : ${3:Json(R)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.authorizationconfig":{
        "prefix":"aws-appsync-datasource.authorizationconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.AuthorizationConfig}:",
            "  Type: AWS::AppSync::DataSource.AuthorizationConfig",
            "  Properties:",
            "    AwsIamConfig : ${2:aws-appsync-datasourceauthorizationconfig.AwsIamConfig(O)}",
            "    AuthorizationType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.elasticsearchdestinationconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.elasticsearchdestinationconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ElasticsearchDestinationConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ElasticsearchDestinationConfiguration",
            "  Properties:",
            "    BufferingHints : ${2:aws-kinesisfirehose-deliverystreamelasticsearchdestinationconfiguration.ElasticsearchBufferingHints(R)}",
            "    CloudWatchLoggingOptions : ${3:aws-kinesisfirehose-deliverystreamelasticsearchdestinationconfiguration.CloudWatchLoggingOptions(O)}",
            "    DomainARN : ${4:String(R)}",
            "    IndexName : ${5:String(R)}",
            "    IndexRotationPeriod : ${6:String(R)}",
            "    ProcessingConfiguration : ${7:aws-kinesisfirehose-deliverystreamelasticsearchdestinationconfiguration.ProcessingConfiguration(O)}",
            "    RetryOptions : ${8:aws-kinesisfirehose-deliverystreamelasticsearchdestinationconfiguration.ElasticsearchRetryOptions(R)}",
            "    RoleARN : ${9:String(R)}",
            "    S3BackupMode : ${10:String(R)}",
            "    S3Configuration : ${11:aws-kinesisfirehose-deliverystreamelasticsearchdestinationconfiguration.S3DestinationConfiguration(R)}",
            "    TypeName : ${12:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-securitygroup.ingress":{
        "prefix":"aws-ec2-securitygroup.ingress",
        "body":[
            "${1:myAWSEC2SecurityGroup.Ingress}:",
            "  Type: AWS::EC2::SecurityGroup.Ingress",
            "  Properties:",
            "    CidrIp : ${2:String(O)}",
            "    CidrIpv6 : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    FromPort : ${5:Integer(O)}",
            "    IpProtocol : ${6:String(R)}",
            "    SourcePrefixListId : ${7:String(O)}",
            "    SourceSecurityGroupId : ${8:String(O)}",
            "    SourceSecurityGroupName : ${9:String(O)}",
            "    SourceSecurityGroupOwnerId : ${10:String(O)}",
            "    ToPort : ${11:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.lambdaconfiguration":{
        "prefix":"aws-s3-bucket.lambdaconfiguration",
        "body":[
            "${1:myAWSS3Bucket.LambdaConfiguration}:",
            "  Type: AWS::S3::Bucket.LambdaConfiguration",
            "  Properties:",
            "    Event : ${2:String(R)}",
            "    Filter : ${3:aws-s3-bucketlambdaconfiguration.NotificationFilter(O)}",
            "    Function : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.nodeproperties":{
        "prefix":"aws-batch-jobdefinition.nodeproperties",
        "body":[
            "${1:myAWSBatchJobDefinition.NodeProperties}:",
            "  Type: AWS::Batch::JobDefinition.NodeProperties",
            "  Properties:",
            "    MainNode : ${2:Integer(R)}",
            "    NodeRangeProperties : [ ${3:aws-batch-jobdefinitionnodeproperties.NodeRangeProperty(R)} ]",
            "    NumNodes : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.s3referencedatasource":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.s3referencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.S3ReferenceDataSource}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.S3ReferenceDataSource",
            "  Properties:",
            "    BucketARN : ${2:String(R)}",
            "    FileKey : ${3:String(R)}",
            "    ReferenceRoleARN : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice.virtualservicespec":{
        "prefix":"aws-appmesh-virtualservice.virtualservicespec",
        "body":[
            "${1:myAWSAppMeshVirtualService.VirtualServiceSpec}:",
            "  Type: AWS::AppMesh::VirtualService.VirtualServiceSpec",
            "  Properties:",
            "    Provider : ${2:aws-appmesh-virtualservicevirtualservicespec.VirtualServiceProvider(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-rule.predicate":{
        "prefix":"aws-waf-rule.predicate",
        "body":[
            "${1:myAWSWAFRule.Predicate}:",
            "  Type: AWS::WAF::Rule.Predicate",
            "  Properties:",
            "    DataId : ${2:String(R)}",
            "    Negated : ${3:Boolean(R)}",
            "    Type : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.replicationrule":{
        "prefix":"aws-s3-bucket.replicationrule",
        "body":[
            "${1:myAWSS3Bucket.ReplicationRule}:",
            "  Type: AWS::S3::Bucket.ReplicationRule",
            "  Properties:",
            "    Destination : ${2:aws-s3-bucketreplicationrule.ReplicationDestination(R)}",
            "    Id : ${3:String(O)}",
            "    Prefix : ${4:String(R)}",
            "    SourceSelectionCriteria : ${5:aws-s3-bucketreplicationrule.SourceSelectionCriteria(O)}",
            "    Status : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice.virtualrouterserviceprovider":{
        "prefix":"aws-appmesh-virtualservice.virtualrouterserviceprovider",
        "body":[
            "${1:myAWSAppMeshVirtualService.VirtualRouterServiceProvider}:",
            "  Type: AWS::AppMesh::VirtualService.VirtualRouterServiceProvider",
            "  Properties:",
            "    VirtualRouterName : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.classicloadbalancer":{
        "prefix":"aws-ec2-spotfleet.classicloadbalancer",
        "body":[
            "${1:myAWSEC2SpotFleet.ClassicLoadBalancer}:",
            "  Type: AWS::EC2::SpotFleet.ClassicLoadBalancer",
            "  Properties:",
            "    Name : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.launchtemplatedata":{
        "prefix":"aws-ec2-launchtemplate.launchtemplatedata",
        "body":[
            "${1:myAWSEC2LaunchTemplate.LaunchTemplateData}:",
            "  Type: AWS::EC2::LaunchTemplate.LaunchTemplateData",
            "  Properties:",
            "    SecurityGroups : [ ${2:String(O)} ]",
            "    TagSpecifications : [ ${3:aws-ec2-launchtemplatelaunchtemplatedata.TagSpecification(O)} ]",
            "    UserData : ${4:String(O)}",
            "    BlockDeviceMappings : [ ${5:aws-ec2-launchtemplatelaunchtemplatedata.BlockDeviceMapping(O)} ]",
            "    IamInstanceProfile : ${6:aws-ec2-launchtemplatelaunchtemplatedata.IamInstanceProfile(O)}",
            "    KernelId : ${7:String(O)}",
            "    EbsOptimized : ${8:Boolean(O)}",
            "    ElasticGpuSpecifications : [ ${9:aws-ec2-launchtemplatelaunchtemplatedata.ElasticGpuSpecification(O)} ]",
            "    ElasticInferenceAccelerators : [ ${10:aws-ec2-launchtemplatelaunchtemplatedata.LaunchTemplateElasticInferenceAccelerator(O)} ]",
            "    Placement : ${11:aws-ec2-launchtemplatelaunchtemplatedata.Placement(O)}",
            "    NetworkInterfaces : [ ${12:aws-ec2-launchtemplatelaunchtemplatedata.NetworkInterface(O)} ]",
            "    ImageId : ${13:String(O)}",
            "    InstanceType : ${14:String(O)}",
            "    Monitoring : ${15:aws-ec2-launchtemplatelaunchtemplatedata.Monitoring(O)}",
            "    HibernationOptions : ${16:aws-ec2-launchtemplatelaunchtemplatedata.HibernationOptions(O)}",
            "    LicenseSpecifications : [ ${17:aws-ec2-launchtemplatelaunchtemplatedata.LicenseSpecification(O)} ]",
            "    InstanceInitiatedShutdownBehavior : ${18:String(O)}",
            "    CpuOptions : ${19:aws-ec2-launchtemplatelaunchtemplatedata.CpuOptions(O)}",
            "    SecurityGroupIds : [ ${20:String(O)} ]",
            "    KeyName : ${21:String(O)}",
            "    DisableApiTermination : ${22:Boolean(O)}",
            "    InstanceMarketOptions : ${23:aws-ec2-launchtemplatelaunchtemplatedata.InstanceMarketOptions(O)}",
            "    RamDiskId : ${24:String(O)}",
            "    CapacityReservationSpecification : ${25:aws-ec2-launchtemplatelaunchtemplatedata.CapacityReservationSpecification(O)}",
            "    CreditSpecification : ${26:aws-ec2-launchtemplatelaunchtemplatedata.CreditSpecification(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.parallelismconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.parallelismconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.ParallelismConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.ParallelismConfiguration",
            "  Properties:",
            "    ConfigurationType : ${2:String(R)}",
            "    ParallelismPerKPU : ${3:Integer(O)}",
            "    AutoScalingEnabled : ${4:Boolean(O)}",
            "    Parallelism : ${5:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.defaultconfig":{
        "prefix":"aws-greengrass-functiondefinitionversion.defaultconfig",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.DefaultConfig}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig",
            "  Properties:",
            "    Execution : ${2:aws-greengrass-functiondefinitionversiondefaultconfig.Execution(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.workmailaction":{
        "prefix":"aws-ses-receiptrule.workmailaction",
        "body":[
            "${1:myAWSSESReceiptRule.WorkmailAction}:",
            "  Type: AWS::SES::ReceiptRule.WorkmailAction",
            "  Properties:",
            "    TopicArn : ${2:String(O)}",
            "    OrganizationArn : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.authenticateoidcconfig":{
        "prefix":"aws-elasticloadbalancingv2-listener.authenticateoidcconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.AuthenticateOidcConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.AuthenticateOidcConfig",
            "  Properties:",
            "    AuthenticationRequestExtraParams : [ ${2:String(O)} ]",
            "    AuthorizationEndpoint : ${3:String(R)}",
            "    ClientId : ${4:String(R)}",
            "    ClientSecret : ${5:String(R)}",
            "    Issuer : ${6:String(R)}",
            "    OnUnauthenticatedRequest : ${7:String(O)}",
            "    Scope : ${8:String(O)}",
            "    SessionCookieName : ${9:String(O)}",
            "    SessionTimeout : ${10:Long(O)}",
            "    TokenEndpoint : ${11:String(R)}",
            "    UserInfoEndpoint : ${12:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.vpcoptions":{
        "prefix":"aws-elasticsearch-domain.vpcoptions",
        "body":[
            "${1:myAWSElasticsearchDomain.VPCOptions}:",
            "  Type: AWS::Elasticsearch::Domain.VPCOptions",
            "  Properties:",
            "    SecurityGroupIds : [ ${2:String(O)} ]",
            "    SubnetIds : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.healthcheck":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.healthcheck",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.HealthCheck}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck",
            "  Properties:",
            "    HealthyThreshold : ${2:String(R)}",
            "    Interval : ${3:String(R)}",
            "    Target : ${4:String(R)}",
            "    Timeout : ${5:String(R)}",
            "    UnhealthyThreshold : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.launchtemplateconfig":{
        "prefix":"aws-ec2-spotfleet.launchtemplateconfig",
        "body":[
            "${1:myAWSEC2SpotFleet.LaunchTemplateConfig}:",
            "  Type: AWS::EC2::SpotFleet.LaunchTemplateConfig",
            "  Properties:",
            "    LaunchTemplateSpecification : ${2:aws-ec2-spotfleetlaunchtemplateconfig.FleetLaunchTemplateSpecification(O)}",
            "    Overrides : [ ${3:aws-ec2-spotfleetlaunchtemplateconfig.LaunchTemplateOverrides(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.elasticgpuspecification":{
        "prefix":"aws-ec2-instance.elasticgpuspecification",
        "body":[
            "${1:myAWSEC2Instance.ElasticGpuSpecification}:",
            "  Type: AWS::EC2::Instance.ElasticGpuSpecification",
            "  Properties:",
            "    Type : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.triggerconfig":{
        "prefix":"aws-codedeploy-deploymentgroup.triggerconfig",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.TriggerConfig}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.TriggerConfig",
            "  Properties:",
            "    TriggerEvents : [ ${2:String(O)} ]",
            "    TriggerName : ${3:String(O)}",
            "    TriggerTargetArn : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.csvmappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-application.csvmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.CSVMappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.CSVMappingParameters",
            "  Properties:",
            "    RecordRowDelimiter : ${2:String(R)}",
            "    RecordColumnDelimiter : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.virtualservicebackend":{
        "prefix":"aws-appmesh-virtualnode.virtualservicebackend",
        "body":[
            "${1:myAWSAppMeshVirtualNode.VirtualServiceBackend}:",
            "  Type: AWS::AppMesh::VirtualNode.VirtualServiceBackend",
            "  Properties:",
            "    VirtualServiceName : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.pipelinetag":{
        "prefix":"aws-datapipeline-pipeline.pipelinetag",
        "body":[
            "${1:myAWSDataPipelinePipeline.PipelineTag}:",
            "  Type: AWS::DataPipeline::Pipeline.PipelineTag",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.mappingparameters":{
        "prefix":"aws-kinesisanalytics-application.mappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.MappingParameters}:",
            "  Type: AWS::KinesisAnalytics::Application.MappingParameters",
            "  Properties:",
            "    JSONMappingParameters : ${2:aws-kinesisanalytics-applicationmappingparameters.JSONMappingParameters(O)}",
            "    CSVMappingParameters : ${3:aws-kinesisanalytics-applicationmappingparameters.CSVMappingParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.customoriginconfig":{
        "prefix":"aws-cloudfront-distribution.customoriginconfig",
        "body":[
            "${1:myAWSCloudFrontDistribution.CustomOriginConfig}:",
            "  Type: AWS::CloudFront::Distribution.CustomOriginConfig",
            "  Properties:",
            "    OriginReadTimeout : ${2:Integer(O)}",
            "    HTTPSPort : ${3:Integer(O)}",
            "    OriginKeepaliveTimeout : ${4:Integer(O)}",
            "    OriginSSLProtocols : [ ${5:String(O)} ]",
            "    HTTPPort : ${6:Integer(O)}",
            "    OriginProtocolPolicy : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.monitoringconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.monitoringconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.MonitoringConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.MonitoringConfiguration",
            "  Properties:",
            "    ConfigurationType : ${2:String(R)}",
            "    MetricsLevel : ${3:String(O)}",
            "    LogLevel : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-networkaclentry.icmp":{
        "prefix":"aws-ec2-networkaclentry.icmp",
        "body":[
            "${1:myAWSEC2NetworkAclEntry.Icmp}:",
            "  Type: AWS::EC2::NetworkAclEntry.Icmp",
            "  Properties:",
            "    Code : ${2:Integer(O)}",
            "    Type : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.attributedefinition":{
        "prefix":"aws-dynamodb-table.attributedefinition",
        "body":[
            "${1:myAWSDynamoDBTable.AttributeDefinition}:",
            "  Type: AWS::DynamoDB::Table.AttributeDefinition",
            "  Properties:",
            "    AttributeName : ${2:String(R)}",
            "    AttributeType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-cloudfrontoriginaccessidentity.cloudfrontoriginaccessidentityconfig":{
        "prefix":"aws-cloudfront-cloudfrontoriginaccessidentity.cloudfrontoriginaccessidentityconfig",
        "body":[
            "${1:myAWSCloudFrontCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig}:",
            "  Type: AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig",
            "  Properties:",
            "    Comment : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.activity":{
        "prefix":"aws-iotanalytics-pipeline.activity",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Activity}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Activity",
            "  Properties:",
            "    SelectAttributes : ${2:aws-iotanalytics-pipelineactivity.SelectAttributes(O)}",
            "    Datastore : ${3:aws-iotanalytics-pipelineactivity.Datastore(O)}",
            "    Filter : ${4:aws-iotanalytics-pipelineactivity.Filter(O)}",
            "    AddAttributes : ${5:aws-iotanalytics-pipelineactivity.AddAttributes(O)}",
            "    Channel : ${6:aws-iotanalytics-pipelineactivity.Channel(O)}",
            "    DeviceShadowEnrich : ${7:aws-iotanalytics-pipelineactivity.DeviceShadowEnrich(O)}",
            "    Math : ${8:aws-iotanalytics-pipelineactivity.Math(O)}",
            "    Lambda : ${9:aws-iotanalytics-pipelineactivity.Lambda(O)}",
            "    DeviceRegistryEnrich : ${10:aws-iotanalytics-pipelineactivity.DeviceRegistryEnrich(O)}",
            "    RemoveAttributes : ${11:aws-iotanalytics-pipelineactivity.RemoveAttributes(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.mixedinstancespolicy":{
        "prefix":"aws-autoscaling-autoscalinggroup.mixedinstancespolicy",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.MixedInstancesPolicy}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.MixedInstancesPolicy",
            "  Properties:",
            "    InstancesDistribution : ${2:aws-autoscaling-autoscalinggroupmixedinstancespolicy.InstancesDistribution(O)}",
            "    LaunchTemplate : ${3:aws-autoscaling-autoscalinggroupmixedinstancespolicy.LaunchTemplate(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-endpointconfig.productionvariant":{
        "prefix":"aws-sagemaker-endpointconfig.productionvariant",
        "body":[
            "${1:myAWSSageMakerEndpointConfig.ProductionVariant}:",
            "  Type: AWS::SageMaker::EndpointConfig.ProductionVariant",
            "  Properties:",
            "    ModelName : ${2:String(R)}",
            "    VariantName : ${3:String(R)}",
            "    InitialInstanceCount : ${4:Integer(R)}",
            "    InstanceType : ${5:String(R)}",
            "    AcceleratorType : ${6:String(O)}",
            "    InitialVariantWeight : ${7:Double(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53resolver-resolverendpoint.ipaddressrequest":{
        "prefix":"aws-route53resolver-resolverendpoint.ipaddressrequest",
        "body":[
            "${1:myAWSRoute53ResolverResolverEndpoint.IpAddressRequest}:",
            "  Type: AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest",
            "  Properties:",
            "    Ip : ${2:String(O)}",
            "    SubnetId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.stopaction":{
        "prefix":"aws-ses-receiptrule.stopaction",
        "body":[
            "${1:myAWSSESReceiptRule.StopAction}:",
            "  Type: AWS::SES::ReceiptRule.StopAction",
            "  Properties:",
            "    Scope : ${2:String(R)}",
            "    TopicArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.retrystrategy":{
        "prefix":"aws-batch-jobdefinition.retrystrategy",
        "body":[
            "${1:myAWSBatchJobDefinition.RetryStrategy}:",
            "  Type: AWS::Batch::JobDefinition.RetryStrategy",
            "  Properties:",
            "    Attempts : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.actiondeclaration":{
        "prefix":"aws-codepipeline-pipeline.actiondeclaration",
        "body":[
            "${1:myAWSCodePipelinePipeline.ActionDeclaration}:",
            "  Type: AWS::CodePipeline::Pipeline.ActionDeclaration",
            "  Properties:",
            "    ActionTypeId : ${2:aws-codepipeline-pipelineactiondeclaration.ActionTypeId(R)}",
            "    Configuration : ${3:Json(O)}",
            "    InputArtifacts : [ ${4:aws-codepipeline-pipelineactiondeclaration.InputArtifact(O)} ]",
            "    Name : ${5:String(R)}",
            "    OutputArtifacts : [ ${6:aws-codepipeline-pipelineactiondeclaration.OutputArtifact(O)} ]",
            "    Region : ${7:String(O)}",
            "    RoleArn : ${8:String(O)}",
            "    RunOrder : ${9:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.instancemarketoptions":{
        "prefix":"aws-ec2-launchtemplate.instancemarketoptions",
        "body":[
            "${1:myAWSEC2LaunchTemplate.InstanceMarketOptions}:",
            "  Type: AWS::EC2::LaunchTemplate.InstanceMarketOptions",
            "  Properties:",
            "    SpotOptions : ${2:aws-ec2-launchtemplateinstancemarketoptions.SpotOptions(O)}",
            "    MarketType : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.configuration":{
        "prefix":"aws-emr-instancegroupconfig.configuration",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.Configuration}:",
            "  Type: AWS::EMR::InstanceGroupConfig.Configuration",
            "  Properties:",
            "    Classification : ${2:String(O)}",
            "    ConfigurationProperties : [ ${3:String(O)} ]",
            "    Configurations : [ ${4:aws-emr-instancegroupconfigconfiguration.Configuration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-clusterparametergroup.parameter":{
        "prefix":"aws-redshift-clusterparametergroup.parameter",
        "body":[
            "${1:myAWSRedshiftClusterParameterGroup.Parameter}:",
            "  Type: AWS::Redshift::ClusterParameterGroup.Parameter",
            "  Properties:",
            "    ParameterName : ${2:String(R)}",
            "    ParameterValue : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.volumespecification":{
        "prefix":"aws-emr-instancefleetconfig.volumespecification",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.VolumeSpecification}:",
            "  Type: AWS::EMR::InstanceFleetConfig.VolumeSpecification",
            "  Properties:",
            "    Iops : ${2:Integer(O)}",
            "    SizeInGB : ${3:Integer(R)}",
            "    VolumeType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.instancegroupconfig":{
        "prefix":"aws-emr-cluster.instancegroupconfig",
        "body":[
            "${1:myAWSEMRCluster.InstanceGroupConfig}:",
            "  Type: AWS::EMR::Cluster.InstanceGroupConfig",
            "  Properties:",
            "    AutoScalingPolicy : ${2:aws-emr-clusterinstancegroupconfig.AutoScalingPolicy(O)}",
            "    BidPrice : ${3:String(O)}",
            "    Configurations : [ ${4:aws-emr-clusterinstancegroupconfig.Configuration(O)} ]",
            "    EbsConfiguration : ${5:aws-emr-clusterinstancegroupconfig.EbsConfiguration(O)}",
            "    InstanceCount : ${6:Integer(R)}",
            "    InstanceType : ${7:String(R)}",
            "    Market : ${8:String(O)}",
            "    Name : ${9:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-redshift-cluster.loggingproperties":{
        "prefix":"aws-redshift-cluster.loggingproperties",
        "body":[
            "${1:myAWSRedshiftCluster.LoggingProperties}:",
            "  Type: AWS::Redshift::Cluster.LoggingProperties",
            "  Properties:",
            "    BucketName : ${2:String(R)}",
            "    S3KeyPrefix : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.creditspecification":{
        "prefix":"aws-ec2-launchtemplate.creditspecification",
        "body":[
            "${1:myAWSEC2LaunchTemplate.CreditSpecification}:",
            "  Type: AWS::EC2::LaunchTemplate.CreditSpecification",
            "  Properties:",
            "    CpuCredits : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53resolver-resolverrule.targetaddress":{
        "prefix":"aws-route53resolver-resolverrule.targetaddress",
        "body":[
            "${1:myAWSRoute53ResolverResolverRule.TargetAddress}:",
            "  Type: AWS::Route53Resolver::ResolverRule.TargetAddress",
            "  Properties:",
            "    Ip : ${2:String(R)}",
            "    Port : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplication.robotsoftwaresuite":{
        "prefix":"aws-robomaker-simulationapplication.robotsoftwaresuite",
        "body":[
            "${1:myAWSRoboMakerSimulationApplication.RobotSoftwareSuite}:",
            "  Type: AWS::RoboMaker::SimulationApplication.RobotSoftwareSuite",
            "  Properties:",
            "    Version : ${2:String(R)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.serversideencryptionrule":{
        "prefix":"aws-s3-bucket.serversideencryptionrule",
        "body":[
            "${1:myAWSS3Bucket.ServerSideEncryptionRule}:",
            "  Type: AWS::S3::Bucket.ServerSideEncryptionRule",
            "  Properties:",
            "    ServerSideEncryptionByDefault : ${2:aws-s3-bucketserversideencryptionrule.ServerSideEncryptionByDefault(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-webacl.rule":{
        "prefix":"aws-wafregional-webacl.rule",
        "body":[
            "${1:myAWSWAFRegionalWebACL.Rule}:",
            "  Type: AWS::WAFRegional::WebACL.Rule",
            "  Properties:",
            "    Action : ${2:aws-wafregional-webaclrule.Action(R)}",
            "    Priority : ${3:Integer(R)}",
            "    RuleId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-association.instanceassociationoutputlocation":{
        "prefix":"aws-ssm-association.instanceassociationoutputlocation",
        "body":[
            "${1:myAWSSSMAssociation.InstanceAssociationOutputLocation}:",
            "  Type: AWS::SSM::Association.InstanceAssociationOutputLocation",
            "  Properties:",
            "    S3Location : ${2:aws-ssm-associationinstanceassociationoutputlocation.S3OutputLocation(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.storagedescriptor":{
        "prefix":"aws-glue-partition.storagedescriptor",
        "body":[
            "${1:myAWSGluePartition.StorageDescriptor}:",
            "  Type: AWS::Glue::Partition.StorageDescriptor",
            "  Properties:",
            "    StoredAsSubDirectories : ${2:Boolean(O)}",
            "    Parameters : ${3:Json(O)}",
            "    BucketColumns : [ ${4:String(O)} ]",
            "    SkewedInfo : ${5:aws-glue-partitionstoragedescriptor.SkewedInfo(O)}",
            "    InputFormat : ${6:String(O)}",
            "    NumberOfBuckets : ${7:Integer(O)}",
            "    OutputFormat : ${8:String(O)}",
            "    Columns : [ ${9:aws-glue-partitionstoragedescriptor.Column(O)} ]",
            "    SerdeInfo : ${10:aws-glue-partitionstoragedescriptor.SerdeInfo(O)}",
            "    SortColumns : [ ${11:aws-glue-partitionstoragedescriptor.Order(O)} ]",
            "    Compressed : ${12:Boolean(O)}",
            "    Location : ${13:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-trigger.action":{
        "prefix":"aws-glue-trigger.action",
        "body":[
            "${1:myAWSGlueTrigger.Action}:",
            "  Type: AWS::Glue::Trigger.Action",
            "  Properties:",
            "    JobName : ${2:String(O)}",
            "    Arguments : ${3:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.networkinterface":{
        "prefix":"aws-ec2-instance.networkinterface",
        "body":[
            "${1:myAWSEC2Instance.NetworkInterface}:",
            "  Type: AWS::EC2::Instance.NetworkInterface",
            "  Properties:",
            "    AssociatePublicIpAddress : ${2:Boolean(O)}",
            "    DeleteOnTermination : ${3:Boolean(O)}",
            "    Description : ${4:String(O)}",
            "    DeviceIndex : ${5:String(R)}",
            "    GroupSet : [ ${6:String(O)} ]",
            "    Ipv6AddressCount : ${7:Integer(O)}",
            "    Ipv6Addresses : [ ${8:aws-ec2-instancenetworkinterface.InstanceIpv6Address(O)} ]",
            "    NetworkInterfaceId : ${9:String(O)}",
            "    PrivateIpAddress : ${10:String(O)}",
            "    PrivateIpAddresses : [ ${11:aws-ec2-instancenetworkinterface.PrivateIpAddressSpecification(O)} ]",
            "    SecondaryPrivateIpAddressCount : ${12:Integer(O)}",
            "    SubnetId : ${13:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.applicationsource":{
        "prefix":"aws-autoscalingplans-scalingplan.applicationsource",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.ApplicationSource}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.ApplicationSource",
            "  Properties:",
            "    CloudFormationStackARN : ${2:String(O)}",
            "    TagFilters : [ ${3:aws-autoscalingplans-scalingplanapplicationsource.TagFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.iaminstanceprofilespecification":{
        "prefix":"aws-ec2-spotfleet.iaminstanceprofilespecification",
        "body":[
            "${1:myAWSEC2SpotFleet.IamInstanceProfileSpecification}:",
            "  Type: AWS::EC2::SpotFleet.IamInstanceProfileSpecification",
            "  Properties:",
            "    Arn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.recordformat":{
        "prefix":"aws-kinesisanalyticsv2-application.recordformat",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.RecordFormat}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.RecordFormat",
            "  Properties:",
            "    MappingParameters : ${2:aws-kinesisanalyticsv2-applicationrecordformat.MappingParameters(O)}",
            "    RecordFormatType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy.metricdimension":{
        "prefix":"aws-autoscaling-scalingpolicy.metricdimension",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy.MetricDimension}:",
            "  Type: AWS::AutoScaling::ScalingPolicy.MetricDimension",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.instancenetworkinterfacespecification":{
        "prefix":"aws-ec2-spotfleet.instancenetworkinterfacespecification",
        "body":[
            "${1:myAWSEC2SpotFleet.InstanceNetworkInterfaceSpecification}:",
            "  Type: AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification",
            "  Properties:",
            "    AssociatePublicIpAddress : ${2:Boolean(O)}",
            "    DeleteOnTermination : ${3:Boolean(O)}",
            "    Description : ${4:String(O)}",
            "    DeviceIndex : ${5:Integer(O)}",
            "    Groups : [ ${6:String(O)} ]",
            "    Ipv6AddressCount : ${7:Integer(O)}",
            "    Ipv6Addresses : [ ${8:aws-ec2-spotfleetinstancenetworkinterfacespecification.InstanceIpv6Address(O)} ]",
            "    NetworkInterfaceId : ${9:String(O)}",
            "    PrivateIpAddresses : [ ${10:aws-ec2-spotfleetinstancenetworkinterfacespecification.PrivateIpAddressSpecification(O)} ]",
            "    SecondaryPrivateIpAddressCount : ${11:Integer(O)}",
            "    SubnetId : ${12:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.dockervolumeconfiguration":{
        "prefix":"aws-ecs-taskdefinition.dockervolumeconfiguration",
        "body":[
            "${1:myAWSECSTaskDefinition.DockerVolumeConfiguration}:",
            "  Type: AWS::ECS::TaskDefinition.DockerVolumeConfiguration",
            "  Properties:",
            "    Autoprovision : ${2:Boolean(O)}",
            "    Driver : ${3:String(O)}",
            "    DriverOpts : [ ${4:String(O)} ]",
            "    Labels : [ ${5:String(O)} ]",
            "    Scope : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-ipset.ipsetdescriptor":{
        "prefix":"aws-wafregional-ipset.ipsetdescriptor",
        "body":[
            "${1:myAWSWAFRegionalIPSet.IPSetDescriptor}:",
            "  Type: AWS::WAFRegional::IPSet.IPSetDescriptor",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.containerdefinition":{
        "prefix":"aws-ecs-taskdefinition.containerdefinition",
        "body":[
            "${1:myAWSECSTaskDefinition.ContainerDefinition}:",
            "  Type: AWS::ECS::TaskDefinition.ContainerDefinition",
            "  Properties:",
            "    Command : [ ${2:String(O)} ]",
            "    Cpu : ${3:Integer(O)}",
            "    DisableNetworking : ${4:Boolean(O)}",
            "    DnsSearchDomains : [ ${5:String(O)} ]",
            "    DnsServers : [ ${6:String(O)} ]",
            "    DockerLabels : [ ${7:String(O)} ]",
            "    DockerSecurityOptions : [ ${8:String(O)} ]",
            "    EntryPoint : [ ${9:String(O)} ]",
            "    Environment : [ ${10:aws-ecs-taskdefinitioncontainerdefinition.KeyValuePair(O)} ]",
            "    Essential : ${11:Boolean(O)}",
            "    ExtraHosts : [ ${12:aws-ecs-taskdefinitioncontainerdefinition.HostEntry(O)} ]",
            "    HealthCheck : ${13:aws-ecs-taskdefinitioncontainerdefinition.HealthCheck(O)}",
            "    Hostname : ${14:String(O)}",
            "    Image : ${15:String(O)}",
            "    Links : [ ${16:String(O)} ]",
            "    LinuxParameters : ${17:aws-ecs-taskdefinitioncontainerdefinition.LinuxParameters(O)}",
            "    LogConfiguration : ${18:aws-ecs-taskdefinitioncontainerdefinition.LogConfiguration(O)}",
            "    Memory : ${19:Integer(O)}",
            "    MemoryReservation : ${20:Integer(O)}",
            "    MountPoints : [ ${21:aws-ecs-taskdefinitioncontainerdefinition.MountPoint(O)} ]",
            "    Name : ${22:String(O)}",
            "    PortMappings : [ ${23:aws-ecs-taskdefinitioncontainerdefinition.PortMapping(O)} ]",
            "    Privileged : ${24:Boolean(O)}",
            "    ReadonlyRootFilesystem : ${25:Boolean(O)}",
            "    RepositoryCredentials : ${26:aws-ecs-taskdefinitioncontainerdefinition.RepositoryCredentials(O)}",
            "    Ulimits : [ ${27:aws-ecs-taskdefinitioncontainerdefinition.Ulimit(O)} ]",
            "    User : ${28:String(O)}",
            "    VolumesFrom : [ ${29:aws-ecs-taskdefinitioncontainerdefinition.VolumeFrom(O)} ]",
            "    WorkingDirectory : ${30:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.scalinginstruction":{
        "prefix":"aws-autoscalingplans-scalingplan.scalinginstruction",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.ScalingInstruction}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.ScalingInstruction",
            "  Properties:",
            "    DisableDynamicScaling : ${2:Boolean(O)}",
            "    ServiceNamespace : ${3:String(R)}",
            "    PredictiveScalingMaxCapacityBehavior : ${4:String(O)}",
            "    ScalableDimension : ${5:String(R)}",
            "    ScalingPolicyUpdateBehavior : ${6:String(O)}",
            "    MinCapacity : ${7:Integer(R)}",
            "    TargetTrackingConfigurations : [ ${8:aws-autoscalingplans-scalingplanscalinginstruction.TargetTrackingConfiguration(R)} ]",
            "    PredictiveScalingMaxCapacityBuffer : ${9:Integer(O)}",
            "    CustomizedLoadMetricSpecification : ${10:aws-autoscalingplans-scalingplanscalinginstruction.CustomizedLoadMetricSpecification(O)}",
            "    PredefinedLoadMetricSpecification : ${11:aws-autoscalingplans-scalingplanscalinginstruction.PredefinedLoadMetricSpecification(O)}",
            "    ResourceId : ${12:String(R)}",
            "    ScheduledActionBufferTime : ${13:Integer(O)}",
            "    MaxCapacity : ${14:Integer(R)}",
            "    PredictiveScalingMode : ${15:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.maintenancewindowlambdaparameters":{
        "prefix":"aws-ssm-maintenancewindowtask.maintenancewindowlambdaparameters",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.MaintenanceWindowLambdaParameters}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters",
            "  Properties:",
            "    ClientContext : ${2:String(O)}",
            "    Qualifier : ${3:String(O)}",
            "    Payload : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "alexa-ask-skill.overrides":{
        "prefix":"alexa-ask-skill.overrides",
        "body":[
            "${1:myAlexaASKSkill.Overrides}:",
            "  Type: Alexa::ASK::Skill.Overrides",
            "  Properties:",
            "    Manifest : ${2:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sqlinjectionmatchset.fieldtomatch":{
        "prefix":"aws-waf-sqlinjectionmatchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFSqlInjectionMatchSet.FieldToMatch}:",
            "  Type: AWS::WAF::SqlInjectionMatchSet.FieldToMatch",
            "  Properties:",
            "    Data : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.parameterobject":{
        "prefix":"aws-datapipeline-pipeline.parameterobject",
        "body":[
            "${1:myAWSDataPipelinePipeline.ParameterObject}:",
            "  Type: AWS::DataPipeline::Pipeline.ParameterObject",
            "  Properties:",
            "    Attributes : [ ${2:aws-datapipeline-pipelineparameterobject.ParameterAttribute(R)} ]",
            "    Id : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.stagedeclaration":{
        "prefix":"aws-codepipeline-pipeline.stagedeclaration",
        "body":[
            "${1:myAWSCodePipelinePipeline.StageDeclaration}:",
            "  Type: AWS::CodePipeline::Pipeline.StageDeclaration",
            "  Properties:",
            "    Actions : [ ${2:aws-codepipeline-pipelinestagedeclaration.ActionDeclaration(R)} ]",
            "    Blockers : [ ${3:aws-codepipeline-pipelinestagedeclaration.BlockerDeclaration(O)} ]",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.scalingconstraints":{
        "prefix":"aws-emr-cluster.scalingconstraints",
        "body":[
            "${1:myAWSEMRCluster.ScalingConstraints}:",
            "  Type: AWS::EMR::Cluster.ScalingConstraints",
            "  Properties:",
            "    MaxCapacity : ${2:Integer(R)}",
            "    MinCapacity : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.metricdimension":{
        "prefix":"aws-emr-instancegroupconfig.metricdimension",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.MetricDimension}:",
            "  Type: AWS::EMR::InstanceGroupConfig.MetricDimension",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-method.methodresponse":{
        "prefix":"aws-apigateway-method.methodresponse",
        "body":[
            "${1:myAWSApiGatewayMethod.MethodResponse}:",
            "  Type: AWS::ApiGateway::Method.MethodResponse",
            "  Properties:",
            "    ResponseModels : [ ${2:String(O)} ]",
            "    ResponseParameters : [ ${3:Boolean(O)} ]",
            "    StatusCode : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-configurationtemplate.sourceconfiguration":{
        "prefix":"aws-elasticbeanstalk-configurationtemplate.sourceconfiguration",
        "body":[
            "${1:myAWSElasticBeanstalkConfigurationTemplate.SourceConfiguration}:",
            "  Type: AWS::ElasticBeanstalk::ConfigurationTemplate.SourceConfiguration",
            "  Properties:",
            "    ApplicationName : ${2:String(R)}",
            "    TemplateName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.redirectconfig":{
        "prefix":"aws-elasticloadbalancingv2-listener.redirectconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.RedirectConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.RedirectConfig",
            "  Properties:",
            "    Host : ${2:String(O)}",
            "    Path : ${3:String(O)}",
            "    Port : ${4:String(O)}",
            "    Protocol : ${5:String(O)}",
            "    Query : ${6:String(O)}",
            "    StatusCode : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-connectordefinition.connectordefinitionversion":{
        "prefix":"aws-greengrass-connectordefinition.connectordefinitionversion",
        "body":[
            "${1:myAWSGreengrassConnectorDefinition.ConnectorDefinitionVersion}:",
            "  Type: AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion",
            "  Properties:",
            "    Connectors : [ ${2:aws-greengrass-connectordefinitionconnectordefinitionversion.Connector(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.notificationconfiguration":{
        "prefix":"aws-autoscaling-autoscalinggroup.notificationconfiguration",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.NotificationConfiguration}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.NotificationConfiguration",
            "  Properties:",
            "    NotificationTypes : [ ${2:String(O)} ]",
            "    TopicARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput.kinesisstreamsoutput":{
        "prefix":"aws-kinesisanalytics-applicationoutput.kinesisstreamsoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput.KinesisStreamsOutput}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput.KinesisStreamsOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.function":{
        "prefix":"aws-greengrass-functiondefinitionversion.function",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.Function}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.Function",
            "  Properties:",
            "    FunctionArn : ${2:String(R)}",
            "    FunctionConfiguration : ${3:aws-greengrass-functiondefinitionversionfunction.FunctionConfiguration(R)}",
            "    Id : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.monitoring":{
        "prefix":"aws-ec2-launchtemplate.monitoring",
        "body":[
            "${1:myAWSEC2LaunchTemplate.Monitoring}:",
            "  Type: AWS::EC2::LaunchTemplate.Monitoring",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.order":{
        "prefix":"aws-glue-partition.order",
        "body":[
            "${1:myAWSGluePartition.Order}:",
            "  Type: AWS::Glue::Partition.Order",
            "  Properties:",
            "    Column : ${2:String(R)}",
            "    SortOrder : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-service.dnsconfig":{
        "prefix":"aws-servicediscovery-service.dnsconfig",
        "body":[
            "${1:myAWSServiceDiscoveryService.DnsConfig}:",
            "  Type: AWS::ServiceDiscovery::Service.DnsConfig",
            "  Properties:",
            "    DnsRecords : [ ${2:aws-servicediscovery-servicednsconfig.DnsRecord(R)} ]",
            "    RoutingPolicy : ${3:String(O)}",
            "    NamespaceId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-method.integration":{
        "prefix":"aws-apigateway-method.integration",
        "body":[
            "${1:myAWSApiGatewayMethod.Integration}:",
            "  Type: AWS::ApiGateway::Method.Integration",
            "  Properties:",
            "    CacheKeyParameters : [ ${2:String(O)} ]",
            "    CacheNamespace : ${3:String(O)}",
            "    ConnectionId : ${4:String(O)}",
            "    ConnectionType : ${5:String(O)}",
            "    ContentHandling : ${6:String(O)}",
            "    Credentials : ${7:String(O)}",
            "    IntegrationHttpMethod : ${8:String(O)}",
            "    IntegrationResponses : [ ${9:aws-apigateway-methodintegration.IntegrationResponse(O)} ]",
            "    PassthroughBehavior : ${10:String(O)}",
            "    RequestParameters : [ ${11:String(O)} ]",
            "    RequestTemplates : [ ${12:String(O)} ]",
            "    TimeoutInMillis : ${13:Integer(O)}",
            "    Type : ${14:String(O)}",
            "    Uri : ${15:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.timeout":{
        "prefix":"aws-batch-jobdefinition.timeout",
        "body":[
            "${1:myAWSBatchJobDefinition.Timeout}:",
            "  Type: AWS::Batch::JobDefinition.Timeout",
            "  Properties:",
            "    AttemptDurationSeconds : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput.destinationschema":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput.destinationschema",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput.DestinationSchema}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput.DestinationSchema",
            "  Properties:",
            "    RecordFormatType : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.republishaction":{
        "prefix":"aws-iot-topicrule.republishaction",
        "body":[
            "${1:myAWSIoTTopicRule.RepublishAction}:",
            "  Type: AWS::IoT::TopicRule.RepublishAction",
            "  Properties:",
            "    RoleArn : ${2:String(R)}",
            "    Topic : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.skewedinfo":{
        "prefix":"aws-glue-table.skewedinfo",
        "body":[
            "${1:myAWSGlueTable.SkewedInfo}:",
            "  Type: AWS::Glue::Table.SkewedInfo",
            "  Properties:",
            "    SkewedColumnNames : [ ${2:String(O)} ]",
            "    SkewedColumnValues : [ ${3:String(O)} ]",
            "    SkewedColumnValueLocationMaps : ${4:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-service.dnsrecord":{
        "prefix":"aws-servicediscovery-service.dnsrecord",
        "body":[
            "${1:myAWSServiceDiscoveryService.DnsRecord}:",
            "  Type: AWS::ServiceDiscovery::Service.DnsRecord",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    TTL : ${3:Double(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-devicedefinition.device":{
        "prefix":"aws-greengrass-devicedefinition.device",
        "body":[
            "${1:myAWSGreengrassDeviceDefinition.Device}:",
            "  Type: AWS::Greengrass::DeviceDefinition.Device",
            "  Properties:",
            "    SyncShadow : ${2:Boolean(O)}",
            "    ThingArn : ${3:String(R)}",
            "    Id : ${4:String(R)}",
            "    CertificateArn : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configrule.scope":{
        "prefix":"aws-config-configrule.scope",
        "body":[
            "${1:myAWSConfigConfigRule.Scope}:",
            "  Type: AWS::Config::ConfigRule.Scope",
            "  Properties:",
            "    ComplianceResourceId : ${2:String(O)}",
            "    ComplianceResourceTypes : [ ${3:String(O)} ]",
            "    TagKey : ${4:String(O)}",
            "    TagValue : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.forwardedvalues":{
        "prefix":"aws-cloudfront-distribution.forwardedvalues",
        "body":[
            "${1:myAWSCloudFrontDistribution.ForwardedValues}:",
            "  Type: AWS::CloudFront::Distribution.ForwardedValues",
            "  Properties:",
            "    Cookies : ${2:aws-cloudfront-distributionforwardedvalues.Cookies(O)}",
            "    Headers : [ ${3:String(O)} ]",
            "    QueryString : ${4:Boolean(R)}",
            "    QueryStringCacheKeys : [ ${5:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-xssmatchset.fieldtomatch":{
        "prefix":"aws-waf-xssmatchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFXssMatchSet.FieldToMatch}:",
            "  Type: AWS::WAF::XssMatchSet.FieldToMatch",
            "  Properties:",
            "    Data : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-method.integrationresponse":{
        "prefix":"aws-apigateway-method.integrationresponse",
        "body":[
            "${1:myAWSApiGatewayMethod.IntegrationResponse}:",
            "  Type: AWS::ApiGateway::Method.IntegrationResponse",
            "  Properties:",
            "    ContentHandling : ${2:String(O)}",
            "    ResponseParameters : [ ${3:String(O)} ]",
            "    ResponseTemplates : [ ${4:String(O)} ]",
            "    SelectionPattern : ${5:String(O)}",
            "    StatusCode : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-devicedefinition.devicedefinitionversion":{
        "prefix":"aws-greengrass-devicedefinition.devicedefinitionversion",
        "body":[
            "${1:myAWSGreengrassDeviceDefinition.DeviceDefinitionVersion}:",
            "  Type: AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion",
            "  Properties:",
            "    Devices : [ ${2:aws-greengrass-devicedefinitiondevicedefinitionversion.Device(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.subscriber":{
        "prefix":"aws-budgets-budget.subscriber",
        "body":[
            "${1:myAWSBudgetsBudget.Subscriber}:",
            "  Type: AWS::Budgets::Budget.Subscriber",
            "  Properties:",
            "    SubscriptionType : ${2:String(R)}",
            "    Address : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.scalingaction":{
        "prefix":"aws-emr-cluster.scalingaction",
        "body":[
            "${1:myAWSEMRCluster.ScalingAction}:",
            "  Type: AWS::EMR::Cluster.ScalingAction",
            "  Properties:",
            "    Market : ${2:String(O)}",
            "    SimpleScalingPolicyConfiguration : ${3:aws-emr-clusterscalingaction.SimpleScalingPolicyConfiguration(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.spotfleetlaunchspecification":{
        "prefix":"aws-ec2-spotfleet.spotfleetlaunchspecification",
        "body":[
            "${1:myAWSEC2SpotFleet.SpotFleetLaunchSpecification}:",
            "  Type: AWS::EC2::SpotFleet.SpotFleetLaunchSpecification",
            "  Properties:",
            "    BlockDeviceMappings : [ ${2:aws-ec2-spotfleetspotfleetlaunchspecification.BlockDeviceMapping(O)} ]",
            "    EbsOptimized : ${3:Boolean(O)}",
            "    IamInstanceProfile : ${4:aws-ec2-spotfleetspotfleetlaunchspecification.IamInstanceProfileSpecification(O)}",
            "    ImageId : ${5:String(R)}",
            "    InstanceType : ${6:String(R)}",
            "    KernelId : ${7:String(O)}",
            "    KeyName : ${8:String(O)}",
            "    Monitoring : ${9:aws-ec2-spotfleetspotfleetlaunchspecification.SpotFleetMonitoring(O)}",
            "    NetworkInterfaces : [ ${10:aws-ec2-spotfleetspotfleetlaunchspecification.InstanceNetworkInterfaceSpecification(O)} ]",
            "    Placement : ${11:aws-ec2-spotfleetspotfleetlaunchspecification.SpotPlacement(O)}",
            "    RamdiskId : ${12:String(O)}",
            "    SecurityGroups : [ ${13:aws-ec2-spotfleetspotfleetlaunchspecification.GroupIdentifier(O)} ]",
            "    SpotPrice : ${14:String(O)}",
            "    SubnetId : ${15:String(O)}",
            "    TagSpecifications : [ ${16:aws-ec2-spotfleetspotfleetlaunchspecification.SpotFleetTagSpecification(O)} ]",
            "    UserData : ${17:String(O)}",
            "    WeightedCapacity : ${18:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.keyvaluepair":{
        "prefix":"aws-ecs-taskdefinition.keyvaluepair",
        "body":[
            "${1:myAWSECSTaskDefinition.KeyValuePair}:",
            "  Type: AWS::ECS::TaskDefinition.KeyValuePair",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    Value : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-customactiontype.settings":{
        "prefix":"aws-codepipeline-customactiontype.settings",
        "body":[
            "${1:myAWSCodePipelineCustomActionType.Settings}:",
            "  Type: AWS::CodePipeline::CustomActionType.Settings",
            "  Properties:",
            "    EntityUrlTemplate : ${2:String(O)}",
            "    ExecutionUrlTemplate : ${3:String(O)}",
            "    RevisionUrlTemplate : ${4:String(O)}",
            "    ThirdPartyConfigurationUrl : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.analyticsconfiguration":{
        "prefix":"aws-s3-bucket.analyticsconfiguration",
        "body":[
            "${1:myAWSS3Bucket.AnalyticsConfiguration}:",
            "  Type: AWS::S3::Bucket.AnalyticsConfiguration",
            "  Properties:",
            "    Id : ${2:String(R)}",
            "    Prefix : ${3:String(O)}",
            "    StorageClassAnalysis : ${4:aws-s3-bucketanalyticsconfiguration.StorageClassAnalysis(R)}",
            "    TagFilters : [ ${5:aws-s3-bucketanalyticsconfiguration.TagFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.notification":{
        "prefix":"aws-budgets-budget.notification",
        "body":[
            "${1:myAWSBudgetsBudget.Notification}:",
            "  Type: AWS::Budgets::Budget.Notification",
            "  Properties:",
            "    ComparisonOperator : ${2:String(R)}",
            "    NotificationType : ${3:String(R)}",
            "    Threshold : ${4:Double(R)}",
            "    ThresholdType : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.targettrackingconfiguration":{
        "prefix":"aws-autoscalingplans-scalingplan.targettrackingconfiguration",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.TargetTrackingConfiguration}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.TargetTrackingConfiguration",
            "  Properties:",
            "    ScaleOutCooldown : ${2:Integer(O)}",
            "    TargetValue : ${3:Double(R)}",
            "    PredefinedScalingMetricSpecification : ${4:aws-autoscalingplans-scalingplantargettrackingconfiguration.PredefinedScalingMetricSpecification(O)}",
            "    DisableScaleIn : ${5:Boolean(O)}",
            "    ScaleInCooldown : ${6:Integer(O)}",
            "    EstimatedInstanceWarmup : ${7:Integer(O)}",
            "    CustomizedScalingMetricSpecification : ${8:aws-autoscalingplans-scalingplantargettrackingconfiguration.CustomizedScalingMetricSpecification(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.jsonmappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-application.jsonmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.JSONMappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.JSONMappingParameters",
            "  Properties:",
            "    RecordRowPath : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-gamelift-alias.routingstrategy":{
        "prefix":"aws-gamelift-alias.routingstrategy",
        "body":[
            "${1:myAWSGameLiftAlias.RoutingStrategy}:",
            "  Type: AWS::GameLift::Alias.RoutingStrategy",
            "  Properties:",
            "    FleetId : ${2:String(O)}",
            "    Message : ${3:String(O)}",
            "    Type : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-resolver.pipelineconfig":{
        "prefix":"aws-appsync-resolver.pipelineconfig",
        "body":[
            "${1:myAWSAppSyncResolver.PipelineConfig}:",
            "  Type: AWS::AppSync::Resolver.PipelineConfig",
            "  Properties:",
            "    Functions : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.classicloadbalancersconfig":{
        "prefix":"aws-ec2-spotfleet.classicloadbalancersconfig",
        "body":[
            "${1:myAWSEC2SpotFleet.ClassicLoadBalancersConfig}:",
            "  Type: AWS::EC2::SpotFleet.ClassicLoadBalancersConfig",
            "  Properties:",
            "    ClassicLoadBalancers : [ ${2:aws-ec2-spotfleetclassicloadbalancersconfig.ClassicLoadBalancer(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.notificationconfig":{
        "prefix":"aws-ssm-maintenancewindowtask.notificationconfig",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.NotificationConfig}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.NotificationConfig",
            "  Properties:",
            "    NotificationArn : ${2:String(R)}",
            "    NotificationType : ${3:String(O)}",
            "    NotificationEvents : [ ${4:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.configuration":{
        "prefix":"aws-emr-instancefleetconfig.configuration",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.Configuration}:",
            "  Type: AWS::EMR::InstanceFleetConfig.Configuration",
            "  Properties:",
            "    Classification : ${2:String(O)}",
            "    ConfigurationProperties : [ ${3:String(O)} ]",
            "    Configurations : [ ${4:aws-emr-instancefleetconfigconfiguration.Configuration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.codecontent":{
        "prefix":"aws-kinesisanalyticsv2-application.codecontent",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.CodeContent}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.CodeContent",
            "  Properties:",
            "    ZipFileContent : ${2:String(O)}",
            "    S3ContentLocation : ${3:aws-kinesisanalyticsv2-applicationcodecontent.S3ContentLocation(O)}",
            "    TextContent : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpooluser.attributetype":{
        "prefix":"aws-cognito-userpooluser.attributetype",
        "body":[
            "${1:myAWSCognitoUserPoolUser.AttributeType}:",
            "  Type: AWS::Cognito::UserPoolUser.AttributeType",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.storagedescriptor":{
        "prefix":"aws-glue-table.storagedescriptor",
        "body":[
            "${1:myAWSGlueTable.StorageDescriptor}:",
            "  Type: AWS::Glue::Table.StorageDescriptor",
            "  Properties:",
            "    StoredAsSubDirectories : ${2:Boolean(O)}",
            "    Parameters : ${3:Json(O)}",
            "    BucketColumns : [ ${4:String(O)} ]",
            "    SkewedInfo : ${5:aws-glue-tablestoragedescriptor.SkewedInfo(O)}",
            "    InputFormat : ${6:String(O)}",
            "    NumberOfBuckets : ${7:Integer(O)}",
            "    OutputFormat : ${8:String(O)}",
            "    Columns : [ ${9:aws-glue-tablestoragedescriptor.Column(O)} ]",
            "    SerdeInfo : ${10:aws-glue-tablestoragedescriptor.SerdeInfo(O)}",
            "    SortColumns : [ ${11:aws-glue-tablestoragedescriptor.Order(O)} ]",
            "    Compressed : ${12:Boolean(O)}",
            "    Location : ${13:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-user.loginprofile":{
        "prefix":"aws-iam-user.loginprofile",
        "body":[
            "${1:myAWSIAMUser.LoginProfile}:",
            "  Type: AWS::IAM::User.LoginProfile",
            "  Properties:",
            "    Password : ${2:String(R)}",
            "    PasswordResetRequired : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.sourceselectioncriteria":{
        "prefix":"aws-s3-bucket.sourceselectioncriteria",
        "body":[
            "${1:myAWSS3Bucket.SourceSelectionCriteria}:",
            "  Type: AWS::S3::Bucket.SourceSelectionCriteria",
            "  Properties:",
            "    SseKmsEncryptedObjects : ${2:aws-s3-bucketsourceselectioncriteria.SseKmsEncryptedObjects(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-subscriptiondefinition.subscription":{
        "prefix":"aws-greengrass-subscriptiondefinition.subscription",
        "body":[
            "${1:myAWSGreengrassSubscriptionDefinition.Subscription}:",
            "  Type: AWS::Greengrass::SubscriptionDefinition.Subscription",
            "  Properties:",
            "    Target : ${2:String(R)}",
            "    Id : ${3:String(R)}",
            "    Source : ${4:String(R)}",
            "    Subject : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-stage.methodsetting":{
        "prefix":"aws-apigateway-stage.methodsetting",
        "body":[
            "${1:myAWSApiGatewayStage.MethodSetting}:",
            "  Type: AWS::ApiGateway::Stage.MethodSetting",
            "  Properties:",
            "    CacheDataEncrypted : ${2:Boolean(O)}",
            "    CacheTtlInSeconds : ${3:Integer(O)}",
            "    CachingEnabled : ${4:Boolean(O)}",
            "    DataTraceEnabled : ${5:Boolean(O)}",
            "    HttpMethod : ${6:String(O)}",
            "    LoggingLevel : ${7:String(O)}",
            "    MetricsEnabled : ${8:Boolean(O)}",
            "    ResourcePath : ${9:String(O)}",
            "    ThrottlingBurstLimit : ${10:Integer(O)}",
            "    ThrottlingRateLimit : ${11:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.provisionedthroughput":{
        "prefix":"aws-dynamodb-table.provisionedthroughput",
        "body":[
            "${1:myAWSDynamoDBTable.ProvisionedThroughput}:",
            "  Type: AWS::DynamoDB::Table.ProvisionedThroughput",
            "  Properties:",
            "    ReadCapacityUnits : ${2:Long(R)}",
            "    WriteCapacityUnits : ${3:Long(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack.source":{
        "prefix":"aws-opsworks-stack.source",
        "body":[
            "${1:myAWSOpsWorksStack.Source}:",
            "  Type: AWS::OpsWorks::Stack.Source",
            "  Properties:",
            "    Password : ${2:String(O)}",
            "    Revision : ${3:String(O)}",
            "    SshKey : ${4:String(O)}",
            "    Type : ${5:String(O)}",
            "    Url : ${6:String(O)}",
            "    Username : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.placement":{
        "prefix":"aws-ec2-launchtemplate.placement",
        "body":[
            "${1:myAWSEC2LaunchTemplate.Placement}:",
            "  Type: AWS::EC2::LaunchTemplate.Placement",
            "  Properties:",
            "    GroupName : ${2:String(O)}",
            "    Tenancy : ${3:String(O)}",
            "    AvailabilityZone : ${4:String(O)}",
            "    Affinity : ${5:String(O)}",
            "    HostId : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.connectionsettings":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.connectionsettings",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.ConnectionSettings}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings",
            "  Properties:",
            "    IdleTimeout : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.loggingconfiguration":{
        "prefix":"aws-s3-bucket.loggingconfiguration",
        "body":[
            "${1:myAWSS3Bucket.LoggingConfiguration}:",
            "  Type: AWS::S3::Bucket.LoggingConfiguration",
            "  Properties:",
            "    DestinationBucketName : ${2:String(O)}",
            "    LogFilePrefix : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.storageclassanalysis":{
        "prefix":"aws-s3-bucket.storageclassanalysis",
        "body":[
            "${1:myAWSS3Bucket.StorageClassAnalysis}:",
            "  Type: AWS::S3::Bucket.StorageClassAnalysis",
            "  Properties:",
            "    DataExport : ${2:aws-s3-bucketstorageclassanalysis.DataExport(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.routingrule":{
        "prefix":"aws-s3-bucket.routingrule",
        "body":[
            "${1:myAWSS3Bucket.RoutingRule}:",
            "  Type: AWS::S3::Bucket.RoutingRule",
            "  Properties:",
            "    RedirectRule : ${2:aws-s3-bucketroutingrule.RedirectRule(R)}",
            "    RoutingRuleCondition : ${3:aws-s3-bucketroutingrule.RoutingRuleCondition(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-loggerdefinition.logger":{
        "prefix":"aws-greengrass-loggerdefinition.logger",
        "body":[
            "${1:myAWSGreengrassLoggerDefinition.Logger}:",
            "  Type: AWS::Greengrass::LoggerDefinition.Logger",
            "  Properties:",
            "    Space : ${2:Integer(O)}",
            "    Type : ${3:String(R)}",
            "    Level : ${4:String(R)}",
            "    Id : ${5:String(R)}",
            "    Component : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.kerberosattributes":{
        "prefix":"aws-emr-cluster.kerberosattributes",
        "body":[
            "${1:myAWSEMRCluster.KerberosAttributes}:",
            "  Type: AWS::EMR::Cluster.KerberosAttributes",
            "  Properties:",
            "    ADDomainJoinPassword : ${2:String(O)}",
            "    ADDomainJoinUser : ${3:String(O)}",
            "    CrossRealmTrustPrincipalPassword : ${4:String(O)}",
            "    KdcAdminPassword : ${5:String(R)}",
            "    Realm : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordset.geolocation":{
        "prefix":"aws-route53-recordset.geolocation",
        "body":[
            "${1:myAWSRoute53RecordSet.GeoLocation}:",
            "  Type: AWS::Route53::RecordSet.GeoLocation",
            "  Properties:",
            "    ContinentCode : ${2:String(O)}",
            "    CountryCode : ${3:String(O)}",
            "    SubdivisionCode : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.splunkretryoptions":{
        "prefix":"aws-kinesisfirehose-deliverystream.splunkretryoptions",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.SplunkRetryOptions}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.SplunkRetryOptions",
            "  Properties:",
            "    DurationInSeconds : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy.predefinedmetricspecification":{
        "prefix":"aws-autoscaling-scalingpolicy.predefinedmetricspecification",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy.PredefinedMetricSpecification}:",
            "  Type: AWS::AutoScaling::ScalingPolicy.PredefinedMetricSpecification",
            "  Properties:",
            "    PredefinedMetricType : ${2:String(R)}",
            "    ResourceLabel : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-layerversion.content":{
        "prefix":"aws-lambda-layerversion.content",
        "body":[
            "${1:myAWSLambdaLayerVersion.Content}:",
            "  Type: AWS::Lambda::LayerVersion.Content",
            "  Properties:",
            "    S3ObjectVersion : ${2:String(O)}",
            "    S3Bucket : ${3:String(R)}",
            "    S3Key : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.queryaction":{
        "prefix":"aws-iotanalytics-dataset.queryaction",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.QueryAction}:",
            "  Type: AWS::IoTAnalytics::Dataset.QueryAction",
            "  Properties:",
            "    Filters : [ ${2:aws-iotanalytics-datasetqueryaction.Filter(O)} ]",
            "    SqlQuery : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-domainname.endpointconfiguration":{
        "prefix":"aws-apigateway-domainname.endpointconfiguration",
        "body":[
            "${1:myAWSApiGatewayDomainName.EndpointConfiguration}:",
            "  Type: AWS::ApiGateway::DomainName.EndpointConfiguration",
            "  Properties:",
            "    Types : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-association.target":{
        "prefix":"aws-ssm-association.target",
        "body":[
            "${1:myAWSSSMAssociation.Target}:",
            "  Type: AWS::SSM::Association.Target",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Values : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-coredefinition.coredefinitionversion":{
        "prefix":"aws-greengrass-coredefinition.coredefinitionversion",
        "body":[
            "${1:myAWSGreengrassCoreDefinition.CoreDefinitionVersion}:",
            "  Type: AWS::Greengrass::CoreDefinition.CoreDefinitionVersion",
            "  Properties:",
            "    Cores : [ ${2:aws-greengrass-coredefinitioncoredefinitionversion.Core(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.stepadjustment":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.stepadjustment",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.StepAdjustment}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.StepAdjustment",
            "  Properties:",
            "    MetricIntervalLowerBound : ${2:Double(O)}",
            "    MetricIntervalUpperBound : ${3:Double(O)}",
            "    ScalingAdjustment : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.stagetransition":{
        "prefix":"aws-codepipeline-pipeline.stagetransition",
        "body":[
            "${1:myAWSCodePipelinePipeline.StageTransition}:",
            "  Type: AWS::CodePipeline::Pipeline.StageTransition",
            "  Properties:",
            "    Reason : ${2:String(R)}",
            "    StageName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.maintenancewindowautomationparameters":{
        "prefix":"aws-ssm-maintenancewindowtask.maintenancewindowautomationparameters",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.MaintenanceWindowAutomationParameters}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters",
            "  Properties:",
            "    Parameters : ${2:Json(O)}",
            "    DocumentVersion : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.stepfunctionsaction":{
        "prefix":"aws-iot-topicrule.stepfunctionsaction",
        "body":[
            "${1:myAWSIoTTopicRule.StepFunctionsAction}:",
            "  Type: AWS::IoT::TopicRule.StepFunctionsAction",
            "  Properties:",
            "    ExecutionNamePrefix : ${2:String(O)}",
            "    RoleArn : ${3:String(R)}",
            "    StateMachineName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.spotfleetrequestconfigdata":{
        "prefix":"aws-ec2-spotfleet.spotfleetrequestconfigdata",
        "body":[
            "${1:myAWSEC2SpotFleet.SpotFleetRequestConfigData}:",
            "  Type: AWS::EC2::SpotFleet.SpotFleetRequestConfigData",
            "  Properties:",
            "    AllocationStrategy : ${2:String(O)}",
            "    ExcessCapacityTerminationPolicy : ${3:String(O)}",
            "    IamFleetRole : ${4:String(R)}",
            "    InstanceInterruptionBehavior : ${5:String(O)}",
            "    LaunchSpecifications : [ ${6:aws-ec2-spotfleetspotfleetrequestconfigdata.SpotFleetLaunchSpecification(O)} ]",
            "    LaunchTemplateConfigs : [ ${7:aws-ec2-spotfleetspotfleetrequestconfigdata.LaunchTemplateConfig(O)} ]",
            "    LoadBalancersConfig : ${8:aws-ec2-spotfleetspotfleetrequestconfigdata.LoadBalancersConfig(O)}",
            "    ReplaceUnhealthyInstances : ${9:Boolean(O)}",
            "    SpotPrice : ${10:String(O)}",
            "    TargetCapacity : ${11:Integer(R)}",
            "    TerminateInstancesWithExpiration : ${12:Boolean(O)}",
            "    Type : ${13:String(O)}",
            "    ValidFrom : ${14:String(O)}",
            "    ValidUntil : ${15:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.s3machinelearningmodelresourcedata":{
        "prefix":"aws-greengrass-resourcedefinitionversion.s3machinelearningmodelresourcedata",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.S3MachineLearningModelResourceData}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData",
            "  Properties:",
            "    DestinationPath : ${2:String(R)}",
            "    S3Uri : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-graphqlapi.openidconnectconfig":{
        "prefix":"aws-appsync-graphqlapi.openidconnectconfig",
        "body":[
            "${1:myAWSAppSyncGraphQLApi.OpenIDConnectConfig}:",
            "  Type: AWS::AppSync::GraphQLApi.OpenIDConnectConfig",
            "  Properties:",
            "    Issuer : ${2:String(O)}",
            "    ClientId : ${3:String(O)}",
            "    AuthTTL : ${4:Double(O)}",
            "    IatTTL : ${5:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.simplescalingpolicyconfiguration":{
        "prefix":"aws-emr-cluster.simplescalingpolicyconfiguration",
        "body":[
            "${1:myAWSEMRCluster.SimpleScalingPolicyConfiguration}:",
            "  Type: AWS::EMR::Cluster.SimpleScalingPolicyConfiguration",
            "  Properties:",
            "    AdjustmentType : ${2:String(O)}",
            "    CoolDown : ${3:Integer(O)}",
            "    ScalingAdjustment : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dlm-lifecyclepolicy.createrule":{
        "prefix":"aws-dlm-lifecyclepolicy.createrule",
        "body":[
            "${1:myAWSDLMLifecyclePolicy.CreateRule}:",
            "  Type: AWS::DLM::LifecyclePolicy.CreateRule",
            "  Properties:",
            "    IntervalUnit : ${2:String(R)}",
            "    Times : [ ${3:String(O)} ]",
            "    Interval : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-graphqlapi.logconfig":{
        "prefix":"aws-appsync-graphqlapi.logconfig",
        "body":[
            "${1:myAWSAppSyncGraphQLApi.LogConfig}:",
            "  Type: AWS::AppSync::GraphQLApi.LogConfig",
            "  Properties:",
            "    CloudWatchLogsRoleArn : ${2:String(O)}",
            "    FieldLogLevel : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.simplescalingpolicyconfiguration":{
        "prefix":"aws-emr-instancegroupconfig.simplescalingpolicyconfiguration",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.SimpleScalingPolicyConfiguration}:",
            "  Type: AWS::EMR::InstanceGroupConfig.SimpleScalingPolicyConfiguration",
            "  Properties:",
            "    AdjustmentType : ${2:String(O)}",
            "    CoolDown : ${3:Integer(O)}",
            "    ScalingAdjustment : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationoutput.output":{
        "prefix":"aws-kinesisanalyticsv2-applicationoutput.output",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationOutput.Output}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput.Output",
            "  Properties:",
            "    DestinationSchema : ${2:aws-kinesisanalyticsv2-applicationoutputoutput.DestinationSchema(R)}",
            "    LambdaOutput : ${3:aws-kinesisanalyticsv2-applicationoutputoutput.LambdaOutput(O)}",
            "    KinesisFirehoseOutput : ${4:aws-kinesisanalyticsv2-applicationoutputoutput.KinesisFirehoseOutput(O)}",
            "    KinesisStreamsOutput : ${5:aws-kinesisanalyticsv2-applicationoutputoutput.KinesisStreamsOutput(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.defaultconfig":{
        "prefix":"aws-greengrass-functiondefinition.defaultconfig",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.DefaultConfig}:",
            "  Type: AWS::Greengrass::FunctionDefinition.DefaultConfig",
            "  Properties:",
            "    Execution : ${2:aws-greengrass-functiondefinitiondefaultconfig.Execution(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.capacityreservationspecification":{
        "prefix":"aws-ec2-launchtemplate.capacityreservationspecification",
        "body":[
            "${1:myAWSEC2LaunchTemplate.CapacityReservationSpecification}:",
            "  Type: AWS::EC2::LaunchTemplate.CapacityReservationSpecification",
            "  Properties:",
            "    CapacityReservationPreference : ${2:aws-ec2-launchtemplatecapacityreservationspecification.CapacityReservationPreference(O)}",
            "    CapacityReservationTarget : ${3:aws-ec2-launchtemplatecapacityreservationspecification.CapacityReservationTarget(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.encryptionconfiguration":{
        "prefix":"aws-s3-bucket.encryptionconfiguration",
        "body":[
            "${1:myAWSS3Bucket.EncryptionConfiguration}:",
            "  Type: AWS::S3::Bucket.EncryptionConfiguration",
            "  Properties:",
            "    ReplicaKmsKeyID : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.fixedresponseconfig":{
        "prefix":"aws-elasticloadbalancingv2-listener.fixedresponseconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.FixedResponseConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.FixedResponseConfig",
            "  Properties:",
            "    ContentType : ${2:String(O)}",
            "    MessageBody : ${3:String(O)}",
            "    StatusCode : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack.chefconfiguration":{
        "prefix":"aws-opsworks-stack.chefconfiguration",
        "body":[
            "${1:myAWSOpsWorksStack.ChefConfiguration}:",
            "  Type: AWS::OpsWorks::Stack.ChefConfiguration",
            "  Properties:",
            "    BerkshelfVersion : ${2:String(O)}",
            "    ManageBerkshelf : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.tagref":{
        "prefix":"aws-appmesh-virtualnode.tagref",
        "body":[
            "${1:myAWSAppMeshVirtualNode.TagRef}:",
            "  Type: AWS::AppMesh::VirtualNode.TagRef",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.target":{
        "prefix":"aws-events-rule.target",
        "body":[
            "${1:myAWSEventsRule.Target}:",
            "  Type: AWS::Events::Rule.Target",
            "  Properties:",
            "    Arn : ${2:String(R)}",
            "    EcsParameters : ${3:aws-events-ruletarget.EcsParameters(O)}",
            "    Id : ${4:String(R)}",
            "    Input : ${5:String(O)}",
            "    InputPath : ${6:String(O)}",
            "    InputTransformer : ${7:aws-events-ruletarget.InputTransformer(O)}",
            "    KinesisParameters : ${8:aws-events-ruletarget.KinesisParameters(O)}",
            "    RoleArn : ${9:String(O)}",
            "    RunCommandParameters : ${10:aws-events-ruletarget.RunCommandParameters(O)}",
            "    SqsParameters : ${11:aws-events-ruletarget.SqsParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.kinesisstreamsinput":{
        "prefix":"aws-kinesisanalytics-application.kinesisstreamsinput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.KinesisStreamsInput}:",
            "  Type: AWS::KinesisAnalytics::Application.KinesisStreamsInput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-robomaker-simulationapplication.sourceconfig":{
        "prefix":"aws-robomaker-simulationapplication.sourceconfig",
        "body":[
            "${1:myAWSRoboMakerSimulationApplication.SourceConfig}:",
            "  Type: AWS::RoboMaker::SimulationApplication.SourceConfig",
            "  Properties:",
            "    S3Bucket : ${2:String(R)}",
            "    Architecture : ${3:String(R)}",
            "    S3Key : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.registrycredential":{
        "prefix":"aws-codebuild-project.registrycredential",
        "body":[
            "${1:myAWSCodeBuildProject.RegistryCredential}:",
            "  Type: AWS::CodeBuild::Project.RegistryCredential",
            "  Properties:",
            "    Credential : ${2:String(R)}",
            "    CredentialProvider : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.rdshttpendpointconfig":{
        "prefix":"aws-appsync-datasource.rdshttpendpointconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.RdsHttpEndpointConfig}:",
            "  Type: AWS::AppSync::DataSource.RdsHttpEndpointConfig",
            "  Properties:",
            "    AwsRegion : ${2:String(R)}",
            "    Schema : ${3:String(O)}",
            "    DatabaseName : ${4:String(O)}",
            "    DbClusterIdentifier : ${5:String(R)}",
            "    AwsSecretStoreArn : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordset.aliastarget":{
        "prefix":"aws-route53-recordset.aliastarget",
        "body":[
            "${1:myAWSRoute53RecordSet.AliasTarget}:",
            "  Type: AWS::Route53::RecordSet.AliasTarget",
            "  Properties:",
            "    DNSName : ${2:String(R)}",
            "    EvaluateTargetHealth : ${3:Boolean(O)}",
            "    HostedZoneId : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codecommit-repository.repositorytrigger":{
        "prefix":"aws-codecommit-repository.repositorytrigger",
        "body":[
            "${1:myAWSCodeCommitRepository.RepositoryTrigger}:",
            "  Type: AWS::CodeCommit::Repository.RepositoryTrigger",
            "  Properties:",
            "    Events : [ ${2:String(O)} ]",
            "    Branches : [ ${3:String(O)} ]",
            "    CustomData : ${4:String(O)}",
            "    DestinationArn : ${5:String(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker.user":{
        "prefix":"aws-amazonmq-broker.user",
        "body":[
            "${1:myAWSAmazonMQBroker.User}:",
            "  Type: AWS::AmazonMQ::Broker.User",
            "  Properties:",
            "    Username : ${2:String(R)}",
            "    Groups : [ ${3:String(O)} ]",
            "    ConsoleAccess : ${4:Boolean(O)}",
            "    Password : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-bytematchset.bytematchtuple":{
        "prefix":"aws-waf-bytematchset.bytematchtuple",
        "body":[
            "${1:myAWSWAFByteMatchSet.ByteMatchTuple}:",
            "  Type: AWS::WAF::ByteMatchSet.ByteMatchTuple",
            "  Properties:",
            "    FieldToMatch : ${2:aws-waf-bytematchsetbytematchtuple.FieldToMatch(R)}",
            "    PositionalConstraint : ${3:String(R)}",
            "    TargetString : ${4:String(O)}",
            "    TargetStringBase64 : ${5:String(O)}",
            "    TextTransformation : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-scalingpolicy.targettrackingconfiguration":{
        "prefix":"aws-autoscaling-scalingpolicy.targettrackingconfiguration",
        "body":[
            "${1:myAWSAutoScalingScalingPolicy.TargetTrackingConfiguration}:",
            "  Type: AWS::AutoScaling::ScalingPolicy.TargetTrackingConfiguration",
            "  Properties:",
            "    CustomizedMetricSpecification : ${2:aws-autoscaling-scalingpolicytargettrackingconfiguration.CustomizedMetricSpecification(O)}",
            "    DisableScaleIn : ${3:Boolean(O)}",
            "    PredefinedMetricSpecification : ${4:aws-autoscaling-scalingpolicytargettrackingconfiguration.PredefinedMetricSpecification(O)}",
            "    TargetValue : ${5:Double(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.mountpoint":{
        "prefix":"aws-ecs-taskdefinition.mountpoint",
        "body":[
            "${1:myAWSECSTaskDefinition.MountPoint}:",
            "  Type: AWS::ECS::TaskDefinition.MountPoint",
            "  Properties:",
            "    ContainerPath : ${2:String(O)}",
            "    ReadOnly : ${3:Boolean(O)}",
            "    SourceVolume : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.math":{
        "prefix":"aws-iotanalytics-pipeline.math",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Math}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Math",
            "  Properties:",
            "    Attribute : ${2:String(O)}",
            "    Next : ${3:String(O)}",
            "    Math : ${4:String(O)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.application":{
        "prefix":"aws-emr-cluster.application",
        "body":[
            "${1:myAWSEMRCluster.Application}:",
            "  Type: AWS::EMR::Cluster.Application",
            "  Properties:",
            "    AdditionalInfo : [ ${2:String(O)} ]",
            "    Args : [ ${3:String(O)} ]",
            "    Name : ${4:String(O)}",
            "    Version : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.httproutematch":{
        "prefix":"aws-appmesh-route.httproutematch",
        "body":[
            "${1:myAWSAppMeshRoute.HttpRouteMatch}:",
            "  Type: AWS::AppMesh::Route.HttpRouteMatch",
            "  Properties:",
            "    Prefix : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.kinesisstreamsourceconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.kinesisstreamsourceconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.KinesisStreamSourceConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.KinesisStreamSourceConfiguration",
            "  Properties:",
            "    KinesisStreamARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.removeattributes":{
        "prefix":"aws-iotanalytics-pipeline.removeattributes",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.RemoveAttributes}:",
            "  Type: AWS::IoTAnalytics::Pipeline.RemoveAttributes",
            "  Properties:",
            "    Next : ${2:String(O)}",
            "    Attributes : [ ${3:String(O)} ]",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-classifier.xmlclassifier":{
        "prefix":"aws-glue-classifier.xmlclassifier",
        "body":[
            "${1:myAWSGlueClassifier.XMLClassifier}:",
            "  Type: AWS::Glue::Classifier.XMLClassifier",
            "  Properties:",
            "    RowTag : ${2:String(R)}",
            "    Classification : ${3:String(R)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.taskinvocationparameters":{
        "prefix":"aws-ssm-maintenancewindowtask.taskinvocationparameters",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.TaskInvocationParameters}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters",
            "  Properties:",
            "    MaintenanceWindowRunCommandParameters : ${2:aws-ssm-maintenancewindowtasktaskinvocationparameters.MaintenanceWindowRunCommandParameters(O)}",
            "    MaintenanceWindowAutomationParameters : ${3:aws-ssm-maintenancewindowtasktaskinvocationparameters.MaintenanceWindowAutomationParameters(O)}",
            "    MaintenanceWindowStepFunctionsParameters : ${4:aws-ssm-maintenancewindowtasktaskinvocationparameters.MaintenanceWindowStepFunctionsParameters(O)}",
            "    MaintenanceWindowLambdaParameters : ${5:aws-ssm-maintenancewindowtasktaskinvocationparameters.MaintenanceWindowLambdaParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.lambdaconfig":{
        "prefix":"aws-appsync-datasource.lambdaconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.LambdaConfig}:",
            "  Type: AWS::AppSync::DataSource.LambdaConfig",
            "  Properties:",
            "    LambdaFunctionArn : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.mappingparameters":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.mappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.MappingParameters}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.MappingParameters",
            "  Properties:",
            "    JSONMappingParameters : ${2:aws-kinesisanalytics-applicationreferencedatasourcemappingparameters.JSONMappingParameters(O)}",
            "    CSVMappingParameters : ${3:aws-kinesisanalytics-applicationreferencedatasourcemappingparameters.CSVMappingParameters(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.ec2tagset":{
        "prefix":"aws-codedeploy-deploymentgroup.ec2tagset",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.EC2TagSet}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.EC2TagSet",
            "  Properties:",
            "    Ec2TagSetList : [ ${2:aws-codedeploy-deploymentgroupec2tagset.EC2TagSetListObject(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-routeresponse.parameterconstraints":{
        "prefix":"aws-apigatewayv2-routeresponse.parameterconstraints",
        "body":[
            "${1:myAWSApiGatewayV2RouteResponse.ParameterConstraints}:",
            "  Type: AWS::ApiGatewayV2::RouteResponse.ParameterConstraints",
            "  Properties:",
            "    Required : ${2:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.metricdimension":{
        "prefix":"aws-autoscalingplans-scalingplan.metricdimension",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.MetricDimension}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.MetricDimension",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Name : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.globalsecondaryindex":{
        "prefix":"aws-dynamodb-table.globalsecondaryindex",
        "body":[
            "${1:myAWSDynamoDBTable.GlobalSecondaryIndex}:",
            "  Type: AWS::DynamoDB::Table.GlobalSecondaryIndex",
            "  Properties:",
            "    IndexName : ${2:String(R)}",
            "    KeySchema : [ ${3:aws-dynamodb-tableglobalsecondaryindex.KeySchema(R)} ]",
            "    Projection : ${4:aws-dynamodb-tableglobalsecondaryindex.Projection(R)}",
            "    ProvisionedThroughput : ${5:aws-dynamodb-tableglobalsecondaryindex.ProvisionedThroughput(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.redirectrule":{
        "prefix":"aws-s3-bucket.redirectrule",
        "body":[
            "${1:myAWSS3Bucket.RedirectRule}:",
            "  Type: AWS::S3::Bucket.RedirectRule",
            "  Properties:",
            "    HostName : ${2:String(O)}",
            "    HttpRedirectCode : ${3:String(O)}",
            "    Protocol : ${4:String(O)}",
            "    ReplaceKeyPrefixWith : ${5:String(O)}",
            "    ReplaceKeyWith : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-eventbuspolicy.condition":{
        "prefix":"aws-events-eventbuspolicy.condition",
        "body":[
            "${1:myAWSEventsEventBusPolicy.Condition}:",
            "  Type: AWS::Events::EventBusPolicy.Condition",
            "  Properties:",
            "    Type : ${2:String(O)}",
            "    Value : ${3:String(O)}",
            "    Key : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.scalingrule":{
        "prefix":"aws-emr-instancegroupconfig.scalingrule",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.ScalingRule}:",
            "  Type: AWS::EMR::InstanceGroupConfig.ScalingRule",
            "  Properties:",
            "    Action : ${2:aws-emr-instancegroupconfigscalingrule.ScalingAction(R)}",
            "    Description : ${3:String(O)}",
            "    Name : ${4:String(R)}",
            "    Trigger : ${5:aws-emr-instancegroupconfigscalingrule.ScalingTrigger(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.placementtype":{
        "prefix":"aws-emr-cluster.placementtype",
        "body":[
            "${1:myAWSEMRCluster.PlacementType}:",
            "  Type: AWS::EMR::Cluster.PlacementType",
            "  Properties:",
            "    AvailabilityZone : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.rulecondition":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.rulecondition",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.RuleCondition}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.RuleCondition",
            "  Properties:",
            "    Field : ${2:String(O)}",
            "    Values : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice.tagref":{
        "prefix":"aws-appmesh-virtualservice.tagref",
        "body":[
            "${1:myAWSAppMeshVirtualService.TagRef}:",
            "  Type: AWS::AppMesh::VirtualService.TagRef",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.healthcheck":{
        "prefix":"aws-appmesh-virtualnode.healthcheck",
        "body":[
            "${1:myAWSAppMeshVirtualNode.HealthCheck}:",
            "  Type: AWS::AppMesh::VirtualNode.HealthCheck",
            "  Properties:",
            "    Path : ${2:String(O)}",
            "    UnhealthyThreshold : ${3:Integer(R)}",
            "    Port : ${4:Integer(O)}",
            "    HealthyThreshold : ${5:Integer(R)}",
            "    TimeoutMillis : ${6:Integer(R)}",
            "    Protocol : ${7:String(R)}",
            "    IntervalMillis : ${8:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.alarmconfiguration":{
        "prefix":"aws-codedeploy-deploymentgroup.alarmconfiguration",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.AlarmConfiguration}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration",
            "  Properties:",
            "    Alarms : [ ${2:aws-codedeploy-deploymentgroupalarmconfiguration.Alarm(O)} ]",
            "    Enabled : ${3:Boolean(O)}",
            "    IgnorePollAlarmFailure : ${4:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.jsonmappingparameters":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.jsonmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.JSONMappingParameters}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.JSONMappingParameters",
            "  Properties:",
            "    RecordRowPath : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.datastore":{
        "prefix":"aws-iotanalytics-pipeline.datastore",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.Datastore}:",
            "  Type: AWS::IoTAnalytics::Pipeline.Datastore",
            "  Properties:",
            "    DatastoreName : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-app.sslconfiguration":{
        "prefix":"aws-opsworks-app.sslconfiguration",
        "body":[
            "${1:myAWSOpsWorksApp.SslConfiguration}:",
            "  Type: AWS::OpsWorks::App.SslConfiguration",
            "  Properties:",
            "    Certificate : ${2:String(O)}",
            "    Chain : ${3:String(O)}",
            "    PrivateKey : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalabletarget.scheduledaction":{
        "prefix":"aws-applicationautoscaling-scalabletarget.scheduledaction",
        "body":[
            "${1:myAWSApplicationAutoScalingScalableTarget.ScheduledAction}:",
            "  Type: AWS::ApplicationAutoScaling::ScalableTarget.ScheduledAction",
            "  Properties:",
            "    EndTime : ${2:Timestamp(O)}",
            "    ScalableTargetAction : ${3:aws-applicationautoscaling-scalabletargetscheduledaction.ScalableTargetAction(O)}",
            "    Schedule : ${4:String(R)}",
            "    ScheduledActionName : ${5:String(R)}",
            "    StartTime : ${6:Timestamp(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline.patchfilter":{
        "prefix":"aws-ssm-patchbaseline.patchfilter",
        "body":[
            "${1:myAWSSSMPatchBaseline.PatchFilter}:",
            "  Type: AWS::SSM::PatchBaseline.PatchFilter",
            "  Properties:",
            "    Values : [ ${2:String(O)} ]",
            "    Key : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.instanceipv6address":{
        "prefix":"aws-ec2-instance.instanceipv6address",
        "body":[
            "${1:myAWSEC2Instance.InstanceIpv6Address}:",
            "  Type: AWS::EC2::Instance.InstanceIpv6Address",
            "  Properties:",
            "    Ipv6Address : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-environment.tier":{
        "prefix":"aws-elasticbeanstalk-environment.tier",
        "body":[
            "${1:myAWSElasticBeanstalkEnvironment.Tier}:",
            "  Type: AWS::ElasticBeanstalk::Environment.Tier",
            "  Properties:",
            "    Name : ${2:String(O)}",
            "    Type : ${3:String(O)}",
            "    Version : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.associationparameter":{
        "prefix":"aws-ec2-instance.associationparameter",
        "body":[
            "${1:myAWSEC2Instance.AssociationParameter}:",
            "  Type: AWS::EC2::Instance.AssociationParameter",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.topicrulepayload":{
        "prefix":"aws-iot-topicrule.topicrulepayload",
        "body":[
            "${1:myAWSIoTTopicRule.TopicRulePayload}:",
            "  Type: AWS::IoT::TopicRule.TopicRulePayload",
            "  Properties:",
            "    Actions : [ ${2:aws-iot-topicruletopicrulepayload.Action(R)} ]",
            "    AwsIotSqlVersion : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    ErrorAction : ${5:aws-iot-topicruletopicrulepayload.Action(O)}",
            "    RuleDisabled : ${6:Boolean(R)}",
            "    Sql : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypool.pushsync":{
        "prefix":"aws-cognito-identitypool.pushsync",
        "body":[
            "${1:myAWSCognitoIdentityPool.PushSync}:",
            "  Type: AWS::Cognito::IdentityPool.PushSync",
            "  Properties:",
            "    ApplicationArns : [ ${2:String(O)} ]",
            "    RoleArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.connectiondrainingpolicy":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.connectiondrainingpolicy",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.ConnectionDrainingPolicy}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy",
            "  Properties:",
            "    Enabled : ${2:Boolean(R)}",
            "    Timeout : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-service.serviceregistry":{
        "prefix":"aws-ecs-service.serviceregistry",
        "body":[
            "${1:myAWSECSService.ServiceRegistry}:",
            "  Type: AWS::ECS::Service.ServiceRegistry",
            "  Properties:",
            "    ContainerName : ${2:String(O)}",
            "    ContainerPort : ${3:Integer(O)}",
            "    Port : ${4:Integer(O)}",
            "    RegistryArn : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.websiteconfiguration":{
        "prefix":"aws-s3-bucket.websiteconfiguration",
        "body":[
            "${1:myAWSS3Bucket.WebsiteConfiguration}:",
            "  Type: AWS::S3::Bucket.WebsiteConfiguration",
            "  Properties:",
            "    ErrorDocument : ${2:String(O)}",
            "    IndexDocument : ${3:String(O)}",
            "    RedirectAllRequestsTo : ${4:aws-s3-bucketwebsiteconfiguration.RedirectAllRequestsTo(O)}",
            "    RoutingRules : [ ${5:aws-s3-bucketwebsiteconfiguration.RoutingRule(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypool.cognitoidentityprovider":{
        "prefix":"aws-cognito-identitypool.cognitoidentityprovider",
        "body":[
            "${1:myAWSCognitoIdentityPool.CognitoIdentityProvider}:",
            "  Type: AWS::Cognito::IdentityPool.CognitoIdentityProvider",
            "  Properties:",
            "    ServerSideTokenCheck : ${2:Boolean(O)}",
            "    ProviderName : ${3:String(O)}",
            "    ClientId : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.georestriction":{
        "prefix":"aws-cloudfront-distribution.georestriction",
        "body":[
            "${1:myAWSCloudFrontDistribution.GeoRestriction}:",
            "  Type: AWS::CloudFront::Distribution.GeoRestriction",
            "  Properties:",
            "    Locations : [ ${2:String(O)} ]",
            "    RestrictionType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.fleetlaunchtemplateconfigrequest":{
        "prefix":"aws-ec2-ec2fleet.fleetlaunchtemplateconfigrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.FleetLaunchTemplateConfigRequest}:",
            "  Type: AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest",
            "  Properties:",
            "    LaunchTemplateSpecification : ${2:aws-ec2-ec2fleetfleetlaunchtemplateconfigrequest.FleetLaunchTemplateSpecificationRequest(O)}",
            "    Overrides : [ ${3:aws-ec2-ec2fleetfleetlaunchtemplateconfigrequest.FleetLaunchTemplateOverridesRequest(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.resourceconfiguration":{
        "prefix":"aws-iotanalytics-dataset.resourceconfiguration",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.ResourceConfiguration}:",
            "  Type: AWS::IoTAnalytics::Dataset.ResourceConfiguration",
            "  Properties:",
            "    VolumeSizeInGB : ${2:Integer(R)}",
            "    ComputeType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.snsaction":{
        "prefix":"aws-ses-receiptrule.snsaction",
        "body":[
            "${1:myAWSSESReceiptRule.SNSAction}:",
            "  Type: AWS::SES::ReceiptRule.SNSAction",
            "  Properties:",
            "    TopicArn : ${2:String(O)}",
            "    Encoding : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-configurationtemplate.configurationoptionsetting":{
        "prefix":"aws-elasticbeanstalk-configurationtemplate.configurationoptionsetting",
        "body":[
            "${1:myAWSElasticBeanstalkConfigurationTemplate.ConfigurationOptionSetting}:",
            "  Type: AWS::ElasticBeanstalk::ConfigurationTemplate.ConfigurationOptionSetting",
            "  Properties:",
            "    Namespace : ${2:String(R)}",
            "    OptionName : ${3:String(R)}",
            "    ResourceName : ${4:String(O)}",
            "    Value : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-batch-jobdefinition.noderangeproperty":{
        "prefix":"aws-batch-jobdefinition.noderangeproperty",
        "body":[
            "${1:myAWSBatchJobDefinition.NodeRangeProperty}:",
            "  Type: AWS::Batch::JobDefinition.NodeRangeProperty",
            "  Properties:",
            "    Container : ${2:aws-batch-jobdefinitionnoderangeproperty.ContainerProperties(O)}",
            "    TargetNodes : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.policies":{
        "prefix":"aws-cognito-userpool.policies",
        "body":[
            "${1:myAWSCognitoUserPool.Policies}:",
            "  Type: AWS::Cognito::UserPool.Policies",
            "  Properties:",
            "    PasswordPolicy : ${2:aws-cognito-userpoolpolicies.PasswordPolicy(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.kinesisparameters":{
        "prefix":"aws-events-rule.kinesisparameters",
        "body":[
            "${1:myAWSEventsRule.KinesisParameters}:",
            "  Type: AWS::Events::Rule.KinesisParameters",
            "  Properties:",
            "    PartitionKeyPath : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-bytematchset.fieldtomatch":{
        "prefix":"aws-wafregional-bytematchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFRegionalByteMatchSet.FieldToMatch}:",
            "  Type: AWS::WAFRegional::ByteMatchSet.FieldToMatch",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Data : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.launchtemplatespecification":{
        "prefix":"aws-ec2-instance.launchtemplatespecification",
        "body":[
            "${1:myAWSEC2Instance.LaunchTemplateSpecification}:",
            "  Type: AWS::EC2::Instance.LaunchTemplateSpecification",
            "  Properties:",
            "    LaunchTemplateId : ${2:String(O)}",
            "    LaunchTemplateName : ${3:String(O)}",
            "    Version : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.metricscollection":{
        "prefix":"aws-autoscaling-autoscalinggroup.metricscollection",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.MetricsCollection}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.MetricsCollection",
            "  Properties:",
            "    Granularity : ${2:String(R)}",
            "    Metrics : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.artifactstore":{
        "prefix":"aws-codepipeline-pipeline.artifactstore",
        "body":[
            "${1:myAWSCodePipelinePipeline.ArtifactStore}:",
            "  Type: AWS::CodePipeline::Pipeline.ArtifactStore",
            "  Properties:",
            "    EncryptionKey : ${2:aws-codepipeline-pipelineartifactstore.EncryptionKey(O)}",
            "    Location : ${3:String(R)}",
            "    Type : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.cloudwatchlogsconfig":{
        "prefix":"aws-codebuild-project.cloudwatchlogsconfig",
        "body":[
            "${1:myAWSCodeBuildProject.CloudWatchLogsConfig}:",
            "  Type: AWS::CodeBuild::Project.CloudWatchLogsConfig",
            "  Properties:",
            "    Status : ${2:String(R)}",
            "    GroupName : ${3:String(O)}",
            "    StreamName : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.keyschema":{
        "prefix":"aws-dynamodb-table.keyschema",
        "body":[
            "${1:myAWSDynamoDBTable.KeySchema}:",
            "  Type: AWS::DynamoDB::Table.KeySchema",
            "  Properties:",
            "    AttributeName : ${2:String(R)}",
            "    KeyType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.localvolumeresourcedata":{
        "prefix":"aws-greengrass-resourcedefinitionversion.localvolumeresourcedata",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.LocalVolumeResourceData}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData",
            "  Properties:",
            "    SourcePath : ${2:String(R)}",
            "    DestinationPath : ${3:String(R)}",
            "    GroupOwnerSetting : ${4:aws-greengrass-resourcedefinitionversionlocalvolumeresourcedata.GroupOwnerSetting(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-mesh.egressfilter":{
        "prefix":"aws-appmesh-mesh.egressfilter",
        "body":[
            "${1:myAWSAppMeshMesh.EgressFilter}:",
            "  Type: AWS::AppMesh::Mesh.EgressFilter",
            "  Properties:",
            "    Type : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline.rule":{
        "prefix":"aws-ssm-patchbaseline.rule",
        "body":[
            "${1:myAWSSSMPatchBaseline.Rule}:",
            "  Type: AWS::SSM::PatchBaseline.Rule",
            "  Properties:",
            "    EnableNonSecurity : ${2:Boolean(O)}",
            "    PatchFilterGroup : ${3:aws-ssm-patchbaselinerule.PatchFilterGroup(O)}",
            "    ApproveAfterDays : ${4:Integer(O)}",
            "    ComplianceLevel : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.viewercertificate":{
        "prefix":"aws-cloudfront-distribution.viewercertificate",
        "body":[
            "${1:myAWSCloudFrontDistribution.ViewerCertificate}:",
            "  Type: AWS::CloudFront::Distribution.ViewerCertificate",
            "  Properties:",
            "    IamCertificateId : ${2:String(O)}",
            "    SslSupportMethod : ${3:String(O)}",
            "    MinimumProtocolVersion : ${4:String(O)}",
            "    CloudFrontDefaultCertificate : ${5:Boolean(O)}",
            "    AcmCertificateArn : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationseteventdestination.cloudwatchdestination":{
        "prefix":"aws-ses-configurationseteventdestination.cloudwatchdestination",
        "body":[
            "${1:myAWSSESConfigurationSetEventDestination.CloudWatchDestination}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination.CloudWatchDestination",
            "  Properties:",
            "    DimensionConfigurations : [ ${2:aws-ses-configurationseteventdestinationcloudwatchdestination.DimensionConfiguration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice.virtualnodeserviceprovider":{
        "prefix":"aws-appmesh-virtualservice.virtualnodeserviceprovider",
        "body":[
            "${1:myAWSAppMeshVirtualService.VirtualNodeServiceProvider}:",
            "  Type: AWS::AppMesh::VirtualService.VirtualNodeServiceProvider",
            "  Properties:",
            "    VirtualNodeName : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.configuration":{
        "prefix":"aws-emr-cluster.configuration",
        "body":[
            "${1:myAWSEMRCluster.Configuration}:",
            "  Type: AWS::EMR::Cluster.Configuration",
            "  Properties:",
            "    Classification : ${2:String(O)}",
            "    ConfigurationProperties : [ ${3:String(O)} ]",
            "    Configurations : [ ${4:aws-emr-clusterconfiguration.Configuration(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.instancetypeconfig":{
        "prefix":"aws-emr-instancefleetconfig.instancetypeconfig",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.InstanceTypeConfig}:",
            "  Type: AWS::EMR::InstanceFleetConfig.InstanceTypeConfig",
            "  Properties:",
            "    BidPrice : ${2:String(O)}",
            "    BidPriceAsPercentageOfOnDemandPrice : ${3:Double(O)}",
            "    Configurations : [ ${4:aws-emr-instancefleetconfiginstancetypeconfig.Configuration(O)} ]",
            "    EbsConfiguration : ${5:aws-emr-instancefleetconfiginstancetypeconfig.EbsConfiguration(O)}",
            "    InstanceType : ${6:String(R)}",
            "    WeightedCapacity : ${7:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-xssmatchset.xssmatchtuple":{
        "prefix":"aws-wafregional-xssmatchset.xssmatchtuple",
        "body":[
            "${1:myAWSWAFRegionalXssMatchSet.XssMatchTuple}:",
            "  Type: AWS::WAFRegional::XssMatchSet.XssMatchTuple",
            "  Properties:",
            "    TextTransformation : ${2:String(R)}",
            "    FieldToMatch : ${3:aws-wafregional-xssmatchsetxssmatchtuple.FieldToMatch(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.rule":{
        "prefix":"aws-s3-bucket.rule",
        "body":[
            "${1:myAWSS3Bucket.Rule}:",
            "  Type: AWS::S3::Bucket.Rule",
            "  Properties:",
            "    AbortIncompleteMultipartUpload : ${2:aws-s3-bucketrule.AbortIncompleteMultipartUpload(O)}",
            "    ExpirationDate : ${3:Timestamp(O)}",
            "    ExpirationInDays : ${4:Integer(O)}",
            "    Id : ${5:String(O)}",
            "    NoncurrentVersionExpirationInDays : ${6:Integer(O)}",
            "    NoncurrentVersionTransition : ${7:aws-s3-bucketrule.NoncurrentVersionTransition(O)}",
            "    NoncurrentVersionTransitions : [ ${8:aws-s3-bucketrule.NoncurrentVersionTransition(O)} ]",
            "    Prefix : ${9:String(O)}",
            "    Status : ${10:String(R)}",
            "    TagFilters : [ ${11:aws-s3-bucketrule.TagFilter(O)} ]",
            "    Transition : ${12:aws-s3-bucketrule.Transition(O)}",
            "    Transitions : [ ${13:aws-s3-bucketrule.Transition(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dlm-lifecyclepolicy.retainrule":{
        "prefix":"aws-dlm-lifecyclepolicy.retainrule",
        "body":[
            "${1:myAWSDLMLifecyclePolicy.RetainRule}:",
            "  Type: AWS::DLM::LifecyclePolicy.RetainRule",
            "  Properties:",
            "    Count : ${2:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.kernelcapabilities":{
        "prefix":"aws-ecs-taskdefinition.kernelcapabilities",
        "body":[
            "${1:myAWSECSTaskDefinition.KernelCapabilities}:",
            "  Type: AWS::ECS::TaskDefinition.KernelCapabilities",
            "  Properties:",
            "    Add : [ ${2:String(O)} ]",
            "    Drop : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.triggeringdataset":{
        "prefix":"aws-iotanalytics-dataset.triggeringdataset",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.TriggeringDataset}:",
            "  Type: AWS::IoTAnalytics::Dataset.TriggeringDataset",
            "  Properties:",
            "    DatasetName : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.topicconfiguration":{
        "prefix":"aws-s3-bucket.topicconfiguration",
        "body":[
            "${1:myAWSS3Bucket.TopicConfiguration}:",
            "  Type: AWS::S3::Bucket.TopicConfiguration",
            "  Properties:",
            "    Event : ${2:String(R)}",
            "    Filter : ${3:aws-s3-buckettopicconfiguration.NotificationFilter(O)}",
            "    Topic : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.s3originconfig":{
        "prefix":"aws-cloudfront-distribution.s3originconfig",
        "body":[
            "${1:myAWSCloudFrontDistribution.S3OriginConfig}:",
            "  Type: AWS::CloudFront::Distribution.S3OriginConfig",
            "  Properties:",
            "    OriginAccessIdentity : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-association.parametervalues":{
        "prefix":"aws-ssm-association.parametervalues",
        "body":[
            "${1:myAWSSSMAssociation.ParameterValues}:",
            "  Type: AWS::SSM::Association.ParameterValues",
            "  Properties:",
            "    ParameterValues : [ ${2:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.recordcolumn":{
        "prefix":"aws-kinesisanalytics-application.recordcolumn",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.RecordColumn}:",
            "  Type: AWS::KinesisAnalytics::Application.RecordColumn",
            "  Properties:",
            "    Mapping : ${2:String(O)}",
            "    SqlType : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline.patchfiltergroup":{
        "prefix":"aws-ssm-patchbaseline.patchfiltergroup",
        "body":[
            "${1:myAWSSSMPatchBaseline.PatchFilterGroup}:",
            "  Type: AWS::SSM::PatchBaseline.PatchFilterGroup",
            "  Properties:",
            "    PatchFilters : [ ${2:aws-ssm-patchbaselinepatchfiltergroup.PatchFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.lambdaconfig":{
        "prefix":"aws-cognito-userpool.lambdaconfig",
        "body":[
            "${1:myAWSCognitoUserPool.LambdaConfig}:",
            "  Type: AWS::Cognito::UserPool.LambdaConfig",
            "  Properties:",
            "    CreateAuthChallenge : ${2:String(O)}",
            "    PreAuthentication : ${3:String(O)}",
            "    DefineAuthChallenge : ${4:String(O)}",
            "    PreSignUp : ${5:String(O)}",
            "    PostAuthentication : ${6:String(O)}",
            "    PostConfirmation : ${7:String(O)}",
            "    CustomMessage : ${8:String(O)}",
            "    VerifyAuthChallengeResponse : ${9:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dlm-lifecyclepolicy.policydetails":{
        "prefix":"aws-dlm-lifecyclepolicy.policydetails",
        "body":[
            "${1:myAWSDLMLifecyclePolicy.PolicyDetails}:",
            "  Type: AWS::DLM::LifecyclePolicy.PolicyDetails",
            "  Properties:",
            "    ResourceTypes : [ ${2:String(O)} ]",
            "    Schedules : [ ${3:aws-dlm-lifecyclepolicypolicydetails.Schedule(O)} ]",
            "    TargetTags : [ ${4:aws-dlm-lifecyclepolicypolicydetails.Tag(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-configuration.tagsentry":{
        "prefix":"aws-amazonmq-configuration.tagsentry",
        "body":[
            "${1:myAWSAmazonMQConfiguration.TagsEntry}:",
            "  Type: AWS::AmazonMQ::Configuration.TagsEntry",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.tableinput":{
        "prefix":"aws-glue-table.tableinput",
        "body":[
            "${1:myAWSGlueTable.TableInput}:",
            "  Type: AWS::Glue::Table.TableInput",
            "  Properties:",
            "    Owner : ${2:String(O)}",
            "    ViewOriginalText : ${3:String(O)}",
            "    Description : ${4:String(O)}",
            "    TableType : ${5:String(O)}",
            "    Parameters : ${6:Json(O)}",
            "    ViewExpandedText : ${7:String(O)}",
            "    StorageDescriptor : ${8:aws-glue-tabletableinput.StorageDescriptor(O)}",
            "    PartitionKeys : [ ${9:aws-glue-tabletableinput.Column(O)} ]",
            "    Retention : ${10:Integer(O)}",
            "    Name : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.projectcache":{
        "prefix":"aws-codebuild-project.projectcache",
        "body":[
            "${1:myAWSCodeBuildProject.ProjectCache}:",
            "  Type: AWS::CodeBuild::Project.ProjectCache",
            "  Properties:",
            "    Modes : [ ${2:String(O)} ]",
            "    Type : ${3:String(R)}",
            "    Location : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sizeconstraintset.fieldtomatch":{
        "prefix":"aws-waf-sizeconstraintset.fieldtomatch",
        "body":[
            "${1:myAWSWAFSizeConstraintSet.FieldToMatch}:",
            "  Type: AWS::WAF::SizeConstraintSet.FieldToMatch",
            "  Properties:",
            "    Data : ${2:String(O)}",
            "    Type : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualrouter.tagref":{
        "prefix":"aws-appmesh-virtualrouter.tagref",
        "body":[
            "${1:myAWSAppMeshVirtualRouter.TagRef}:",
            "  Type: AWS::AppMesh::VirtualRouter.TagRef",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.addattributes":{
        "prefix":"aws-iotanalytics-pipeline.addattributes",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.AddAttributes}:",
            "  Type: AWS::IoTAnalytics::Pipeline.AddAttributes",
            "  Properties:",
            "    Next : ${2:String(O)}",
            "    Attributes : ${3:Json(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function.tracingconfig":{
        "prefix":"aws-lambda-function.tracingconfig",
        "body":[
            "${1:myAWSLambdaFunction.TracingConfig}:",
            "  Type: AWS::Lambda::Function.TracingConfig",
            "  Properties:",
            "    Mode : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.scriptbootstrapactionconfig":{
        "prefix":"aws-emr-cluster.scriptbootstrapactionconfig",
        "body":[
            "${1:myAWSEMRCluster.ScriptBootstrapActionConfig}:",
            "  Type: AWS::EMR::Cluster.ScriptBootstrapActionConfig",
            "  Properties:",
            "    Args : [ ${2:String(O)} ]",
            "    Path : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-launchconfiguration.blockdevice":{
        "prefix":"aws-autoscaling-launchconfiguration.blockdevice",
        "body":[
            "${1:myAWSAutoScalingLaunchConfiguration.BlockDevice}:",
            "  Type: AWS::AutoScaling::LaunchConfiguration.BlockDevice",
            "  Properties:",
            "    DeleteOnTermination : ${2:Boolean(O)}",
            "    Encrypted : ${3:Boolean(O)}",
            "    Iops : ${4:Integer(O)}",
            "    SnapshotId : ${5:String(O)}",
            "    VolumeSize : ${6:Integer(O)}",
            "    VolumeType : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.metricsconfiguration":{
        "prefix":"aws-s3-bucket.metricsconfiguration",
        "body":[
            "${1:myAWSS3Bucket.MetricsConfiguration}:",
            "  Type: AWS::S3::Bucket.MetricsConfiguration",
            "  Properties:",
            "    Id : ${2:String(R)}",
            "    Prefix : ${3:String(O)}",
            "    TagFilters : [ ${4:aws-s3-bucketmetricsconfiguration.TagFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.autoscalingthresholds":{
        "prefix":"aws-opsworks-layer.autoscalingthresholds",
        "body":[
            "${1:myAWSOpsWorksLayer.AutoScalingThresholds}:",
            "  Type: AWS::OpsWorks::Layer.AutoScalingThresholds",
            "  Properties:",
            "    CpuThreshold : ${2:Double(O)}",
            "    IgnoreMetricsTime : ${3:Integer(O)}",
            "    InstanceCount : ${4:Integer(O)}",
            "    LoadThreshold : ${5:Double(O)}",
            "    MemoryThreshold : ${6:Double(O)}",
            "    ThresholdsWaitTime : ${7:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.schedule":{
        "prefix":"aws-iotanalytics-dataset.schedule",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.Schedule}:",
            "  Type: AWS::IoTAnalytics::Dataset.Schedule",
            "  Properties:",
            "    ScheduleExpression : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.s3referencedatasource":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.s3referencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.S3ReferenceDataSource}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.S3ReferenceDataSource",
            "  Properties:",
            "    BucketARN : ${2:String(R)}",
            "    FileKey : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.recordcolumn":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.recordcolumn",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.RecordColumn}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordColumn",
            "  Properties:",
            "    Mapping : ${2:String(O)}",
            "    SqlType : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-classifier.grokclassifier":{
        "prefix":"aws-glue-classifier.grokclassifier",
        "body":[
            "${1:myAWSGlueClassifier.GrokClassifier}:",
            "  Type: AWS::Glue::Classifier.GrokClassifier",
            "  Properties:",
            "    CustomPatterns : ${2:String(O)}",
            "    GrokPattern : ${3:String(R)}",
            "    Classification : ${4:String(R)}",
            "    Name : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.recordformat":{
        "prefix":"aws-kinesisanalytics-application.recordformat",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.RecordFormat}:",
            "  Type: AWS::KinesisAnalytics::Application.RecordFormat",
            "  Properties:",
            "    MappingParameters : ${2:aws-kinesisanalytics-applicationrecordformat.MappingParameters(O)}",
            "    RecordFormatType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.httpconfig":{
        "prefix":"aws-appsync-datasource.httpconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.HttpConfig}:",
            "  Type: AWS::AppSync::DataSource.HttpConfig",
            "  Properties:",
            "    Endpoint : ${2:String(R)}",
            "    AuthorizationConfig : ${3:aws-appsync-datasourcehttpconfig.AuthorizationConfig(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.tagfilter":{
        "prefix":"aws-s3-bucket.tagfilter",
        "body":[
            "${1:myAWSS3Bucket.TagFilter}:",
            "  Type: AWS::S3::Bucket.TagFilter",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-pipeline.deviceregistryenrich":{
        "prefix":"aws-iotanalytics-pipeline.deviceregistryenrich",
        "body":[
            "${1:myAWSIoTAnalyticsPipeline.DeviceRegistryEnrich}:",
            "  Type: AWS::IoTAnalytics::Pipeline.DeviceRegistryEnrich",
            "  Properties:",
            "    Attribute : ${2:String(O)}",
            "    Next : ${3:String(O)}",
            "    ThingName : ${4:String(O)}",
            "    RoleArn : ${5:String(O)}",
            "    Name : ${6:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-waf-sizeconstraintset.sizeconstraint":{
        "prefix":"aws-waf-sizeconstraintset.sizeconstraint",
        "body":[
            "${1:myAWSWAFSizeConstraintSet.SizeConstraint}:",
            "  Type: AWS::WAF::SizeConstraintSet.SizeConstraint",
            "  Properties:",
            "    ComparisonOperator : ${2:String(R)}",
            "    FieldToMatch : ${3:aws-waf-sizeconstraintsetsizeconstraint.FieldToMatch(R)}",
            "    Size : ${4:Integer(R)}",
            "    TextTransformation : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-guardduty-filter.condition":{
        "prefix":"aws-guardduty-filter.condition",
        "body":[
            "${1:myAWSGuardDutyFilter.Condition}:",
            "  Type: AWS::GuardDuty::Filter.Condition",
            "  Properties:",
            "    Lt : ${2:Integer(O)}",
            "    Gte : ${3:Integer(O)}",
            "    Neq : [ ${4:String(O)} ]",
            "    Eq : [ ${5:String(O)} ]",
            "    Lte : ${6:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.filtergroup":{
        "prefix":"aws-codebuild-project.filtergroup",
        "body":[
            "${1:myAWSCodeBuildProject.FilterGroup}:",
            "  Type: AWS::CodeBuild::Project.FilterGroup",
            "  Properties:"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.ipv6add":{
        "prefix":"aws-ec2-launchtemplate.ipv6add",
        "body":[
            "${1:myAWSEC2LaunchTemplate.Ipv6Add}:",
            "  Type: AWS::EC2::LaunchTemplate.Ipv6Add",
            "  Properties:",
            "    Ipv6Address : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.licensespecification":{
        "prefix":"aws-ec2-instance.licensespecification",
        "body":[
            "${1:myAWSEC2Instance.LicenseSpecification}:",
            "  Type: AWS::EC2::Instance.LicenseSpecification",
            "  Properties:",
            "    LicenseConfigurationArn : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.predefinedscalingmetricspecification":{
        "prefix":"aws-autoscalingplans-scalingplan.predefinedscalingmetricspecification",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.PredefinedScalingMetricSpecification}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.PredefinedScalingMetricSpecification",
            "  Properties:",
            "    ResourceLabel : ${2:String(O)}",
            "    PredefinedScalingMetricType : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.rule":{
        "prefix":"aws-ses-receiptrule.rule",
        "body":[
            "${1:myAWSSESReceiptRule.Rule}:",
            "  Type: AWS::SES::ReceiptRule.Rule",
            "  Properties:",
            "    ScanEnabled : ${2:Boolean(O)}",
            "    Recipients : [ ${3:String(O)} ]",
            "    Actions : [ ${4:aws-ses-receiptrulerule.Action(O)} ]",
            "    Enabled : ${5:Boolean(O)}",
            "    Name : ${6:String(O)}",
            "    TlsPolicy : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudtrail-trail.dataresource":{
        "prefix":"aws-cloudtrail-trail.dataresource",
        "body":[
            "${1:myAWSCloudTrailTrail.DataResource}:",
            "  Type: AWS::CloudTrail::Trail.DataResource",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Values : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-imagebuilder.domainjoininfo":{
        "prefix":"aws-appstream-imagebuilder.domainjoininfo",
        "body":[
            "${1:myAWSAppStreamImageBuilder.DomainJoinInfo}:",
            "  Type: AWS::AppStream::ImageBuilder.DomainJoinInfo",
            "  Properties:",
            "    OrganizationalUnitDistinguishedName : ${2:String(O)}",
            "    DirectoryName : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.dynamodbv2action":{
        "prefix":"aws-iot-topicrule.dynamodbv2action",
        "body":[
            "${1:myAWSIoTTopicRule.DynamoDBv2Action}:",
            "  Type: AWS::IoT::TopicRule.DynamoDBv2Action",
            "  Properties:",
            "    PutItem : ${2:aws-iot-topicruledynamodbv2action.PutItemInput(O)}",
            "    RoleArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-usageplan.throttlesettings":{
        "prefix":"aws-apigateway-usageplan.throttlesettings",
        "body":[
            "${1:myAWSApiGatewayUsagePlan.ThrottleSettings}:",
            "  Type: AWS::ApiGateway::UsagePlan.ThrottleSettings",
            "  Properties:",
            "    BurstLimit : ${2:Integer(O)}",
            "    RateLimit : ${3:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.sqlapplicationconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.sqlapplicationconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.SqlApplicationConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.SqlApplicationConfiguration",
            "  Properties:",
            "    Inputs : [ ${2:aws-kinesisanalyticsv2-applicationsqlapplicationconfiguration.Input(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-channel.retentionperiod":{
        "prefix":"aws-iotanalytics-channel.retentionperiod",
        "body":[
            "${1:myAWSIoTAnalyticsChannel.RetentionPeriod}:",
            "  Type: AWS::IoTAnalytics::Channel.RetentionPeriod",
            "  Properties:",
            "    NumberOfDays : ${2:Integer(O)}",
            "    Unlimited : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-table.serdeinfo":{
        "prefix":"aws-glue-table.serdeinfo",
        "body":[
            "${1:myAWSGlueTable.SerdeInfo}:",
            "  Type: AWS::Glue::Table.SerdeInfo",
            "  Properties:",
            "    Parameters : ${2:Json(O)}",
            "    SerializationLibrary : ${3:String(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.inputprocessingconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.inputprocessingconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.InputProcessingConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.InputProcessingConfiguration",
            "  Properties:",
            "    InputLambdaProcessor : ${2:aws-kinesisanalyticsv2-applicationinputprocessingconfiguration.InputLambdaProcessor(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.ssmassociation":{
        "prefix":"aws-ec2-instance.ssmassociation",
        "body":[
            "${1:myAWSEC2Instance.SsmAssociation}:",
            "  Type: AWS::EC2::Instance.SsmAssociation",
            "  Properties:",
            "    AssociationParameters : [ ${2:aws-ec2-instancessmassociation.AssociationParameter(O)} ]",
            "    DocumentName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-broker.configurationid":{
        "prefix":"aws-amazonmq-broker.configurationid",
        "body":[
            "${1:myAWSAmazonMQBroker.ConfigurationId}:",
            "  Type: AWS::AmazonMQ::Broker.ConfigurationId",
            "  Properties:",
            "    Revision : ${2:Integer(R)}",
            "    Id : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-patchbaseline.patchsource":{
        "prefix":"aws-ssm-patchbaseline.patchsource",
        "body":[
            "${1:myAWSSSMPatchBaseline.PatchSource}:",
            "  Type: AWS::SSM::PatchBaseline.PatchSource",
            "  Properties:",
            "    Products : [ ${2:String(O)} ]",
            "    Configuration : ${3:String(O)}",
            "    Name : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.capacityreservationtarget":{
        "prefix":"aws-ec2-launchtemplate.capacityreservationtarget",
        "body":[
            "${1:myAWSEC2LaunchTemplate.CapacityReservationTarget}:",
            "  Type: AWS::EC2::LaunchTemplate.CapacityReservationTarget",
            "  Properties:",
            "    CapacityReservationId : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.kinesisfirehoseinput":{
        "prefix":"aws-kinesisanalytics-application.kinesisfirehoseinput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.KinesisFirehoseInput}:",
            "  Type: AWS::KinesisAnalytics::Application.KinesisFirehoseInput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.applicationconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.applicationconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.ApplicationConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.ApplicationConfiguration",
            "  Properties:",
            "    ApplicationCodeConfiguration : ${2:aws-kinesisanalyticsv2-applicationapplicationconfiguration.ApplicationCodeConfiguration(O)}",
            "    EnvironmentProperties : ${3:aws-kinesisanalyticsv2-applicationapplicationconfiguration.EnvironmentProperties(O)}",
            "    FlinkApplicationConfiguration : ${4:aws-kinesisanalyticsv2-applicationapplicationconfiguration.FlinkApplicationConfiguration(O)}",
            "    SqlApplicationConfiguration : ${5:aws-kinesisanalyticsv2-applicationapplicationconfiguration.SqlApplicationConfiguration(O)}",
            "    ApplicationSnapshotConfiguration : ${6:aws-kinesisanalyticsv2-applicationapplicationconfiguration.ApplicationSnapshotConfiguration(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworkscm-server.engineattribute":{
        "prefix":"aws-opsworkscm-server.engineattribute",
        "body":[
            "${1:myAWSOpsWorksCMServer.EngineAttribute}:",
            "  Type: AWS::OpsWorksCM::Server.EngineAttribute",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.function":{
        "prefix":"aws-greengrass-functiondefinition.function",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.Function}:",
            "  Type: AWS::Greengrass::FunctionDefinition.Function",
            "  Properties:",
            "    FunctionArn : ${2:String(R)}",
            "    FunctionConfiguration : ${3:aws-greengrass-functiondefinitionfunction.FunctionConfiguration(R)}",
            "    Id : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-partition.skewedinfo":{
        "prefix":"aws-glue-partition.skewedinfo",
        "body":[
            "${1:myAWSGluePartition.SkewedInfo}:",
            "  Type: AWS::Glue::Partition.SkewedInfo",
            "  Properties:",
            "    SkewedColumnNames : [ ${2:String(O)} ]",
            "    SkewedColumnValues : [ ${3:String(O)} ]",
            "    SkewedColumnValueLocationMaps : ${4:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configrule.source":{
        "prefix":"aws-config-configrule.source",
        "body":[
            "${1:myAWSConfigConfigRule.Source}:",
            "  Type: AWS::Config::ConfigRule.Source",
            "  Properties:",
            "    Owner : ${2:String(R)}",
            "    SourceDetails : [ ${3:aws-config-configrulesource.SourceDetail(O)} ]",
            "    SourceIdentifier : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-restapi.s3location":{
        "prefix":"aws-apigateway-restapi.s3location",
        "body":[
            "${1:myAWSApiGatewayRestApi.S3Location}:",
            "  Type: AWS::ApiGateway::RestApi.S3Location",
            "  Properties:",
            "    Bucket : ${2:String(O)}",
            "    ETag : ${3:String(O)}",
            "    Key : ${4:String(O)}",
            "    Version : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.projection":{
        "prefix":"aws-dynamodb-table.projection",
        "body":[
            "${1:myAWSDynamoDBTable.Projection}:",
            "  Type: AWS::DynamoDB::Table.Projection",
            "  Properties:",
            "    NonKeyAttributes : [ ${2:String(O)} ]",
            "    ProjectionType : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.networkinterface":{
        "prefix":"aws-ec2-launchtemplate.networkinterface",
        "body":[
            "${1:myAWSEC2LaunchTemplate.NetworkInterface}:",
            "  Type: AWS::EC2::LaunchTemplate.NetworkInterface",
            "  Properties:",
            "    Description : ${2:String(O)}",
            "    PrivateIpAddress : ${3:String(O)}",
            "    PrivateIpAddresses : [ ${4:aws-ec2-launchtemplatenetworkinterface.PrivateIpAdd(O)} ]",
            "    SecondaryPrivateIpAddressCount : ${5:Integer(O)}",
            "    Ipv6AddressCount : ${6:Integer(O)}",
            "    Groups : [ ${7:String(O)} ]",
            "    DeviceIndex : ${8:Integer(O)}",
            "    SubnetId : ${9:String(O)}",
            "    Ipv6Addresses : [ ${10:aws-ec2-launchtemplatenetworkinterface.Ipv6Add(O)} ]",
            "    AssociatePublicIpAddress : ${11:Boolean(O)}",
            "    NetworkInterfaceId : ${12:String(O)}",
            "    DeleteOnTermination : ${13:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listener.certificate":{
        "prefix":"aws-elasticloadbalancingv2-listener.certificate",
        "body":[
            "${1:myAWSElasticLoadBalancingV2Listener.Certificate}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener.Certificate",
            "  Properties:",
            "    CertificateArn : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stack.storageconnector":{
        "prefix":"aws-appstream-stack.storageconnector",
        "body":[
            "${1:myAWSAppStreamStack.StorageConnector}:",
            "  Type: AWS::AppStream::Stack.StorageConnector",
            "  Properties:",
            "    Domains : [ ${2:String(O)} ]",
            "    ResourceIdentifier : ${3:String(O)}",
            "    ConnectorType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.applicationcodeconfiguration":{
        "prefix":"aws-kinesisanalyticsv2-application.applicationcodeconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.ApplicationCodeConfiguration}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.ApplicationCodeConfiguration",
            "  Properties:",
            "    CodeContentType : ${2:String(R)}",
            "    CodeContent : ${3:aws-kinesisanalyticsv2-applicationapplicationcodeconfiguration.CodeContent(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-listenerrule.redirectconfig":{
        "prefix":"aws-elasticloadbalancingv2-listenerrule.redirectconfig",
        "body":[
            "${1:myAWSElasticLoadBalancingV2ListenerRule.RedirectConfig}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule.RedirectConfig",
            "  Properties:",
            "    Host : ${2:String(O)}",
            "    Path : ${3:String(O)}",
            "    Port : ${4:String(O)}",
            "    Protocol : ${5:String(O)}",
            "    Query : ${6:String(O)}",
            "    StatusCode : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-xssmatchset.fieldtomatch":{
        "prefix":"aws-wafregional-xssmatchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFRegionalXssMatchSet.FieldToMatch}:",
            "  Type: AWS::WAFRegional::XssMatchSet.FieldToMatch",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Data : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iotanalytics-dataset.retentionperiod":{
        "prefix":"aws-iotanalytics-dataset.retentionperiod",
        "body":[
            "${1:myAWSIoTAnalyticsDataset.RetentionPeriod}:",
            "  Type: AWS::IoTAnalytics::Dataset.RetentionPeriod",
            "  Properties:",
            "    NumberOfDays : ${2:Integer(R)}",
            "    Unlimited : ${3:Boolean(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configurationaggregator.accountaggregationsource":{
        "prefix":"aws-config-configurationaggregator.accountaggregationsource",
        "body":[
            "${1:myAWSConfigConfigurationAggregator.AccountAggregationSource}:",
            "  Type: AWS::Config::ConfigurationAggregator.AccountAggregationSource",
            "  Properties:",
            "    AllAwsRegions : ${2:Boolean(O)}",
            "    AwsRegions : [ ${3:String(O)} ]",
            "    AccountIds : [ ${4:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.httprouteaction":{
        "prefix":"aws-appmesh-route.httprouteaction",
        "body":[
            "${1:myAWSAppMeshRoute.HttpRouteAction}:",
            "  Type: AWS::AppMesh::Route.HttpRouteAction",
            "  Properties:",
            "    WeightedTargets : [ ${2:aws-appmesh-routehttprouteaction.WeightedTarget(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentconfig.minimumhealthyhosts":{
        "prefix":"aws-codedeploy-deploymentconfig.minimumhealthyhosts",
        "body":[
            "${1:myAWSCodeDeployDeploymentConfig.MinimumHealthyHosts}:",
            "  Type: AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Value : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualrouter.virtualrouterspec":{
        "prefix":"aws-appmesh-virtualrouter.virtualrouterspec",
        "body":[
            "${1:myAWSAppMeshVirtualRouter.VirtualRouterSpec}:",
            "  Type: AWS::AppMesh::VirtualRouter.VirtualRouterSpec",
            "  Properties:",
            "    Listeners : [ ${2:aws-appmesh-virtualroutervirtualrouterspec.VirtualRouterListener(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-recordsetgroup.geolocation":{
        "prefix":"aws-route53-recordsetgroup.geolocation",
        "body":[
            "${1:myAWSRoute53RecordSetGroup.GeoLocation}:",
            "  Type: AWS::Route53::RecordSetGroup.GeoLocation",
            "  Properties:",
            "    ContinentCode : ${2:String(O)}",
            "    CountryCode : ${3:String(O)}",
            "    SubdivisionCode : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-restapi.endpointconfiguration":{
        "prefix":"aws-apigateway-restapi.endpointconfiguration",
        "body":[
            "${1:myAWSApiGatewayRestApi.EndpointConfiguration}:",
            "  Type: AWS::ApiGateway::RestApi.EndpointConfiguration",
            "  Properties:",
            "    Types : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.scalingconstraints":{
        "prefix":"aws-emr-instancegroupconfig.scalingconstraints",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.ScalingConstraints}:",
            "  Type: AWS::EMR::InstanceGroupConfig.ScalingConstraints",
            "  Properties:",
            "    MaxCapacity : ${2:Integer(R)}",
            "    MinCapacity : ${3:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-layer.recipes":{
        "prefix":"aws-opsworks-layer.recipes",
        "body":[
            "${1:myAWSOpsWorksLayer.Recipes}:",
            "  Type: AWS::OpsWorks::Layer.Recipes",
            "  Properties:",
            "    Configure : [ ${2:String(O)} ]",
            "    Deploy : [ ${3:String(O)} ]",
            "    Setup : [ ${4:String(O)} ]",
            "    Shutdown : [ ${5:String(O)} ]",
            "    Undeploy : [ ${6:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-crawler.s3target":{
        "prefix":"aws-glue-crawler.s3target",
        "body":[
            "${1:myAWSGlueCrawler.S3Target}:",
            "  Type: AWS::Glue::Crawler.S3Target",
            "  Properties:",
            "    Path : ${2:String(O)}",
            "    Exclusions : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.resourcedatacontainer":{
        "prefix":"aws-greengrass-resourcedefinitionversion.resourcedatacontainer",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.ResourceDataContainer}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer",
            "  Properties:",
            "    SecretsManagerSecretResourceData : ${2:aws-greengrass-resourcedefinitionversionresourcedatacontainer.SecretsManagerSecretResourceData(O)}",
            "    SageMakerMachineLearningModelResourceData : ${3:aws-greengrass-resourcedefinitionversionresourcedatacontainer.SageMakerMachineLearningModelResourceData(O)}",
            "    LocalVolumeResourceData : ${4:aws-greengrass-resourcedefinitionversionresourcedatacontainer.LocalVolumeResourceData(O)}",
            "    LocalDeviceResourceData : ${5:aws-greengrass-resourcedefinitionversionresourcedatacontainer.LocalDeviceResourceData(O)}",
            "    S3MachineLearningModelResourceData : ${6:aws-greengrass-resourcedefinitionversionresourcedatacontainer.S3MachineLearningModelResourceData(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-fleet.vpcconfig":{
        "prefix":"aws-appstream-fleet.vpcconfig",
        "body":[
            "${1:myAWSAppStreamFleet.VpcConfig}:",
            "  Type: AWS::AppStream::Fleet.VpcConfig",
            "  Properties:",
            "    SubnetIds : [ ${2:String(O)} ]",
            "    SecurityGroupIds : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinition.resourceaccesspolicy":{
        "prefix":"aws-greengrass-functiondefinition.resourceaccesspolicy",
        "body":[
            "${1:myAWSGreengrassFunctionDefinition.ResourceAccessPolicy}:",
            "  Type: AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy",
            "  Properties:",
            "    ResourceId : ${2:String(R)}",
            "    Permission : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-alarm.dimension":{
        "prefix":"aws-cloudwatch-alarm.dimension",
        "body":[
            "${1:myAWSCloudWatchAlarm.Dimension}:",
            "  Type: AWS::CloudWatch::Alarm.Dimension",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancegroupconfig.cloudwatchalarmdefinition":{
        "prefix":"aws-emr-instancegroupconfig.cloudwatchalarmdefinition",
        "body":[
            "${1:myAWSEMRInstanceGroupConfig.CloudWatchAlarmDefinition}:",
            "  Type: AWS::EMR::InstanceGroupConfig.CloudWatchAlarmDefinition",
            "  Properties:",
            "    ComparisonOperator : ${2:String(R)}",
            "    Dimensions : [ ${3:aws-emr-instancegroupconfigcloudwatchalarmdefinition.MetricDimension(O)} ]",
            "    EvaluationPeriods : ${4:Integer(O)}",
            "    MetricName : ${5:String(R)}",
            "    Namespace : ${6:String(O)}",
            "    Period : ${7:Integer(R)}",
            "    Statistic : ${8:String(O)}",
            "    Threshold : ${9:Double(R)}",
            "    Unit : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.transition":{
        "prefix":"aws-s3-bucket.transition",
        "body":[
            "${1:myAWSS3Bucket.Transition}:",
            "  Type: AWS::S3::Bucket.Transition",
            "  Properties:",
            "    StorageClass : ${2:String(R)}",
            "    TransitionDate : ${3:Timestamp(O)}",
            "    TransitionInDays : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.instanceipv6address":{
        "prefix":"aws-ec2-spotfleet.instanceipv6address",
        "body":[
            "${1:myAWSEC2SpotFleet.InstanceIpv6Address}:",
            "  Type: AWS::EC2::SpotFleet.InstanceIpv6Address",
            "  Properties:",
            "    Ipv6Address : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.ebsconfiguration":{
        "prefix":"aws-emr-cluster.ebsconfiguration",
        "body":[
            "${1:myAWSEMRCluster.EbsConfiguration}:",
            "  Type: AWS::EMR::Cluster.EbsConfiguration",
            "  Properties:",
            "    EbsBlockDeviceConfigs : [ ${2:aws-emr-clusterebsconfiguration.EbsBlockDeviceConfig(O)} ]",
            "    EbsOptimized : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.groupownersetting":{
        "prefix":"aws-greengrass-resourcedefinitionversion.groupownersetting",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.GroupOwnerSetting}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting",
            "  Properties:",
            "    AutoAddGroupOwner : ${2:Boolean(R)}",
            "    GroupOwner : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.dataexport":{
        "prefix":"aws-s3-bucket.dataexport",
        "body":[
            "${1:myAWSS3Bucket.DataExport}:",
            "  Type: AWS::S3::Bucket.DataExport",
            "  Properties:",
            "    Destination : ${2:aws-s3-bucketdataexport.Destination(R)}",
            "    OutputSchemaVersion : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.customerrorresponse":{
        "prefix":"aws-cloudfront-distribution.customerrorresponse",
        "body":[
            "${1:myAWSCloudFrontDistribution.CustomErrorResponse}:",
            "  Type: AWS::CloudFront::Distribution.CustomErrorResponse",
            "  Properties:",
            "    ResponseCode : ${2:Integer(O)}",
            "    ErrorCachingMinTTL : ${3:Double(O)}",
            "    ErrorCode : ${4:Integer(R)}",
            "    ResponsePagePath : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.lambdaaction":{
        "prefix":"aws-ses-receiptrule.lambdaaction",
        "body":[
            "${1:myAWSSESReceiptRule.LambdaAction}:",
            "  Type: AWS::SES::ReceiptRule.LambdaAction",
            "  Properties:",
            "    FunctionArn : ${2:String(R)}",
            "    TopicArn : ${3:String(O)}",
            "    InvocationType : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.healthcheck":{
        "prefix":"aws-ecs-taskdefinition.healthcheck",
        "body":[
            "${1:myAWSECSTaskDefinition.HealthCheck}:",
            "  Type: AWS::ECS::TaskDefinition.HealthCheck",
            "  Properties:",
            "    Command : [ ${2:String(R)} ]",
            "    Interval : ${3:Integer(O)}",
            "    Retries : ${4:Integer(O)}",
            "    StartPeriod : ${5:Integer(O)}",
            "    Timeout : ${6:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.instancesdistribution":{
        "prefix":"aws-autoscaling-autoscalinggroup.instancesdistribution",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.InstancesDistribution}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.InstancesDistribution",
            "  Properties:",
            "    OnDemandAllocationStrategy : ${2:String(O)}",
            "    OnDemandBaseCapacity : ${3:Integer(O)}",
            "    OnDemandPercentageAboveBaseCapacity : ${4:Integer(O)}",
            "    SpotAllocationStrategy : ${5:String(O)}",
            "    SpotInstancePools : ${6:Integer(O)}",
            "    SpotMaxPrice : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.targetgroupsconfig":{
        "prefix":"aws-ec2-spotfleet.targetgroupsconfig",
        "body":[
            "${1:myAWSEC2SpotFleet.TargetGroupsConfig}:",
            "  Type: AWS::EC2::SpotFleet.TargetGroupsConfig",
            "  Properties:",
            "    TargetGroups : [ ${2:aws-ec2-spotfleettargetgroupsconfig.TargetGroup(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancingv2-loadbalancer.subnetmapping":{
        "prefix":"aws-elasticloadbalancingv2-loadbalancer.subnetmapping",
        "body":[
            "${1:myAWSElasticLoadBalancingV2LoadBalancer.SubnetMapping}:",
            "  Type: AWS::ElasticLoadBalancingV2::LoadBalancer.SubnetMapping",
            "  Properties:",
            "    AllocationId : ${2:String(R)}",
            "    SubnetId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-notebookinstancelifecycleconfig.notebookinstancelifecyclehook":{
        "prefix":"aws-sagemaker-notebookinstancelifecycleconfig.notebookinstancelifecyclehook",
        "body":[
            "${1:myAWSSageMakerNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook}:",
            "  Type: AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook",
            "  Properties:",
            "    Content : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-stage.accesslogsettings":{
        "prefix":"aws-apigatewayv2-stage.accesslogsettings",
        "body":[
            "${1:myAWSApiGatewayV2Stage.AccessLogSettings}:",
            "  Type: AWS::ApiGatewayV2::Stage.AccessLogSettings",
            "  Properties:",
            "    Format : ${2:String(O)}",
            "    DestinationArn : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.inputparallelism":{
        "prefix":"aws-kinesisanalytics-application.inputparallelism",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.InputParallelism}:",
            "  Type: AWS::KinesisAnalytics::Application.InputParallelism",
            "  Properties:",
            "    Count : ${2:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.accesslog":{
        "prefix":"aws-appmesh-virtualnode.accesslog",
        "body":[
            "${1:myAWSAppMeshVirtualNode.AccessLog}:",
            "  Type: AWS::AppMesh::VirtualNode.AccessLog",
            "  Properties:",
            "    File : ${2:aws-appmesh-virtualnodeaccesslog.FileAccessLog(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.portmapping":{
        "prefix":"aws-ecs-taskdefinition.portmapping",
        "body":[
            "${1:myAWSECSTaskDefinition.PortMapping}:",
            "  Type: AWS::ECS::TaskDefinition.PortMapping",
            "  Properties:",
            "    ContainerPort : ${2:Integer(O)}",
            "    HostPort : ${3:Integer(O)}",
            "    Protocol : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.cpuoptions":{
        "prefix":"aws-ec2-launchtemplate.cpuoptions",
        "body":[
            "${1:myAWSEC2LaunchTemplate.CpuOptions}:",
            "  Type: AWS::EC2::LaunchTemplate.CpuOptions",
            "  Properties:",
            "    ThreadsPerCore : ${2:Integer(O)}",
            "    CoreCount : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.elasticinferenceaccelerator":{
        "prefix":"aws-ec2-instance.elasticinferenceaccelerator",
        "body":[
            "${1:myAWSEC2Instance.ElasticInferenceAccelerator}:",
            "  Type: AWS::EC2::Instance.ElasticInferenceAccelerator",
            "  Properties:",
            "    Type : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sizeconstraintset.fieldtomatch":{
        "prefix":"aws-wafregional-sizeconstraintset.fieldtomatch",
        "body":[
            "${1:myAWSWAFRegionalSizeConstraintSet.FieldToMatch}:",
            "  Type: AWS::WAFRegional::SizeConstraintSet.FieldToMatch",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Data : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.virtualnodespec":{
        "prefix":"aws-appmesh-virtualnode.virtualnodespec",
        "body":[
            "${1:myAWSAppMeshVirtualNode.VirtualNodeSpec}:",
            "  Type: AWS::AppMesh::VirtualNode.VirtualNodeSpec",
            "  Properties:",
            "    Logging : ${2:aws-appmesh-virtualnodevirtualnodespec.Logging(O)}",
            "    Backends : [ ${3:aws-appmesh-virtualnodevirtualnodespec.Backend(O)} ]",
            "    Listeners : [ ${4:aws-appmesh-virtualnodevirtualnodespec.Listener(O)} ]",
            "    ServiceDiscovery : ${5:aws-appmesh-virtualnodevirtualnodespec.ServiceDiscovery(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.cloudwatchalarmaction":{
        "prefix":"aws-iot-topicrule.cloudwatchalarmaction",
        "body":[
            "${1:myAWSIoTTopicRule.CloudwatchAlarmAction}:",
            "  Type: AWS::IoT::TopicRule.CloudwatchAlarmAction",
            "  Properties:",
            "    AlarmName : ${2:String(R)}",
            "    RoleArn : ${3:String(R)}",
            "    StateReason : ${4:String(R)}",
            "    StateValue : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.ulimit":{
        "prefix":"aws-ecs-taskdefinition.ulimit",
        "body":[
            "${1:myAWSECSTaskDefinition.Ulimit}:",
            "  Type: AWS::ECS::TaskDefinition.Ulimit",
            "  Properties:",
            "    HardLimit : ${2:Integer(R)}",
            "    Name : ${3:String(R)}",
            "    SoftLimit : ${4:Integer(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.inputprocessingconfiguration":{
        "prefix":"aws-kinesisanalytics-application.inputprocessingconfiguration",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.InputProcessingConfiguration}:",
            "  Type: AWS::KinesisAnalytics::Application.InputProcessingConfiguration",
            "  Properties:",
            "    InputLambdaProcessor : ${2:aws-kinesisanalytics-applicationinputprocessingconfiguration.InputLambdaProcessor(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-function.environment":{
        "prefix":"aws-lambda-function.environment",
        "body":[
            "${1:myAWSLambdaFunction.Environment}:",
            "  Type: AWS::Lambda::Function.Environment",
            "  Properties:",
            "    Variables : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.groupidentifier":{
        "prefix":"aws-ec2-spotfleet.groupidentifier",
        "body":[
            "${1:myAWSEC2SpotFleet.GroupIdentifier}:",
            "  Type: AWS::EC2::SpotFleet.GroupIdentifier",
            "  Properties:",
            "    GroupId : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.scalingrule":{
        "prefix":"aws-emr-cluster.scalingrule",
        "body":[
            "${1:myAWSEMRCluster.ScalingRule}:",
            "  Type: AWS::EMR::Cluster.ScalingRule",
            "  Properties:",
            "    Action : ${2:aws-emr-clusterscalingrule.ScalingAction(R)}",
            "    Description : ${3:String(O)}",
            "    Name : ${4:String(R)}",
            "    Trigger : ${5:aws-emr-clusterscalingrule.ScalingTrigger(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-streamingdistribution.logging":{
        "prefix":"aws-cloudfront-streamingdistribution.logging",
        "body":[
            "${1:myAWSCloudFrontStreamingDistribution.Logging}:",
            "  Type: AWS::CloudFront::StreamingDistribution.Logging",
            "  Properties:",
            "    Bucket : ${2:String(R)}",
            "    Enabled : ${3:Boolean(R)}",
            "    Prefix : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-classifier.jsonclassifier":{
        "prefix":"aws-glue-classifier.jsonclassifier",
        "body":[
            "${1:myAWSGlueClassifier.JsonClassifier}:",
            "  Type: AWS::Glue::Classifier.JsonClassifier",
            "  Properties:",
            "    JsonPath : ${2:String(R)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-configurationseteventdestination.kinesisfirehosedestination":{
        "prefix":"aws-ses-configurationseteventdestination.kinesisfirehosedestination",
        "body":[
            "${1:myAWSSESConfigurationSetEventDestination.KinesisFirehoseDestination}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination.KinesisFirehoseDestination",
            "  Properties:",
            "    IAMRoleARN : ${2:String(R)}",
            "    DeliveryStreamARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.listener":{
        "prefix":"aws-appmesh-virtualnode.listener",
        "body":[
            "${1:myAWSAppMeshVirtualNode.Listener}:",
            "  Type: AWS::AppMesh::VirtualNode.Listener",
            "  Properties:",
            "    HealthCheck : ${2:aws-appmesh-virtualnodelistener.HealthCheck(O)}",
            "    PortMapping : ${3:aws-appmesh-virtualnodelistener.PortMapping(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.copycommand":{
        "prefix":"aws-kinesisfirehose-deliverystream.copycommand",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.CopyCommand}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.CopyCommand",
            "  Properties:",
            "    CopyOptions : ${2:String(O)}",
            "    DataTableColumns : ${3:String(O)}",
            "    DataTableName : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.parametervalue":{
        "prefix":"aws-datapipeline-pipeline.parametervalue",
        "body":[
            "${1:myAWSDataPipelinePipeline.ParameterValue}:",
            "  Type: AWS::DataPipeline::Pipeline.ParameterValue",
            "  Properties:",
            "    Id : ${2:String(R)}",
            "    StringValue : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.projecttriggers":{
        "prefix":"aws-codebuild-project.projecttriggers",
        "body":[
            "${1:myAWSCodeBuildProject.ProjectTriggers}:",
            "  Type: AWS::CodeBuild::Project.ProjectTriggers",
            "  Properties:",
            "    FilterGroups : [ ${2:aws-codebuild-projectprojecttriggers.FilterGroup(O)} ]",
            "    Webhook : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-distribution.logging":{
        "prefix":"aws-cloudfront-distribution.logging",
        "body":[
            "${1:myAWSCloudFrontDistribution.Logging}:",
            "  Type: AWS::CloudFront::Distribution.Logging",
            "  Properties:",
            "    IncludeCookies : ${2:Boolean(O)}",
            "    Bucket : ${3:String(R)}",
            "    Prefix : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualservice.virtualserviceprovider":{
        "prefix":"aws-appmesh-virtualservice.virtualserviceprovider",
        "body":[
            "${1:myAWSAppMeshVirtualService.VirtualServiceProvider}:",
            "  Type: AWS::AppMesh::VirtualService.VirtualServiceProvider",
            "  Properties:",
            "    VirtualNode : ${2:aws-appmesh-virtualservicevirtualserviceprovider.VirtualNodeServiceProvider(O)}",
            "    VirtualRouter : ${3:aws-appmesh-virtualservicevirtualserviceprovider.VirtualRouterServiceProvider(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-identitypoolroleattachment.rulesconfigurationtype":{
        "prefix":"aws-cognito-identitypoolroleattachment.rulesconfigurationtype",
        "body":[
            "${1:myAWSCognitoIdentityPoolRoleAttachment.RulesConfigurationType}:",
            "  Type: AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType",
            "  Properties:",
            "    Rules : [ ${2:aws-cognito-identitypoolroleattachmentrulesconfigurationtype.MappingRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-glue-job.executionproperty":{
        "prefix":"aws-glue-job.executionproperty",
        "body":[
            "${1:myAWSGlueJob.ExecutionProperty}:",
            "  Type: AWS::Glue::Job.ExecutionProperty",
            "  Properties:",
            "    MaxConcurrentRuns : ${2:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.linuxparameters":{
        "prefix":"aws-ecs-taskdefinition.linuxparameters",
        "body":[
            "${1:myAWSECSTaskDefinition.LinuxParameters}:",
            "  Type: AWS::ECS::TaskDefinition.LinuxParameters",
            "  Properties:",
            "    Capabilities : ${2:aws-ecs-taskdefinitionlinuxparameters.KernelCapabilities(O)}",
            "    Devices : [ ${3:aws-ecs-taskdefinitionlinuxparameters.Device(O)} ]",
            "    InitProcessEnabled : ${4:Boolean(O)}",
            "    SharedMemorySize : ${5:Integer(O)}",
            "    Tmpfs : [ ${6:aws-ecs-taskdefinitionlinuxparameters.Tmpfs(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appstream-stack.usersetting":{
        "prefix":"aws-appstream-stack.usersetting",
        "body":[
            "${1:myAWSAppStreamStack.UserSetting}:",
            "  Type: AWS::AppStream::Stack.UserSetting",
            "  Properties:",
            "    Action : ${2:String(R)}",
            "    Permission : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-amazonmq-configurationassociation.configurationid":{
        "prefix":"aws-amazonmq-configurationassociation.configurationid",
        "body":[
            "${1:myAWSAmazonMQConfigurationAssociation.ConfigurationId}:",
            "  Type: AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId",
            "  Properties:",
            "    Revision : ${2:Integer(R)}",
            "    Id : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-servicediscovery-service.healthcheckconfig":{
        "prefix":"aws-servicediscovery-service.healthcheckconfig",
        "body":[
            "${1:myAWSServiceDiscoveryService.HealthCheckConfig}:",
            "  Type: AWS::ServiceDiscovery::Service.HealthCheckConfig",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    ResourcePath : ${3:String(O)}",
            "    FailureThreshold : ${4:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.deviceconfiguration":{
        "prefix":"aws-cognito-userpool.deviceconfiguration",
        "body":[
            "${1:myAWSCognitoUserPool.DeviceConfiguration}:",
            "  Type: AWS::Cognito::UserPool.DeviceConfiguration",
            "  Properties:",
            "    DeviceOnlyRememberedOnUserPrompt : ${2:Boolean(O)}",
            "    ChallengeRequiredOnNewDevice : ${3:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-virtualnode.dnsservicediscovery":{
        "prefix":"aws-appmesh-virtualnode.dnsservicediscovery",
        "body":[
            "${1:myAWSAppMeshVirtualNode.DnsServiceDiscovery}:",
            "  Type: AWS::AppMesh::VirtualNode.DnsServiceDiscovery",
            "  Properties:",
            "    Hostname : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesis-stream.streamencryption":{
        "prefix":"aws-kinesis-stream.streamencryption",
        "body":[
            "${1:myAWSKinesisStream.StreamEncryption}:",
            "  Type: AWS::Kinesis::Stream.StreamEncryption",
            "  Properties:",
            "    EncryptionType : ${2:String(R)}",
            "    KeyId : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalingpolicy.targettrackingscalingpolicyconfiguration":{
        "prefix":"aws-applicationautoscaling-scalingpolicy.targettrackingscalingpolicyconfiguration",
        "body":[
            "${1:myAWSApplicationAutoScalingScalingPolicy.TargetTrackingScalingPolicyConfiguration}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy.TargetTrackingScalingPolicyConfiguration",
            "  Properties:",
            "    CustomizedMetricSpecification : ${2:aws-applicationautoscaling-scalingpolicytargettrackingscalingpolicyconfiguration.CustomizedMetricSpecification(O)}",
            "    DisableScaleIn : ${3:Boolean(O)}",
            "    PredefinedMetricSpecification : ${4:aws-applicationautoscaling-scalingpolicytargettrackingscalingpolicyconfiguration.PredefinedMetricSpecification(O)}",
            "    ScaleInCooldown : ${5:Integer(O)}",
            "    ScaleOutCooldown : ${6:Integer(O)}",
            "    TargetValue : ${7:Double(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.s3destinationconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.s3destinationconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.S3DestinationConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration",
            "  Properties:",
            "    BucketARN : ${2:String(R)}",
            "    BufferingHints : ${3:aws-kinesisfirehose-deliverystreams3destinationconfiguration.BufferingHints(R)}",
            "    CloudWatchLoggingOptions : ${4:aws-kinesisfirehose-deliverystreams3destinationconfiguration.CloudWatchLoggingOptions(O)}",
            "    CompressionFormat : ${5:String(R)}",
            "    EncryptionConfiguration : ${6:aws-kinesisfirehose-deliverystreams3destinationconfiguration.EncryptionConfiguration(O)}",
            "    Prefix : ${7:String(O)}",
            "    RoleARN : ${8:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudfront-streamingdistribution.streamingdistributionconfig":{
        "prefix":"aws-cloudfront-streamingdistribution.streamingdistributionconfig",
        "body":[
            "${1:myAWSCloudFrontStreamingDistribution.StreamingDistributionConfig}:",
            "  Type: AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig",
            "  Properties:",
            "    Logging : ${2:aws-cloudfront-streamingdistributionstreamingdistributionconfig.Logging(O)}",
            "    Comment : ${3:String(R)}",
            "    PriceClass : ${4:String(O)}",
            "    S3Origin : ${5:aws-cloudfront-streamingdistributionstreamingdistributionconfig.S3Origin(R)}",
            "    Enabled : ${6:Boolean(R)}",
            "    Aliases : [ ${7:String(O)} ]",
            "    TrustedSigners : ${8:aws-cloudfront-streamingdistributionstreamingdistributionconfig.TrustedSigners(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.instancetypeconfig":{
        "prefix":"aws-emr-cluster.instancetypeconfig",
        "body":[
            "${1:myAWSEMRCluster.InstanceTypeConfig}:",
            "  Type: AWS::EMR::Cluster.InstanceTypeConfig",
            "  Properties:",
            "    BidPrice : ${2:String(O)}",
            "    BidPriceAsPercentageOfOnDemandPrice : ${3:Double(O)}",
            "    Configurations : [ ${4:aws-emr-clusterinstancetypeconfig.Configuration(O)} ]",
            "    EbsConfiguration : ${5:aws-emr-clusterinstancetypeconfig.EbsConfiguration(O)}",
            "    InstanceType : ${6:String(R)}",
            "    WeightedCapacity : ${7:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-secretsmanager-secret.generatesecretstring":{
        "prefix":"aws-secretsmanager-secret.generatesecretstring",
        "body":[
            "${1:myAWSSecretsManagerSecret.GenerateSecretString}:",
            "  Type: AWS::SecretsManager::Secret.GenerateSecretString",
            "  Properties:",
            "    ExcludeUppercase : ${2:Boolean(O)}",
            "    RequireEachIncludedType : ${3:Boolean(O)}",
            "    IncludeSpace : ${4:Boolean(O)}",
            "    ExcludeCharacters : ${5:String(O)}",
            "    GenerateStringKey : ${6:String(O)}",
            "    PasswordLength : ${7:Integer(O)}",
            "    ExcludePunctuation : ${8:Boolean(O)}",
            "    ExcludeLowercase : ${9:Boolean(O)}",
            "    SecretStringTemplate : ${10:String(O)}",
            "    ExcludeNumbers : ${11:Boolean(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-sagemaker-model.containerdefinition":{
        "prefix":"aws-sagemaker-model.containerdefinition",
        "body":[
            "${1:myAWSSageMakerModel.ContainerDefinition}:",
            "  Type: AWS::SageMaker::Model.ContainerDefinition",
            "  Properties:",
            "    ContainerHostname : ${2:String(O)}",
            "    Environment : ${3:Json(O)}",
            "    ModelDataUrl : ${4:String(O)}",
            "    Image : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.launchtemplate":{
        "prefix":"aws-autoscaling-autoscalinggroup.launchtemplate",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.LaunchTemplate}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.LaunchTemplate",
            "  Properties:",
            "    LaunchTemplateSpecification : ${2:aws-autoscaling-autoscalinggrouplaunchtemplate.LaunchTemplateSpecification(R)}",
            "    Overrides : [ ${3:aws-autoscaling-autoscalinggrouplaunchtemplate.LaunchTemplateOverrides(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-healthcheck.healthchecktag":{
        "prefix":"aws-route53-healthcheck.healthchecktag",
        "body":[
            "${1:myAWSRoute53HealthCheck.HealthCheckTag}:",
            "  Type: AWS::Route53::HealthCheck.HealthCheckTag",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ssm-maintenancewindowtask.maintenancewindowstepfunctionsparameters":{
        "prefix":"aws-ssm-maintenancewindowtask.maintenancewindowstepfunctionsparameters",
        "body":[
            "${1:myAWSSSMMaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters}:",
            "  Type: AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters",
            "  Properties:",
            "    Input : ${2:String(O)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.environmentvariable":{
        "prefix":"aws-codebuild-project.environmentvariable",
        "body":[
            "${1:myAWSCodeBuildProject.EnvironmentVariable}:",
            "  Type: AWS::CodeBuild::Project.EnvironmentVariable",
            "  Properties:",
            "    Type : ${2:String(O)}",
            "    Value : ${3:String(R)}",
            "    Name : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot1click-project.placementtemplate":{
        "prefix":"aws-iot1click-project.placementtemplate",
        "body":[
            "${1:myAWSIoT1ClickProject.PlacementTemplate}:",
            "  Type: AWS::IoT1Click::Project.PlacementTemplate",
            "  Properties:",
            "    DeviceTemplates : ${2:Json(O)}",
            "    DefaultAttributes : ${3:Json(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cognito-userpool.invitemessagetemplate":{
        "prefix":"aws-cognito-userpool.invitemessagetemplate",
        "body":[
            "${1:myAWSCognitoUserPool.InviteMessageTemplate}:",
            "  Type: AWS::Cognito::UserPool.InviteMessageTemplate",
            "  Properties:",
            "    EmailMessage : ${2:String(O)}",
            "    SMSMessage : ${3:String(O)}",
            "    EmailSubject : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.metricdimension":{
        "prefix":"aws-emr-cluster.metricdimension",
        "body":[
            "${1:myAWSEMRCluster.MetricDimension}:",
            "  Type: AWS::EMR::Cluster.MetricDimension",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticbeanstalk-application.maxcountrule":{
        "prefix":"aws-elasticbeanstalk-application.maxcountrule",
        "body":[
            "${1:myAWSElasticBeanstalkApplication.MaxCountRule}:",
            "  Type: AWS::ElasticBeanstalk::Application.MaxCountRule",
            "  Properties:",
            "    DeleteSourceFromS3 : ${2:Boolean(O)}",
            "    Enabled : ${3:Boolean(O)}",
            "    MaxCount : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-connectordefinition.connector":{
        "prefix":"aws-greengrass-connectordefinition.connector",
        "body":[
            "${1:myAWSGreengrassConnectorDefinition.Connector}:",
            "  Type: AWS::Greengrass::ConnectorDefinition.Connector",
            "  Properties:",
            "    ConnectorArn : ${2:String(R)}",
            "    Parameters : ${3:Json(O)}",
            "    Id : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscaling-autoscalinggroup.tagproperty":{
        "prefix":"aws-autoscaling-autoscalinggroup.tagproperty",
        "body":[
            "${1:myAWSAutoScalingAutoScalingGroup.TagProperty}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup.TagProperty",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    PropagateAtLaunch : ${3:Boolean(R)}",
            "    Value : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.referenceschema":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.referenceschema",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.ReferenceSchema}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceSchema",
            "  Properties:",
            "    RecordEncoding : ${2:String(O)}",
            "    RecordColumns : [ ${3:aws-kinesisanalytics-applicationreferencedatasourcereferenceschema.RecordColumn(R)} ]",
            "    RecordFormat : ${4:aws-kinesisanalytics-applicationreferencedatasourcereferenceschema.RecordFormat(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-s3-bucket.filterrule":{
        "prefix":"aws-s3-bucket.filterrule",
        "body":[
            "${1:myAWSS3Bucket.FilterRule}:",
            "  Type: AWS::S3::Bucket.FilterRule",
            "  Properties:",
            "    Name : ${2:String(R)}",
            "    Value : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-pipeline.actiontypeid":{
        "prefix":"aws-codepipeline-pipeline.actiontypeid",
        "body":[
            "${1:myAWSCodePipelinePipeline.ActionTypeId}:",
            "  Type: AWS::CodePipeline::Pipeline.ActionTypeId",
            "  Properties:",
            "    Category : ${2:String(R)}",
            "    Owner : ${3:String(R)}",
            "    Provider : ${4:String(R)}",
            "    Version : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-route53-hostedzone.vpc":{
        "prefix":"aws-route53-hostedzone.vpc",
        "body":[
            "${1:myAWSRoute53HostedZone.VPC}:",
            "  Type: AWS::Route53::HostedZone.VPC",
            "  Properties:",
            "    VPCId : ${2:String(R)}",
            "    VPCRegion : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-functiondefinitionversion.resourceaccesspolicy":{
        "prefix":"aws-greengrass-functiondefinitionversion.resourceaccesspolicy",
        "body":[
            "${1:myAWSGreengrassFunctionDefinitionVersion.ResourceAccessPolicy}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy",
            "  Properties:",
            "    ResourceId : ${2:String(R)}",
            "    Permission : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "tag":{
        "prefix":"tag",
        "body":[
            "${1:myTag}:",
            "  Type: Tag",
            "  Properties:",
            "    Value : ${2:String(R)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-resourcedefinitionversion.secretsmanagersecretresourcedata":{
        "prefix":"aws-greengrass-resourcedefinitionversion.secretsmanagersecretresourcedata",
        "body":[
            "${1:myAWSGreengrassResourceDefinitionVersion.SecretsManagerSecretResourceData}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData",
            "  Properties:",
            "    ARN : ${2:String(R)}",
            "    AdditionalStagingLabelsToDownload : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-thing.attributepayload":{
        "prefix":"aws-iot-thing.attributepayload",
        "body":[
            "${1:myAWSIoTThing.AttributePayload}:",
            "  Type: AWS::IoT::Thing.AttributePayload",
            "  Properties:",
            "    Attributes : [ ${2:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.timeperiod":{
        "prefix":"aws-budgets-budget.timeperiod",
        "body":[
            "${1:myAWSBudgetsBudget.TimePeriod}:",
            "  Type: AWS::Budgets::Budget.TimePeriod",
            "  Properties:",
            "    Start : ${2:String(O)}",
            "    End : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-events-rule.ecsparameters":{
        "prefix":"aws-events-rule.ecsparameters",
        "body":[
            "${1:myAWSEventsRule.EcsParameters}:",
            "  Type: AWS::Events::Rule.EcsParameters",
            "  Properties:",
            "    TaskCount : ${2:Integer(O)}",
            "    TaskDefinitionArn : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigateway-usageplan.quotasettings":{
        "prefix":"aws-apigateway-usageplan.quotasettings",
        "body":[
            "${1:myAWSApiGatewayUsagePlan.QuotaSettings}:",
            "  Type: AWS::ApiGateway::UsagePlan.QuotaSettings",
            "  Properties:",
            "    Limit : ${2:Integer(O)}",
            "    Offset : ${3:Integer(O)}",
            "    Period : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-loggerdefinition.loggerdefinitionversion":{
        "prefix":"aws-greengrass-loggerdefinition.loggerdefinitionversion",
        "body":[
            "${1:myAWSGreengrassLoggerDefinition.LoggerDefinitionVersion}:",
            "  Type: AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion",
            "  Properties:",
            "    Loggers : [ ${2:aws-greengrass-loggerdefinitionloggerdefinitionversion.Logger(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.blockdevicemapping":{
        "prefix":"aws-ec2-instance.blockdevicemapping",
        "body":[
            "${1:myAWSEC2Instance.BlockDeviceMapping}:",
            "  Type: AWS::EC2::Instance.BlockDeviceMapping",
            "  Properties:",
            "    DeviceName : ${2:String(R)}",
            "    Ebs : ${3:aws-ec2-instanceblockdevicemapping.Ebs(O)}",
            "    NoDevice : ${4:aws-ec2-instanceblockdevicemapping.NoDevice(O)}",
            "    VirtualName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-datapipeline-pipeline.field":{
        "prefix":"aws-datapipeline-pipeline.field",
        "body":[
            "${1:myAWSDataPipelinePipeline.Field}:",
            "  Type: AWS::DataPipeline::Pipeline.Field",
            "  Properties:",
            "    Key : ${2:String(R)}",
            "    RefValue : ${3:String(O)}",
            "    StringValue : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.httproute":{
        "prefix":"aws-appmesh-route.httproute",
        "body":[
            "${1:myAWSAppMeshRoute.HttpRoute}:",
            "  Type: AWS::AppMesh::Route.HttpRoute",
            "  Properties:",
            "    Action : ${2:aws-appmesh-routehttproute.HttpRouteAction(R)}",
            "    Match : ${3:aws-appmesh-routehttproute.HttpRouteMatch(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationreferencedatasource.referencedatasource":{
        "prefix":"aws-kinesisanalytics-applicationreferencedatasource.referencedatasource",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationReferenceDataSource.ReferenceDataSource}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceDataSource",
            "  Properties:",
            "    ReferenceSchema : ${2:aws-kinesisanalytics-applicationreferencedatasourcereferencedatasource.ReferenceSchema(R)}",
            "    TableName : ${3:String(O)}",
            "    S3ReferenceDataSource : ${4:aws-kinesisanalytics-applicationreferencedatasourcereferencedatasource.S3ReferenceDataSource(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-eks-cluster.resourcesvpcconfig":{
        "prefix":"aws-eks-cluster.resourcesvpcconfig",
        "body":[
            "${1:myAWSEKSCluster.ResourcesVpcConfig}:",
            "  Type: AWS::EKS::Cluster.ResourcesVpcConfig",
            "  Properties:",
            "    SecurityGroupIds : [ ${2:String(O)} ]",
            "    SubnetIds : [ ${3:String(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-application.environmentproperties":{
        "prefix":"aws-kinesisanalyticsv2-application.environmentproperties",
        "body":[
            "${1:myAWSKinesisAnalyticsV2Application.EnvironmentProperties}:",
            "  Type: AWS::KinesisAnalyticsV2::Application.EnvironmentProperties",
            "  Properties:",
            "    PropertyGroups : [ ${2:aws-kinesisanalyticsv2-applicationenvironmentproperties.PropertyGroup(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iot-topicrule.cloudwatchmetricaction":{
        "prefix":"aws-iot-topicrule.cloudwatchmetricaction",
        "body":[
            "${1:myAWSIoTTopicRule.CloudwatchMetricAction}:",
            "  Type: AWS::IoT::TopicRule.CloudwatchMetricAction",
            "  Properties:",
            "    MetricName : ${2:String(R)}",
            "    MetricNamespace : ${3:String(R)}",
            "    MetricTimestamp : ${4:String(O)}",
            "    MetricUnit : ${5:String(R)}",
            "    MetricValue : ${6:String(R)}",
            "    RoleArn : ${7:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.referenceschema":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.referenceschema",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.ReferenceSchema}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceSchema",
            "  Properties:",
            "    RecordEncoding : ${2:String(O)}",
            "    RecordColumns : [ ${3:aws-kinesisanalyticsv2-applicationreferencedatasourcereferenceschema.RecordColumn(R)} ]",
            "    RecordFormat : ${4:aws-kinesisanalyticsv2-applicationreferencedatasourcereferenceschema.RecordFormat(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-subscriptiondefinitionversion.subscription":{
        "prefix":"aws-greengrass-subscriptiondefinitionversion.subscription",
        "body":[
            "${1:myAWSGreengrassSubscriptionDefinitionVersion.Subscription}:",
            "  Type: AWS::Greengrass::SubscriptionDefinitionVersion.Subscription",
            "  Properties:",
            "    Target : ${2:String(R)}",
            "    Id : ${3:String(R)}",
            "    Source : ${4:String(R)}",
            "    Subject : ${5:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-spotfleet.blockdevicemapping":{
        "prefix":"aws-ec2-spotfleet.blockdevicemapping",
        "body":[
            "${1:myAWSEC2SpotFleet.BlockDeviceMapping}:",
            "  Type: AWS::EC2::SpotFleet.BlockDeviceMapping",
            "  Properties:",
            "    DeviceName : ${2:String(R)}",
            "    Ebs : ${3:aws-ec2-spotfleetblockdevicemapping.EbsBlockDevice(O)}",
            "    NoDevice : ${4:String(O)}",
            "    VirtualName : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-application.inputlambdaprocessor":{
        "prefix":"aws-kinesisanalytics-application.inputlambdaprocessor",
        "body":[
            "${1:myAWSKinesisAnalyticsApplication.InputLambdaProcessor}:",
            "  Type: AWS::KinesisAnalytics::Application.InputLambdaProcessor",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-wafregional-sqlinjectionmatchset.fieldtomatch":{
        "prefix":"aws-wafregional-sqlinjectionmatchset.fieldtomatch",
        "body":[
            "${1:myAWSWAFRegionalSqlInjectionMatchSet.FieldToMatch}:",
            "  Type: AWS::WAFRegional::SqlInjectionMatchSet.FieldToMatch",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    Data : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptrule.addheaderaction":{
        "prefix":"aws-ses-receiptrule.addheaderaction",
        "body":[
            "${1:myAWSSESReceiptRule.AddHeaderAction}:",
            "  Type: AWS::SES::ReceiptRule.AddHeaderAction",
            "  Properties:",
            "    HeaderValue : ${2:String(R)}",
            "    HeaderName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalytics-applicationoutput.lambdaoutput":{
        "prefix":"aws-kinesisanalytics-applicationoutput.lambdaoutput",
        "body":[
            "${1:myAWSKinesisAnalyticsApplicationOutput.LambdaOutput}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput.LambdaOutput",
            "  Properties:",
            "    ResourceARN : ${2:String(R)}",
            "    RoleARN : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.tagref":{
        "prefix":"aws-appmesh-route.tagref",
        "body":[
            "${1:myAWSAppMeshRoute.TagRef}:",
            "  Type: AWS::AppMesh::Route.TagRef",
            "  Properties:",
            "    Value : ${2:String(O)}",
            "    Key : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.autorollbackconfiguration":{
        "prefix":"aws-codedeploy-deploymentgroup.autorollbackconfiguration",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.AutoRollbackConfiguration}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}",
            "    Events : [ ${3:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloudwatch-alarm.metric":{
        "prefix":"aws-cloudwatch-alarm.metric",
        "body":[
            "${1:myAWSCloudWatchAlarm.Metric}:",
            "  Type: AWS::CloudWatch::Alarm.Metric",
            "  Properties:",
            "    Dimensions : [ ${2:aws-cloudwatch-alarmmetric.Dimension(O)} ]",
            "    MetricName : ${3:String(O)}",
            "    Namespace : ${4:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-autoscalingplans-scalingplan.predefinedloadmetricspecification":{
        "prefix":"aws-autoscalingplans-scalingplan.predefinedloadmetricspecification",
        "body":[
            "${1:myAWSAutoScalingPlansScalingPlan.PredefinedLoadMetricSpecification}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan.PredefinedLoadMetricSpecification",
            "  Properties:",
            "    PredefinedLoadMetricType : ${2:String(R)}",
            "    ResourceLabel : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.instancefleetprovisioningspecifications":{
        "prefix":"aws-emr-instancefleetconfig.instancefleetprovisioningspecifications",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.InstanceFleetProvisioningSpecifications}:",
            "  Type: AWS::EMR::InstanceFleetConfig.InstanceFleetProvisioningSpecifications",
            "  Properties:",
            "    SpotSpecification : ${2:aws-emr-instancefleetconfiginstancefleetprovisioningspecifications.SpotProvisioningSpecification(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.policies":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.policies",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.Policies}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.Policies",
            "  Properties:",
            "    Attributes : [ ${2:Json(R)} ]",
            "    InstancePorts : [ ${3:String(O)} ]",
            "    LoadBalancerPorts : [ ${4:String(O)} ]",
            "    PolicyName : ${5:String(R)}",
            "    PolicyType : ${6:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-apigatewayv2-stage.routesettings":{
        "prefix":"aws-apigatewayv2-stage.routesettings",
        "body":[
            "${1:myAWSApiGatewayV2Stage.RouteSettings}:",
            "  Type: AWS::ApiGatewayV2::Stage.RouteSettings",
            "  Properties:",
            "    LoggingLevel : ${2:String(O)}",
            "    DataTraceEnabled : ${3:Boolean(O)}",
            "    ThrottlingBurstLimit : ${4:Integer(O)}",
            "    DetailedMetricsEnabled : ${5:Boolean(O)}",
            "    ThrottlingRateLimit : ${6:Double(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-stack.elasticip":{
        "prefix":"aws-opsworks-stack.elasticip",
        "body":[
            "${1:myAWSOpsWorksStack.ElasticIp}:",
            "  Type: AWS::OpsWorks::Stack.ElasticIp",
            "  Properties:",
            "    Ip : ${2:String(R)}",
            "    Name : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.autoscalingpolicy":{
        "prefix":"aws-emr-cluster.autoscalingpolicy",
        "body":[
            "${1:myAWSEMRCluster.AutoScalingPolicy}:",
            "  Type: AWS::EMR::Cluster.AutoScalingPolicy",
            "  Properties:",
            "    Constraints : ${2:aws-emr-clusterautoscalingpolicy.ScalingConstraints(R)}",
            "    Rules : [ ${3:aws-emr-clusterautoscalingpolicy.ScalingRule(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dynamodb-table.streamspecification":{
        "prefix":"aws-dynamodb-table.streamspecification",
        "body":[
            "${1:myAWSDynamoDBTable.StreamSpecification}:",
            "  Type: AWS::DynamoDB::Table.StreamSpecification",
            "  Properties:",
            "    StreamViewType : ${2:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.extendeds3destinationconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.extendeds3destinationconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.ExtendedS3DestinationConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.ExtendedS3DestinationConfiguration",
            "  Properties:",
            "    BucketARN : ${2:String(R)}",
            "    BufferingHints : ${3:aws-kinesisfirehose-deliverystreamextendeds3destinationconfiguration.BufferingHints(R)}",
            "    CloudWatchLoggingOptions : ${4:aws-kinesisfirehose-deliverystreamextendeds3destinationconfiguration.CloudWatchLoggingOptions(O)}",
            "    CompressionFormat : ${5:String(R)}",
            "    EncryptionConfiguration : ${6:aws-kinesisfirehose-deliverystreamextendeds3destinationconfiguration.EncryptionConfiguration(O)}",
            "    Prefix : ${7:String(R)}",
            "    ProcessingConfiguration : ${8:aws-kinesisfirehose-deliverystreamextendeds3destinationconfiguration.ProcessingConfiguration(O)}",
            "    RoleARN : ${9:String(R)}",
            "    S3BackupConfiguration : ${10:aws-kinesisfirehose-deliverystreamextendeds3destinationconfiguration.S3DestinationConfiguration(O)}",
            "    S3BackupMode : ${11:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codebuild-project.source":{
        "prefix":"aws-codebuild-project.source",
        "body":[
            "${1:myAWSCodeBuildProject.Source}:",
            "  Type: AWS::CodeBuild::Project.Source",
            "  Properties:",
            "    Type : ${2:String(R)}",
            "    ReportBuildStatus : ${3:Boolean(O)}",
            "    Auth : ${4:aws-codebuild-projectsource.SourceAuth(O)}",
            "    SourceIdentifier : ${5:String(O)}",
            "    BuildSpec : ${6:String(O)}",
            "    GitCloneDepth : ${7:Integer(O)}",
            "    GitSubmodulesConfig : ${8:aws-codebuild-projectsource.GitSubmodulesConfig(O)}",
            "    InsecureSsl : ${9:Boolean(O)}",
            "    Location : ${10:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-instance.privateipaddressspecification":{
        "prefix":"aws-ec2-instance.privateipaddressspecification",
        "body":[
            "${1:myAWSEC2Instance.PrivateIpAddressSpecification}:",
            "  Type: AWS::EC2::Instance.PrivateIpAddressSpecification",
            "  Properties:",
            "    Primary : ${2:Boolean(R)}",
            "    PrivateIpAddress : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appsync-datasource.elasticsearchconfig":{
        "prefix":"aws-appsync-datasource.elasticsearchconfig",
        "body":[
            "${1:myAWSAppSyncDataSource.ElasticsearchConfig}:",
            "  Type: AWS::AppSync::DataSource.ElasticsearchConfig",
            "  Properties:",
            "    AwsRegion : ${2:String(R)}",
            "    Endpoint : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.tagspecification":{
        "prefix":"aws-ec2-ec2fleet.tagspecification",
        "body":[
            "${1:myAWSEC2EC2Fleet.TagSpecification}:",
            "  Type: AWS::EC2::EC2Fleet.TagSpecification",
            "  Properties:",
            "    ResourceType : ${2:String(O)}",
            "    Tags : [ ${3:aws-ec2-ec2fleettagspecification.TagRequest(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-iam-user.policy":{
        "prefix":"aws-iam-user.policy",
        "body":[
            "${1:myAWSIAMUser.Policy}:",
            "  Type: AWS::IAM::User.Policy",
            "  Properties:",
            "    PolicyDocument : ${2:Json(R)}",
            "    PolicyName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.hostvolumeproperties":{
        "prefix":"aws-ecs-taskdefinition.hostvolumeproperties",
        "body":[
            "${1:myAWSECSTaskDefinition.HostVolumeProperties}:",
            "  Type: AWS::ECS::TaskDefinition.HostVolumeProperties",
            "  Properties:",
            "    SourcePath : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisfirehose-deliverystream.redshiftdestinationconfiguration":{
        "prefix":"aws-kinesisfirehose-deliverystream.redshiftdestinationconfiguration",
        "body":[
            "${1:myAWSKinesisFirehoseDeliveryStream.RedshiftDestinationConfiguration}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream.RedshiftDestinationConfiguration",
            "  Properties:",
            "    CloudWatchLoggingOptions : ${2:aws-kinesisfirehose-deliverystreamredshiftdestinationconfiguration.CloudWatchLoggingOptions(O)}",
            "    ClusterJDBCURL : ${3:String(R)}",
            "    CopyCommand : ${4:aws-kinesisfirehose-deliverystreamredshiftdestinationconfiguration.CopyCommand(R)}",
            "    Password : ${5:String(R)}",
            "    ProcessingConfiguration : ${6:aws-kinesisfirehose-deliverystreamredshiftdestinationconfiguration.ProcessingConfiguration(O)}",
            "    RoleARN : ${7:String(R)}",
            "    S3Configuration : ${8:aws-kinesisfirehose-deliverystreamredshiftdestinationconfiguration.S3DestinationConfiguration(R)}",
            "    Username : ${9:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.ebsoptions":{
        "prefix":"aws-elasticsearch-domain.ebsoptions",
        "body":[
            "${1:myAWSElasticsearchDomain.EBSOptions}:",
            "  Type: AWS::Elasticsearch::Domain.EBSOptions",
            "  Properties:",
            "    EBSEnabled : ${2:Boolean(O)}",
            "    Iops : ${3:Integer(O)}",
            "    VolumeSize : ${4:Integer(O)}",
            "    VolumeType : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-instancefleetconfig.ebsblockdeviceconfig":{
        "prefix":"aws-emr-instancefleetconfig.ebsblockdeviceconfig",
        "body":[
            "${1:myAWSEMRInstanceFleetConfig.EbsBlockDeviceConfig}:",
            "  Type: AWS::EMR::InstanceFleetConfig.EbsBlockDeviceConfig",
            "  Properties:",
            "    VolumeSpecification : ${2:aws-emr-instancefleetconfigebsblockdeviceconfig.VolumeSpecification(R)}",
            "    VolumesPerInstance : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-launchtemplate.launchtemplateelasticinferenceaccelerator":{
        "prefix":"aws-ec2-launchtemplate.launchtemplateelasticinferenceaccelerator",
        "body":[
            "${1:myAWSEC2LaunchTemplate.LaunchTemplateElasticInferenceAccelerator}:",
            "  Type: AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator",
            "  Properties:",
            "    Type : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-instance.timebasedautoscaling":{
        "prefix":"aws-opsworks-instance.timebasedautoscaling",
        "body":[
            "${1:myAWSOpsWorksInstance.TimeBasedAutoScaling}:",
            "  Type: AWS::OpsWorks::Instance.TimeBasedAutoScaling",
            "  Properties:",
            "    Friday : [ ${2:String(O)} ]",
            "    Monday : [ ${3:String(O)} ]",
            "    Saturday : [ ${4:String(O)} ]",
            "    Sunday : [ ${5:String(O)} ]",
            "    Thursday : [ ${6:String(O)} ]",
            "    Tuesday : [ ${7:String(O)} ]",
            "    Wednesday : [ ${8:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-config-configrule.sourcedetail":{
        "prefix":"aws-config-configrule.sourcedetail",
        "body":[
            "${1:myAWSConfigConfigRule.SourceDetail}:",
            "  Type: AWS::Config::ConfigRule.SourceDetail",
            "  Properties:",
            "    EventSource : ${2:String(R)}",
            "    MaximumExecutionFrequency : ${3:String(O)}",
            "    MessageType : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ec2-ec2fleet.spotoptionsrequest":{
        "prefix":"aws-ec2-ec2fleet.spotoptionsrequest",
        "body":[
            "${1:myAWSEC2EC2Fleet.SpotOptionsRequest}:",
            "  Type: AWS::EC2::EC2Fleet.SpotOptionsRequest",
            "  Properties:",
            "    AllocationStrategy : ${2:String(O)}",
            "    InstanceInterruptionBehavior : ${3:String(O)}",
            "    InstancePoolsToUseCount : ${4:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-dms-endpoint.elasticsearchsettings":{
        "prefix":"aws-dms-endpoint.elasticsearchsettings",
        "body":[
            "${1:myAWSDMSEndpoint.ElasticsearchSettings}:",
            "  Type: AWS::DMS::Endpoint.ElasticsearchSettings",
            "  Properties:",
            "    EndpointUri : ${2:String(O)}",
            "    FullLoadErrorPercentage : ${3:Integer(O)}",
            "    ErrorRetryDuration : ${4:Integer(O)}",
            "    ServiceAccessRoleArn : ${5:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticloadbalancing-loadbalancer.appcookiestickinesspolicy":{
        "prefix":"aws-elasticloadbalancing-loadbalancer.appcookiestickinesspolicy",
        "body":[
            "${1:myAWSElasticLoadBalancingLoadBalancer.AppCookieStickinessPolicy}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy",
            "  Properties:",
            "    CookieName : ${2:String(R)}",
            "    PolicyName : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ses-receiptfilter.ipfilter":{
        "prefix":"aws-ses-receiptfilter.ipfilter",
        "body":[
            "${1:myAWSSESReceiptFilter.IpFilter}:",
            "  Type: AWS::SES::ReceiptFilter.IpFilter",
            "  Properties:",
            "    Policy : ${2:String(R)}",
            "    Cidr : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-cloud9-environmentec2.repository":{
        "prefix":"aws-cloud9-environmentec2.repository",
        "body":[
            "${1:myAWSCloud9EnvironmentEC2.Repository}:",
            "  Type: AWS::Cloud9::EnvironmentEC2.Repository",
            "  Properties:",
            "    PathComponent : ${2:String(R)}",
            "    RepositoryUrl : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.hadoopjarstepconfig":{
        "prefix":"aws-emr-cluster.hadoopjarstepconfig",
        "body":[
            "${1:myAWSEMRCluster.HadoopJarStepConfig}:",
            "  Type: AWS::EMR::Cluster.HadoopJarStepConfig",
            "  Properties:",
            "    Args : [ ${2:String(O)} ]",
            "    Jar : ${3:String(R)}",
            "    MainClass : ${4:String(O)}",
            "    StepProperties : [ ${5:aws-emr-clusterhadoopjarstepconfig.KeyValue(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-rds-optiongroup.optionconfiguration":{
        "prefix":"aws-rds-optiongroup.optionconfiguration",
        "body":[
            "${1:myAWSRDSOptionGroup.OptionConfiguration}:",
            "  Type: AWS::RDS::OptionGroup.OptionConfiguration",
            "  Properties:",
            "    DBSecurityGroupMemberships : [ ${2:String(O)} ]",
            "    OptionName : ${3:String(R)}",
            "    OptionSettings : [ ${4:aws-rds-optiongroupoptionconfiguration.OptionSetting(O)} ]",
            "    OptionVersion : ${5:String(O)}",
            "    Port : ${6:Integer(O)}",
            "    VpcSecurityGroupMemberships : [ ${7:String(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-greengrass-connectordefinitionversion.connector":{
        "prefix":"aws-greengrass-connectordefinitionversion.connector",
        "body":[
            "${1:myAWSGreengrassConnectorDefinitionVersion.Connector}:",
            "  Type: AWS::Greengrass::ConnectorDefinitionVersion.Connector",
            "  Properties:",
            "    ConnectorArn : ${2:String(R)}",
            "    Parameters : ${3:Json(O)}",
            "    Id : ${4:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-lambda-alias.versionweight":{
        "prefix":"aws-lambda-alias.versionweight",
        "body":[
            "${1:myAWSLambdaAlias.VersionWeight}:",
            "  Type: AWS::Lambda::Alias.VersionWeight",
            "  Properties:",
            "    FunctionVersion : ${2:String(R)}",
            "    FunctionWeight : ${3:Double(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-opsworks-app.source":{
        "prefix":"aws-opsworks-app.source",
        "body":[
            "${1:myAWSOpsWorksApp.Source}:",
            "  Type: AWS::OpsWorks::App.Source",
            "  Properties:",
            "    Password : ${2:String(O)}",
            "    Revision : ${3:String(O)}",
            "    SshKey : ${4:String(O)}",
            "    Type : ${5:String(O)}",
            "    Url : ${6:String(O)}",
            "    Username : ${7:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-elasticsearch-domain.encryptionatrestoptions":{
        "prefix":"aws-elasticsearch-domain.encryptionatrestoptions",
        "body":[
            "${1:myAWSElasticsearchDomain.EncryptionAtRestOptions}:",
            "  Type: AWS::Elasticsearch::Domain.EncryptionAtRestOptions",
            "  Properties:",
            "    Enabled : ${2:Boolean(O)}",
            "    KmsKeyId : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-kinesisanalyticsv2-applicationreferencedatasource.csvmappingparameters":{
        "prefix":"aws-kinesisanalyticsv2-applicationreferencedatasource.csvmappingparameters",
        "body":[
            "${1:myAWSKinesisAnalyticsV2ApplicationReferenceDataSource.CSVMappingParameters}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.CSVMappingParameters",
            "  Properties:",
            "    RecordRowDelimiter : ${2:String(R)}",
            "    RecordColumnDelimiter : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-appmesh-route.tcprouteaction":{
        "prefix":"aws-appmesh-route.tcprouteaction",
        "body":[
            "${1:myAWSAppMeshRoute.TcpRouteAction}:",
            "  Type: AWS::AppMesh::Route.TcpRouteAction",
            "  Properties:",
            "    WeightedTargets : [ ${2:aws-appmesh-routetcprouteaction.WeightedTarget(R)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codepipeline-webhook.webhookauthconfiguration":{
        "prefix":"aws-codepipeline-webhook.webhookauthconfiguration",
        "body":[
            "${1:myAWSCodePipelineWebhook.WebhookAuthConfiguration}:",
            "  Type: AWS::CodePipeline::Webhook.WebhookAuthConfiguration",
            "  Properties:",
            "    AllowedIPRange : ${2:String(O)}",
            "    SecretToken : ${3:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-budgets-budget.spend":{
        "prefix":"aws-budgets-budget.spend",
        "body":[
            "${1:myAWSBudgetsBudget.Spend}:",
            "  Type: AWS::Budgets::Budget.Spend",
            "  Properties:",
            "    Amount : ${2:Double(R)}",
            "    Unit : ${3:String(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-emr-cluster.scalingtrigger":{
        "prefix":"aws-emr-cluster.scalingtrigger",
        "body":[
            "${1:myAWSEMRCluster.ScalingTrigger}:",
            "  Type: AWS::EMR::Cluster.ScalingTrigger",
            "  Properties:",
            "    CloudWatchAlarmDefinition : ${2:aws-emr-clusterscalingtrigger.CloudWatchAlarmDefinition(R)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-applicationautoscaling-scalabletarget.scalabletargetaction":{
        "prefix":"aws-applicationautoscaling-scalabletarget.scalabletargetaction",
        "body":[
            "${1:myAWSApplicationAutoScalingScalableTarget.ScalableTargetAction}:",
            "  Type: AWS::ApplicationAutoScaling::ScalableTarget.ScalableTargetAction",
            "  Properties:",
            "    MaxCapacity : ${2:Integer(O)}",
            "    MinCapacity : ${3:Integer(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-codedeploy-deploymentgroup.ec2tagsetlistobject":{
        "prefix":"aws-codedeploy-deploymentgroup.ec2tagsetlistobject",
        "body":[
            "${1:myAWSCodeDeployDeploymentGroup.EC2TagSetListObject}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject",
            "  Properties:",
            "    Ec2TagGroup : [ ${2:aws-codedeploy-deploymentgroupec2tagsetlistobject.EC2TagFilter(O)} ]"
        ],
        "scope":"source.cloudformation",
        "description":""
    },
    "aws-ecs-taskdefinition.repositorycredentials":{
        "prefix":"aws-ecs-taskdefinition.repositorycredentials",
        "body":[
            "${1:myAWSECSTaskDefinition.RepositoryCredentials}:",
            "  Type: AWS::ECS::TaskDefinition.RepositoryCredentials",
            "  Properties:",
            "    CredentialsParameter : ${2:String(O)}"
        ],
        "scope":"source.cloudformation",
        "description":""
    }
}